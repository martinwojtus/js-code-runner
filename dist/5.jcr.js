(window.webpackJsonpJsCodeRunner=window.webpackJsonpJsCodeRunner||[]).push([[5],{"./node_modules/svelte/compiler/svelte.js":
/*!************************************************!*\
  !*** ./node_modules/svelte/compiler/svelte.js ***!
  \************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(Buffer, process) {(function (global, factory) {\n\t true ? factory(exports) :\n\tundefined;\n}(this, (function (exports) { 'use strict';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\n\n// Reserved word lists for various dialects of the language\n\nvar reservedWords = {\n  3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n  5: \"class enum extends super const export import\",\n  6: \"enum\",\n  strict: \"implements interface let package private protected public static yield\",\n  strictBind: \"eval arguments\"\n};\n\n// And the keywords\n\nvar ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\nvar keywords = {\n  5: ecma5AndLessKeywords,\n  6: ecma5AndLessKeywords + \" const class extends export import super\"\n};\n\nvar keywordRelationalOperator = /^in(stanceof)?$/;\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\n\nvar nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312e\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fea\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ae\\ua7b0-\\ua7b7\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab65\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nvar nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d4-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by bin/generate-identifier-regex.js\n\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,26,45,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,785,52,76,44,33,24,27,35,42,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,54,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,86,25,391,63,32,0,257,0,11,39,8,0,22,0,12,39,3,3,55,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,698,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,881,68,12,0,67,12,65,1,31,6124,20,754,9486,286,82,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,4149,196,60,67,1213,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,15,7472,3104,541];\n\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,1306,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,52,0,13,2,49,13,10,2,4,9,83,11,7,0,161,11,6,9,7,3,57,0,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,87,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,423,9,280,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,19719,9,135,4,60,6,26,9,1016,45,17,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,2214,6,110,6,6,9,792487,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) { return false }\n    pos += set[i + 1];\n    if (pos >= code) { return true }\n  }\n}\n\n// Test whether a given character code starts an identifier.\n\nfunction isIdentifierStart(code, astral) {\n  if (code < 65) { return code === 36 }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes)\n}\n\n// Test whether a given character is part of an identifier.\n\nfunction isIdentifierChar(code, astral) {\n  if (code < 48) { return code === 36 }\n  if (code < 58) { return true }\n  if (code < 65) { return false }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n}\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nvar TokenType = function TokenType(label, conf) {\n  if ( conf === void 0 ) conf = {};\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nfunction binop(name, prec) {\n  return new TokenType(name, {beforeExpr: true, binop: prec})\n}\nvar beforeExpr = {beforeExpr: true};\nvar startsExpr = {startsExpr: true};\n\n// Map keyword names to token types.\n\nvar keywords$1 = {};\n\n// Succinct definitions of keyword token types\nfunction kw(name, options) {\n  if ( options === void 0 ) options = {};\n\n  options.keyword = name;\n  return keywords$1[name] = new TokenType(name, options)\n}\n\nvar types = {\n  num: new TokenType(\"num\", startsExpr),\n  regexp: new TokenType(\"regexp\", startsExpr),\n  string: new TokenType(\"string\", startsExpr),\n  name: new TokenType(\"name\", startsExpr),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n  braceR: new TokenType(\"}\"),\n  parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", beforeExpr),\n  semi: new TokenType(\";\", beforeExpr),\n  colon: new TokenType(\":\", beforeExpr),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", beforeExpr),\n  arrow: new TokenType(\"=>\", beforeExpr),\n  template: new TokenType(\"template\"),\n  invalidTemplate: new TokenType(\"invalidTemplate\"),\n  ellipsis: new TokenType(\"...\", beforeExpr),\n  backQuote: new TokenType(\"`\", startsExpr),\n  dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n  assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n  incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n  prefix: new TokenType(\"!/~\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  logicalOR: binop(\"||\", 1),\n  logicalAND: binop(\"&&\", 2),\n  bitwiseOR: binop(\"|\", 3),\n  bitwiseXOR: binop(\"^\", 4),\n  bitwiseAND: binop(\"&\", 5),\n  equality: binop(\"==/!=/===/!==\", 6),\n  relational: binop(\"</>/<=/>=\", 7),\n  bitShift: binop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n  modulo: binop(\"%\", 10),\n  star: binop(\"*\", 10),\n  slash: binop(\"/\", 10),\n  starstar: new TokenType(\"**\", {beforeExpr: true}),\n\n  // Keyword token types.\n  _break: kw(\"break\"),\n  _case: kw(\"case\", beforeExpr),\n  _catch: kw(\"catch\"),\n  _continue: kw(\"continue\"),\n  _debugger: kw(\"debugger\"),\n  _default: kw(\"default\", beforeExpr),\n  _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n  _else: kw(\"else\", beforeExpr),\n  _finally: kw(\"finally\"),\n  _for: kw(\"for\", {isLoop: true}),\n  _function: kw(\"function\", startsExpr),\n  _if: kw(\"if\"),\n  _return: kw(\"return\", beforeExpr),\n  _switch: kw(\"switch\"),\n  _throw: kw(\"throw\", beforeExpr),\n  _try: kw(\"try\"),\n  _var: kw(\"var\"),\n  _const: kw(\"const\"),\n  _while: kw(\"while\", {isLoop: true}),\n  _with: kw(\"with\"),\n  _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n  _this: kw(\"this\", startsExpr),\n  _super: kw(\"super\", startsExpr),\n  _class: kw(\"class\", startsExpr),\n  _extends: kw(\"extends\", beforeExpr),\n  _export: kw(\"export\"),\n  _import: kw(\"import\"),\n  _null: kw(\"null\", startsExpr),\n  _true: kw(\"true\", startsExpr),\n  _false: kw(\"false\", startsExpr),\n  _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n  _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n  _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n};\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  return code === 10 || code === 13 || code === 0x2028 || code === 0x2029\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nvar ref = Object.prototype;\nvar hasOwnProperty = ref.hasOwnProperty;\nvar toString = ref.toString;\n\n// Checks if an object has a property.\n\nfunction has(obj, propName) {\n  return hasOwnProperty.call(obj, propName)\n}\n\nvar isArray = Array.isArray || (function (obj) { return (\n  toString.call(obj) === \"[object Array]\"\n); });\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = function Position(line, col) {\n  this.line = line;\n  this.column = col;\n};\n\nPosition.prototype.offset = function offset (n) {\n  return new Position(this.line, this.column + n)\n};\n\nvar SourceLocation = function SourceLocation(p, start, end) {\n  this.start = start;\n  this.end = end;\n  if (p.sourceFile !== null) { this.source = p.sourceFile; }\n};\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    lineBreakG.lastIndex = cur;\n    var match = lineBreakG.exec(input);\n    if (match && match.index < offset) {\n      ++line;\n      cur = match.index + match[0].length;\n    } else {\n      return new Position(line, offset - cur)\n    }\n  }\n}\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nvar defaultOptions = {\n  // `ecmaVersion` indicates the ECMAScript version to parse. Must\n  // be either 3, 5, 6 (2015), 7 (2016), or 8 (2017). This influences support\n  // for strict mode, the set of reserved words, and support for\n  // new syntax features. The default is 7.\n  ecmaVersion: 7,\n  // `sourceType` indicates the mode the code should be parsed in.\n  // Can be either `\"script\"` or `\"module\"`. This influences global\n  // strict mode and parsing of `import` and `export` declarations.\n  sourceType: \"script\",\n  // `onInsertedSemicolon` can be a callback that will be called\n  // when a semicolon is automatically inserted. It will be passed\n  // th position of the comma as an offset, and if `locations` is\n  // enabled, it is given the location as a `{line, column}` object\n  // as second argument.\n  onInsertedSemicolon: null,\n  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n  // trailing commas.\n  onTrailingComma: null,\n  // By default, reserved words are only enforced if ecmaVersion >= 5.\n  // Set `allowReserved` to a boolean value to explicitly turn this on\n  // an off. When this option has the value \"never\", reserved words\n  // and keywords can also not be used as property names.\n  allowReserved: null,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // When enabled, hashbang directive in the beginning of file\n  // is allowed and treated as a line comment.\n  allowHashBang: false,\n  // When `locations` is on, `loc` properties holding objects with\n  // `start` and `end` properties in `{line, column}` form (with\n  // line being 1-based and column 0-based) will be attached to the\n  // nodes.\n  locations: false,\n  // A function can be passed as `onToken` option, which will\n  // cause Acorn to call that function with object in the same\n  // format as tokens returned from `tokenizer().getToken()`. Note\n  // that you are not allowed to call the parser from the\n  // callback—that will corrupt its internal state.\n  onToken: null,\n  // A function can be passed as `onComment` option, which will\n  // cause Acorn to call that function with `(block, text, start,\n  // end)` parameters whenever a comment is skipped. `block` is a\n  // boolean indicating whether this is a block (`/* */`) comment,\n  // `text` is the content of the comment, and `start` and `end` are\n  // character offsets that denote the start and end of the comment.\n  // When the `locations` option is on, two more parameters are\n  // passed, the full `{line, column}` locations of the start and\n  // end of the comments. Note that you are not allowed to call the\n  // parser from the callback—that will corrupt its internal state.\n  onComment: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // It is possible to parse multiple files into a single AST by\n  // passing the tree produced by parsing the first file as\n  // `program` option in subsequent parses. This will add the\n  // toplevel forms of the parsed file to the `Program` (top) node\n  // of an existing parse tree.\n  program: null,\n  // When `locations` is on, you can pass this to record the source\n  // file in every node's `loc` object.\n  sourceFile: null,\n  // This value, if given, is stored in every node, whether\n  // `locations` is on or off.\n  directSourceFile: null,\n  // When enabled, parenthesized expressions are represented by\n  // (non-standard) ParenthesizedExpression nodes\n  preserveParens: false,\n  plugins: {}\n};\n\n// Interpret and default an options object\n\nfunction getOptions(opts) {\n  var options = {};\n\n  for (var opt in defaultOptions)\n    { options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]; }\n\n  if (options.ecmaVersion >= 2015)\n    { options.ecmaVersion -= 2009; }\n\n  if (options.allowReserved == null)\n    { options.allowReserved = options.ecmaVersion < 5; }\n\n  if (isArray(options.onToken)) {\n    var tokens = options.onToken;\n    options.onToken = function (token) { return tokens.push(token); };\n  }\n  if (isArray(options.onComment))\n    { options.onComment = pushComment(options, options.onComment); }\n\n  return options\n}\n\nfunction pushComment(options, array) {\n  return function(block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? \"Block\" : \"Line\",\n      value: text,\n      start: start,\n      end: end\n    };\n    if (options.locations)\n      { comment.loc = new SourceLocation(this, startLoc, endLoc); }\n    if (options.ranges)\n      { comment.range = [start, end]; }\n    array.push(comment);\n  }\n}\n\n// Registered plugins\nvar plugins = {};\n\nfunction keywordRegexp(words) {\n  return new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\")\n}\n\nvar Parser = function Parser(options, input, startPos) {\n  this.options = options = getOptions(options);\n  this.sourceFile = options.sourceFile;\n  this.keywords = keywordRegexp(keywords[options.ecmaVersion >= 6 ? 6 : 5]);\n  var reserved = \"\";\n  if (!options.allowReserved) {\n    for (var v = options.ecmaVersion;; v--)\n      { if (reserved = reservedWords[v]) { break } }\n    if (options.sourceType == \"module\") { reserved += \" await\"; }\n  }\n  this.reservedWords = keywordRegexp(reserved);\n  var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n  this.reservedWordsStrict = keywordRegexp(reservedStrict);\n  this.reservedWordsStrictBind = keywordRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n  this.input = String(input);\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  this.containsEsc = false;\n\n  // Load plugins\n  this.loadPlugins(options.plugins);\n\n  // Set up token state\n\n  // The current position of the tokenizer in the input.\n  if (startPos) {\n    this.pos = startPos;\n    this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n  } else {\n    this.pos = this.lineStart = 0;\n    this.curLine = 1;\n  }\n\n  // Properties of the current token:\n  // Its type\n  this.type = types.eof;\n  // For tokens that include more information than their type, the value\n  this.value = null;\n  // Its start and end offset\n  this.start = this.end = this.pos;\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  this.startLoc = this.endLoc = this.curPosition();\n\n  // Position information for the previous token\n  this.lastTokEndLoc = this.lastTokStartLoc = null;\n  this.lastTokStart = this.lastTokEnd = this.pos;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  this.context = this.initialContext();\n  this.exprAllowed = true;\n\n  // Figure out if it's a module code.\n  this.inModule = options.sourceType === \"module\";\n  this.strict = this.inModule || this.strictDirective(this.pos);\n\n  // Used to signify the start of a potential arrow function\n  this.potentialArrowAt = -1;\n\n  // Flags to track whether we are in a function, a generator, an async function.\n  this.inFunction = this.inGenerator = this.inAsync = false;\n  // Positions to delayed-check that yield/await does not exist in default parameters.\n  this.yieldPos = this.awaitPos = 0;\n  // Labels in scope.\n  this.labels = [];\n\n  // If enabled, skip leading hashbang line.\n  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\")\n    { this.skipLineComment(2); }\n\n  // Scope tracking for duplicate variable names (see scope.js)\n  this.scopeStack = [];\n  this.enterFunctionScope();\n\n  // For RegExp validation\n  this.regexpState = null;\n};\n\n// DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them\nParser.prototype.isKeyword = function isKeyword (word) { return this.keywords.test(word) };\nParser.prototype.isReservedWord = function isReservedWord (word) { return this.reservedWords.test(word) };\n\nParser.prototype.extend = function extend (name, f) {\n  this[name] = f(this[name]);\n};\n\nParser.prototype.loadPlugins = function loadPlugins (pluginConfigs) {\n    var this$1 = this;\n\n  for (var name in pluginConfigs) {\n    var plugin = plugins[name];\n    if (!plugin) { throw new Error(\"Plugin '\" + name + \"' not found\") }\n    plugin(this$1, pluginConfigs[name]);\n  }\n};\n\nParser.prototype.parse = function parse () {\n  var node = this.options.program || this.startNode();\n  this.nextToken();\n  return this.parseTopLevel(node)\n};\n\nvar pp = Parser.prototype;\n\n// ## Parser utilities\n\nvar literal = /^(?:'((?:\\\\.|[^'])*?)'|\"((?:\\\\.|[^\"])*?)\"|;)/;\npp.strictDirective = function(start) {\n  var this$1 = this;\n\n  for (;;) {\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this$1.input)[0].length;\n    var match = literal.exec(this$1.input.slice(start));\n    if (!match) { return false }\n    if ((match[1] || match[2]) == \"use strict\") { return true }\n    start += match[0].length;\n  }\n};\n\n// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n\npp.eat = function(type) {\n  if (this.type === type) {\n    this.next();\n    return true\n  } else {\n    return false\n  }\n};\n\n// Tests whether parsed token is a contextual keyword.\n\npp.isContextual = function(name) {\n  return this.type === types.name && this.value === name && !this.containsEsc\n};\n\n// Consumes contextual keyword if possible.\n\npp.eatContextual = function(name) {\n  if (!this.isContextual(name)) { return false }\n  this.next();\n  return true\n};\n\n// Asserts that following token is given contextual keyword.\n\npp.expectContextual = function(name) {\n  if (!this.eatContextual(name)) { this.unexpected(); }\n};\n\n// Test whether a semicolon can be inserted at the current position.\n\npp.canInsertSemicolon = function() {\n  return this.type === types.eof ||\n    this.type === types.braceR ||\n    lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\npp.insertSemicolon = function() {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon)\n      { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }\n    return true\n  }\n};\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp.semicolon = function() {\n  if (!this.eat(types.semi) && !this.insertSemicolon()) { this.unexpected(); }\n};\n\npp.afterTrailingComma = function(tokType, notNext) {\n  if (this.type == tokType) {\n    if (this.options.onTrailingComma)\n      { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }\n    if (!notNext)\n      { this.next(); }\n    return true\n  }\n};\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n\npp.expect = function(type) {\n  this.eat(type) || this.unexpected();\n};\n\n// Raise an unexpected token error.\n\npp.unexpected = function(pos) {\n  this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n};\n\nfunction DestructuringErrors() {\n  this.shorthandAssign =\n  this.trailingComma =\n  this.parenthesizedAssign =\n  this.parenthesizedBind =\n  this.doubleProto =\n    -1;\n}\n\npp.checkPatternErrors = function(refDestructuringErrors, isAssign) {\n  if (!refDestructuringErrors) { return }\n  if (refDestructuringErrors.trailingComma > -1)\n    { this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\"); }\n  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n  if (parens > -1) { this.raiseRecoverable(parens, \"Parenthesized pattern\"); }\n};\n\npp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n  if (!refDestructuringErrors) { return false }\n  var shorthandAssign = refDestructuringErrors.shorthandAssign;\n  var doubleProto = refDestructuringErrors.doubleProto;\n  if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }\n  if (shorthandAssign >= 0)\n    { this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\"); }\n  if (doubleProto >= 0)\n    { this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\"); }\n};\n\npp.checkYieldAwaitInDefaultParams = function() {\n  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\n    { this.raise(this.yieldPos, \"Yield expression cannot be a default value\"); }\n  if (this.awaitPos)\n    { this.raise(this.awaitPos, \"Await expression cannot be a default value\"); }\n};\n\npp.isSimpleAssignTarget = function(expr) {\n  if (expr.type === \"ParenthesizedExpression\")\n    { return this.isSimpleAssignTarget(expr.expression) }\n  return expr.type === \"Identifier\" || expr.type === \"MemberExpression\"\n};\n\nvar pp$1 = Parser.prototype;\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp$1.parseTopLevel = function(node) {\n  var this$1 = this;\n\n  var exports = {};\n  if (!node.body) { node.body = []; }\n  while (this.type !== types.eof) {\n    var stmt = this$1.parseStatement(true, true, exports);\n    node.body.push(stmt);\n  }\n  this.adaptDirectivePrologue(node.body);\n  this.next();\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType;\n  }\n  return this.finishNode(node, \"Program\")\n};\n\nvar loopLabel = {kind: \"loop\"};\nvar switchLabel = {kind: \"switch\"};\n\npp$1.isLet = function() {\n  if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) { return false }\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n  if (nextCh === 91 || nextCh == 123) { return true } // '{' and '['\n  if (isIdentifierStart(nextCh, true)) {\n    var pos = next + 1;\n    while (isIdentifierChar(this.input.charCodeAt(pos), true)) { ++pos; }\n    var ident = this.input.slice(next, pos);\n    if (!keywordRelationalOperator.test(ident)) { return true }\n  }\n  return false\n};\n\n// check 'async [no LineTerminator here] function'\n// - 'async /*foo*/ function' is OK.\n// - 'async /*\\n*/ function' is invalid.\npp$1.isAsyncFunction = function() {\n  if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\"))\n    { return false }\n\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length;\n  return !lineBreak.test(this.input.slice(this.pos, next)) &&\n    this.input.slice(next, next + 8) === \"function\" &&\n    (next + 8 == this.input.length || !isIdentifierChar(this.input.charAt(next + 8)))\n};\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp$1.parseStatement = function(declaration, topLevel, exports) {\n  var starttype = this.type, node = this.startNode(), kind;\n\n  if (this.isLet()) {\n    starttype = types._var;\n    kind = \"let\";\n  }\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n  case types._break: case types._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n  case types._debugger: return this.parseDebuggerStatement(node)\n  case types._do: return this.parseDoStatement(node)\n  case types._for: return this.parseForStatement(node)\n  case types._function:\n    if (!declaration && this.options.ecmaVersion >= 6) { this.unexpected(); }\n    return this.parseFunctionStatement(node, false)\n  case types._class:\n    if (!declaration) { this.unexpected(); }\n    return this.parseClass(node, true)\n  case types._if: return this.parseIfStatement(node)\n  case types._return: return this.parseReturnStatement(node)\n  case types._switch: return this.parseSwitchStatement(node)\n  case types._throw: return this.parseThrowStatement(node)\n  case types._try: return this.parseTryStatement(node)\n  case types._const: case types._var:\n    kind = kind || this.value;\n    if (!declaration && kind != \"var\") { this.unexpected(); }\n    return this.parseVarStatement(node, kind)\n  case types._while: return this.parseWhileStatement(node)\n  case types._with: return this.parseWithStatement(node)\n  case types.braceL: return this.parseBlock()\n  case types.semi: return this.parseEmptyStatement(node)\n  case types._export:\n  case types._import:\n    if (!this.options.allowImportExportEverywhere) {\n      if (!topLevel)\n        { this.raise(this.start, \"'import' and 'export' may only appear at the top level\"); }\n      if (!this.inModule)\n        { this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\"); }\n    }\n    return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports)\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n  default:\n    if (this.isAsyncFunction()) {\n      if (!declaration) { this.unexpected(); }\n      this.next();\n      return this.parseFunctionStatement(node, true)\n    }\n\n    var maybeName = this.value, expr = this.parseExpression();\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon))\n      { return this.parseLabeledStatement(node, maybeName, expr) }\n    else { return this.parseExpressionStatement(node, expr) }\n  }\n};\n\npp$1.parseBreakContinueStatement = function(node, keyword) {\n  var this$1 = this;\n\n  var isBreak = keyword == \"break\";\n  this.next();\n  if (this.eat(types.semi) || this.insertSemicolon()) { node.label = null; }\n  else if (this.type !== types.name) { this.unexpected(); }\n  else {\n    node.label = this.parseIdent();\n    this.semicolon();\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  var i = 0;\n  for (; i < this.labels.length; ++i) {\n    var lab = this$1.labels[i];\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) { break }\n      if (node.label && isBreak) { break }\n    }\n  }\n  if (i === this.labels.length) { this.raise(node.start, \"Unsyntactic \" + keyword); }\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n};\n\npp$1.parseDebuggerStatement = function(node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\")\n};\n\npp$1.parseDoStatement = function(node) {\n  this.next();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  this.expect(types._while);\n  node.test = this.parseParenExpression();\n  if (this.options.ecmaVersion >= 6)\n    { this.eat(types.semi); }\n  else\n    { this.semicolon(); }\n  return this.finishNode(node, \"DoWhileStatement\")\n};\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp$1.parseForStatement = function(node) {\n  this.next();\n  var awaitAt = (this.options.ecmaVersion >= 9 && this.inAsync && this.eatContextual(\"await\")) ? this.lastTokStart : -1;\n  this.labels.push(loopLabel);\n  this.enterLexicalScope();\n  this.expect(types.parenL);\n  if (this.type === types.semi) {\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, null)\n  }\n  var isLet = this.isLet();\n  if (this.type === types._var || this.type === types._const || isLet) {\n    var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;\n    this.next();\n    this.parseVar(init$1, true, kind);\n    this.finishNode(init$1, \"VariableDeclaration\");\n    if ((this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1 &&\n        !(kind !== \"var\" && init$1.declarations[0].init)) {\n      if (this.options.ecmaVersion >= 9) {\n        if (this.type === types._in) {\n          if (awaitAt > -1) { this.unexpected(awaitAt); }\n        } else { node.await = awaitAt > -1; }\n      }\n      return this.parseForIn(node, init$1)\n    }\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, init$1)\n  }\n  var refDestructuringErrors = new DestructuringErrors;\n  var init = this.parseExpression(true, refDestructuringErrors);\n  if (this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n    if (this.options.ecmaVersion >= 9) {\n      if (this.type === types._in) {\n        if (awaitAt > -1) { this.unexpected(awaitAt); }\n      } else { node.await = awaitAt > -1; }\n    }\n    this.toAssignable(init, false, refDestructuringErrors);\n    this.checkLVal(init);\n    return this.parseForIn(node, init)\n  } else {\n    this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  if (awaitAt > -1) { this.unexpected(awaitAt); }\n  return this.parseFor(node, init)\n};\n\npp$1.parseFunctionStatement = function(node, isAsync) {\n  this.next();\n  return this.parseFunction(node, true, false, isAsync)\n};\n\npp$1.parseIfStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  // allow function declarations in branches, but only in non-strict mode\n  node.consequent = this.parseStatement(!this.strict && this.type == types._function);\n  node.alternate = this.eat(types._else) ? this.parseStatement(!this.strict && this.type == types._function) : null;\n  return this.finishNode(node, \"IfStatement\")\n};\n\npp$1.parseReturnStatement = function(node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n    { this.raise(this.start, \"'return' outside of function\"); }\n  this.next();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(types.semi) || this.insertSemicolon()) { node.argument = null; }\n  else { node.argument = this.parseExpression(); this.semicolon(); }\n  return this.finishNode(node, \"ReturnStatement\")\n};\n\npp$1.parseSwitchStatement = function(node) {\n  var this$1 = this;\n\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(types.braceL);\n  this.labels.push(switchLabel);\n  this.enterLexicalScope();\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  var cur;\n  for (var sawDefault = false; this.type != types.braceR;) {\n    if (this$1.type === types._case || this$1.type === types._default) {\n      var isCase = this$1.type === types._case;\n      if (cur) { this$1.finishNode(cur, \"SwitchCase\"); }\n      node.cases.push(cur = this$1.startNode());\n      cur.consequent = [];\n      this$1.next();\n      if (isCase) {\n        cur.test = this$1.parseExpression();\n      } else {\n        if (sawDefault) { this$1.raiseRecoverable(this$1.lastTokStart, \"Multiple default clauses\"); }\n        sawDefault = true;\n        cur.test = null;\n      }\n      this$1.expect(types.colon);\n    } else {\n      if (!cur) { this$1.unexpected(); }\n      cur.consequent.push(this$1.parseStatement(true));\n    }\n  }\n  this.exitLexicalScope();\n  if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n  this.next(); // Closing brace\n  this.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\")\n};\n\npp$1.parseThrowStatement = function(node) {\n  this.next();\n  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n    { this.raise(this.lastTokEnd, \"Illegal newline after throw\"); }\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\")\n};\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty = [];\n\npp$1.parseTryStatement = function(node) {\n  this.next();\n  node.block = this.parseBlock();\n  node.handler = null;\n  if (this.type === types._catch) {\n    var clause = this.startNode();\n    this.next();\n    this.expect(types.parenL);\n    clause.param = this.parseBindingAtom();\n    this.enterLexicalScope();\n    this.checkLVal(clause.param, \"let\");\n    this.expect(types.parenR);\n    clause.body = this.parseBlock(false);\n    this.exitLexicalScope();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n  node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n  if (!node.handler && !node.finalizer)\n    { this.raise(node.start, \"Missing catch or finally clause\"); }\n  return this.finishNode(node, \"TryStatement\")\n};\n\npp$1.parseVarStatement = function(node, kind) {\n  this.next();\n  this.parseVar(node, false, kind);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\")\n};\n\npp$1.parseWhileStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"WhileStatement\")\n};\n\npp$1.parseWithStatement = function(node) {\n  if (this.strict) { this.raise(this.start, \"'with' in strict mode\"); }\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(false);\n  return this.finishNode(node, \"WithStatement\")\n};\n\npp$1.parseEmptyStatement = function(node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\")\n};\n\npp$1.parseLabeledStatement = function(node, maybeName, expr) {\n  var this$1 = this;\n\n  for (var i$1 = 0, list = this$1.labels; i$1 < list.length; i$1 += 1)\n    {\n    var label = list[i$1];\n\n    if (label.name === maybeName)\n      { this$1.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n  } }\n  var kind = this.type.isLoop ? \"loop\" : this.type === types._switch ? \"switch\" : null;\n  for (var i = this.labels.length - 1; i >= 0; i--) {\n    var label$1 = this$1.labels[i];\n    if (label$1.statementStart == node.start) {\n      // Update information about previous labels on this node\n      label$1.statementStart = this$1.start;\n      label$1.kind = kind;\n    } else { break }\n  }\n  this.labels.push({name: maybeName, kind: kind, statementStart: this.start});\n  node.body = this.parseStatement(true);\n  if (node.body.type == \"ClassDeclaration\" ||\n      node.body.type == \"VariableDeclaration\" && node.body.kind != \"var\" ||\n      node.body.type == \"FunctionDeclaration\" && (this.strict || node.body.generator))\n    { this.raiseRecoverable(node.body.start, \"Invalid labeled declaration\"); }\n  this.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\")\n};\n\npp$1.parseExpressionStatement = function(node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\")\n};\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp$1.parseBlock = function(createNewLexicalScope) {\n  var this$1 = this;\n  if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;\n\n  var node = this.startNode();\n  node.body = [];\n  this.expect(types.braceL);\n  if (createNewLexicalScope) {\n    this.enterLexicalScope();\n  }\n  while (!this.eat(types.braceR)) {\n    var stmt = this$1.parseStatement(true);\n    node.body.push(stmt);\n  }\n  if (createNewLexicalScope) {\n    this.exitLexicalScope();\n  }\n  return this.finishNode(node, \"BlockStatement\")\n};\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp$1.parseFor = function(node, init) {\n  node.init = init;\n  this.expect(types.semi);\n  node.test = this.type === types.semi ? null : this.parseExpression();\n  this.expect(types.semi);\n  node.update = this.type === types.parenR ? null : this.parseExpression();\n  this.expect(types.parenR);\n  this.exitLexicalScope();\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"ForStatement\")\n};\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp$1.parseForIn = function(node, init) {\n  var type = this.type === types._in ? \"ForInStatement\" : \"ForOfStatement\";\n  this.next();\n  if (type == \"ForInStatement\") {\n    if (init.type === \"AssignmentPattern\" ||\n      (init.type === \"VariableDeclaration\" && init.declarations[0].init != null &&\n       (this.strict || init.declarations[0].id.type !== \"Identifier\")))\n      { this.raise(init.start, \"Invalid assignment in for-in loop head\"); }\n  }\n  node.left = init;\n  node.right = type == \"ForInStatement\" ? this.parseExpression() : this.parseMaybeAssign();\n  this.expect(types.parenR);\n  this.exitLexicalScope();\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, type)\n};\n\n// Parse a list of variable declarations.\n\npp$1.parseVar = function(node, isFor, kind) {\n  var this$1 = this;\n\n  node.declarations = [];\n  node.kind = kind;\n  for (;;) {\n    var decl = this$1.startNode();\n    this$1.parseVarId(decl, kind);\n    if (this$1.eat(types.eq)) {\n      decl.init = this$1.parseMaybeAssign(isFor);\n    } else if (kind === \"const\" && !(this$1.type === types._in || (this$1.options.ecmaVersion >= 6 && this$1.isContextual(\"of\")))) {\n      this$1.unexpected();\n    } else if (decl.id.type != \"Identifier\" && !(isFor && (this$1.type === types._in || this$1.isContextual(\"of\")))) {\n      this$1.raise(this$1.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n    node.declarations.push(this$1.finishNode(decl, \"VariableDeclarator\"));\n    if (!this$1.eat(types.comma)) { break }\n  }\n  return node\n};\n\npp$1.parseVarId = function(decl, kind) {\n  decl.id = this.parseBindingAtom(kind);\n  this.checkLVal(decl.id, kind, false);\n};\n\n// Parse a function declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$1.parseFunction = function(node, isStatement, allowExpressionBody, isAsync) {\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync)\n    { node.generator = this.eat(types.star); }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  if (isStatement) {\n    node.id = isStatement === \"nullableID\" && this.type != types.name ? null : this.parseIdent();\n    if (node.id) {\n      this.checkLVal(node.id, \"var\");\n    }\n  }\n\n  var oldInGen = this.inGenerator, oldInAsync = this.inAsync,\n      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction;\n  this.inGenerator = node.generator;\n  this.inAsync = node.async;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.inFunction = true;\n  this.enterFunctionScope();\n\n  if (!isStatement)\n    { node.id = this.type == types.name ? this.parseIdent() : null; }\n\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody);\n\n  this.inGenerator = oldInGen;\n  this.inAsync = oldInAsync;\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.inFunction = oldInFunc;\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n};\n\npp$1.parseFunctionParams = function(node) {\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n};\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$1.parseClass = function(node, isStatement) {\n  var this$1 = this;\n\n  this.next();\n\n  this.parseClassId(node, isStatement);\n  this.parseClassSuper(node);\n  var classBody = this.startNode();\n  var hadConstructor = false;\n  classBody.body = [];\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    var member = this$1.parseClassMember(classBody);\n    if (member && member.type === \"MethodDefinition\" && member.kind === \"constructor\") {\n      if (hadConstructor) { this$1.raise(member.start, \"Duplicate constructor in the same class\"); }\n      hadConstructor = true;\n    }\n  }\n  node.body = this.finishNode(classBody, \"ClassBody\");\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n};\n\npp$1.parseClassMember = function(classBody) {\n  var this$1 = this;\n\n  if (this.eat(types.semi)) { return null }\n\n  var method = this.startNode();\n  var tryContextual = function (k, noLineBreak) {\n    if ( noLineBreak === void 0 ) noLineBreak = false;\n\n    var start = this$1.start, startLoc = this$1.startLoc;\n    if (!this$1.eatContextual(k)) { return false }\n    if (this$1.type !== types.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) { return true }\n    if (method.key) { this$1.unexpected(); }\n    method.computed = false;\n    method.key = this$1.startNodeAt(start, startLoc);\n    method.key.name = k;\n    this$1.finishNode(method.key, \"Identifier\");\n    return false\n  };\n\n  method.kind = \"method\";\n  method.static = tryContextual(\"static\");\n  var isGenerator = this.eat(types.star);\n  var isAsync = false;\n  if (!isGenerator) {\n    if (this.options.ecmaVersion >= 8 && tryContextual(\"async\", true)) {\n      isAsync = true;\n      isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n    } else if (tryContextual(\"get\")) {\n      method.kind = \"get\";\n    } else if (tryContextual(\"set\")) {\n      method.kind = \"set\";\n    }\n  }\n  if (!method.key) { this.parsePropertyName(method); }\n  var key = method.key;\n  if (!method.computed && !method.static && (key.type === \"Identifier\" && key.name === \"constructor\" ||\n      key.type === \"Literal\" && key.value === \"constructor\")) {\n    if (method.kind !== \"method\") { this.raise(key.start, \"Constructor can't have get/set modifier\"); }\n    if (isGenerator) { this.raise(key.start, \"Constructor can't be a generator\"); }\n    if (isAsync) { this.raise(key.start, \"Constructor can't be an async method\"); }\n    method.kind = \"constructor\";\n  } else if (method.static && key.type === \"Identifier\" && key.name === \"prototype\") {\n    this.raise(key.start, \"Classes may not have a static property named prototype\");\n  }\n  this.parseClassMethod(classBody, method, isGenerator, isAsync);\n  if (method.kind === \"get\" && method.value.params.length !== 0)\n    { this.raiseRecoverable(method.value.start, \"getter should have no params\"); }\n  if (method.kind === \"set\" && method.value.params.length !== 1)\n    { this.raiseRecoverable(method.value.start, \"setter should have exactly one param\"); }\n  if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\")\n    { this.raiseRecoverable(method.value.params[0].start, \"Setter cannot use rest params\"); }\n  return method\n};\n\npp$1.parseClassMethod = function(classBody, method, isGenerator, isAsync) {\n  method.value = this.parseMethod(isGenerator, isAsync);\n  classBody.body.push(this.finishNode(method, \"MethodDefinition\"));\n};\n\npp$1.parseClassId = function(node, isStatement) {\n  node.id = this.type === types.name ? this.parseIdent() : isStatement === true ? this.unexpected() : null;\n};\n\npp$1.parseClassSuper = function(node) {\n  node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n};\n\n// Parses module export declaration.\n\npp$1.parseExport = function(node, exports) {\n  var this$1 = this;\n\n  this.next();\n  // export * from '...'\n  if (this.eat(types.star)) {\n    this.expectContextual(\"from\");\n    if (this.type !== types.string) { this.unexpected(); }\n    node.source = this.parseExprAtom();\n    this.semicolon();\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  }\n  if (this.eat(types._default)) { // export default ...\n    this.checkExport(exports, \"default\", this.lastTokStart);\n    var isAsync;\n    if (this.type === types._function || (isAsync = this.isAsyncFunction())) {\n      var fNode = this.startNode();\n      this.next();\n      if (isAsync) { this.next(); }\n      node.declaration = this.parseFunction(fNode, \"nullableID\", false, isAsync);\n    } else if (this.type === types._class) {\n      var cNode = this.startNode();\n      node.declaration = this.parseClass(cNode, \"nullableID\");\n    } else {\n      node.declaration = this.parseMaybeAssign();\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ExportDefaultDeclaration\")\n  }\n  // export var|const|let|function|class ...\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseStatement(true);\n    if (node.declaration.type === \"VariableDeclaration\")\n      { this.checkVariableExport(exports, node.declaration.declarations); }\n    else\n      { this.checkExport(exports, node.declaration.id.name, node.declaration.id.start); }\n    node.specifiers = [];\n    node.source = null;\n  } else { // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers(exports);\n    if (this.eatContextual(\"from\")) {\n      if (this.type !== types.string) { this.unexpected(); }\n      node.source = this.parseExprAtom();\n    } else {\n      // check for keywords used as local names\n      for (var i = 0, list = node.specifiers; i < list.length; i += 1) {\n        var spec = list[i];\n\n        this$1.checkUnreserved(spec.local);\n      }\n\n      node.source = null;\n    }\n    this.semicolon();\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\")\n};\n\npp$1.checkExport = function(exports, name, pos) {\n  if (!exports) { return }\n  if (has(exports, name))\n    { this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\"); }\n  exports[name] = true;\n};\n\npp$1.checkPatternExport = function(exports, pat) {\n  var this$1 = this;\n\n  var type = pat.type;\n  if (type == \"Identifier\")\n    { this.checkExport(exports, pat.name, pat.start); }\n  else if (type == \"ObjectPattern\")\n    { for (var i = 0, list = pat.properties; i < list.length; i += 1)\n      {\n        var prop = list[i];\n\n        this$1.checkPatternExport(exports, prop);\n      } }\n  else if (type == \"ArrayPattern\")\n    { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {\n      var elt = list$1[i$1];\n\n        if (elt) { this$1.checkPatternExport(exports, elt); }\n    } }\n  else if (type == \"Property\")\n    { this.checkPatternExport(exports, pat.value); }\n  else if (type == \"AssignmentPattern\")\n    { this.checkPatternExport(exports, pat.left); }\n  else if (type == \"RestElement\")\n    { this.checkPatternExport(exports, pat.argument); }\n  else if (type == \"ParenthesizedExpression\")\n    { this.checkPatternExport(exports, pat.expression); }\n};\n\npp$1.checkVariableExport = function(exports, decls) {\n  var this$1 = this;\n\n  if (!exports) { return }\n  for (var i = 0, list = decls; i < list.length; i += 1)\n    {\n    var decl = list[i];\n\n    this$1.checkPatternExport(exports, decl.id);\n  }\n};\n\npp$1.shouldParseExportStatement = function() {\n  return this.type.keyword === \"var\" ||\n    this.type.keyword === \"const\" ||\n    this.type.keyword === \"class\" ||\n    this.type.keyword === \"function\" ||\n    this.isLet() ||\n    this.isAsyncFunction()\n};\n\n// Parses a comma-separated list of module exports.\n\npp$1.parseExportSpecifiers = function(exports) {\n  var this$1 = this;\n\n  var nodes = [], first = true;\n  // export { x, y as z } [from '...']\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (this$1.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var node = this$1.startNode();\n    node.local = this$1.parseIdent(true);\n    node.exported = this$1.eatContextual(\"as\") ? this$1.parseIdent(true) : node.local;\n    this$1.checkExport(exports, node.exported.name, node.exported.start);\n    nodes.push(this$1.finishNode(node, \"ExportSpecifier\"));\n  }\n  return nodes\n};\n\n// Parses import declaration.\n\npp$1.parseImport = function(node) {\n  this.next();\n  // import '...'\n  if (this.type === types.string) {\n    node.specifiers = empty;\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = this.parseImportSpecifiers();\n    this.expectContextual(\"from\");\n    node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();\n  }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\")\n};\n\n// Parses a comma-separated list of module imports.\n\npp$1.parseImportSpecifiers = function() {\n  var this$1 = this;\n\n  var nodes = [], first = true;\n  if (this.type === types.name) {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode();\n    node.local = this.parseIdent();\n    this.checkLVal(node.local, \"let\");\n    nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n    if (!this.eat(types.comma)) { return nodes }\n  }\n  if (this.type === types.star) {\n    var node$1 = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    node$1.local = this.parseIdent();\n    this.checkLVal(node$1.local, \"let\");\n    nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"));\n    return nodes\n  }\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (this$1.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var node$2 = this$1.startNode();\n    node$2.imported = this$1.parseIdent(true);\n    if (this$1.eatContextual(\"as\")) {\n      node$2.local = this$1.parseIdent();\n    } else {\n      this$1.checkUnreserved(node$2.imported);\n      node$2.local = node$2.imported;\n    }\n    this$1.checkLVal(node$2.local, \"let\");\n    nodes.push(this$1.finishNode(node$2, \"ImportSpecifier\"));\n  }\n  return nodes\n};\n\n// Set `ExpressionStatement#directive` property for directive prologues.\npp$1.adaptDirectivePrologue = function(statements) {\n  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {\n    statements[i].directive = statements[i].expression.raw.slice(1, -1);\n  }\n};\npp$1.isDirectiveCandidate = function(statement) {\n  return (\n    statement.type === \"ExpressionStatement\" &&\n    statement.expression.type === \"Literal\" &&\n    typeof statement.expression.value === \"string\" &&\n    // Reject parenthesized strings.\n    (this.input[statement.start] === \"\\\"\" || this.input[statement.start] === \"'\")\n  )\n};\n\nvar pp$2 = Parser.prototype;\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp$2.toAssignable = function(node, isBinding, refDestructuringErrors) {\n  var this$1 = this;\n\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n    case \"Identifier\":\n      if (this.inAsync && node.name === \"await\")\n        { this.raise(node.start, \"Can not use 'await' as identifier inside an async function\"); }\n      break\n\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n    case \"RestElement\":\n      break\n\n    case \"ObjectExpression\":\n      node.type = \"ObjectPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      for (var i = 0, list = node.properties; i < list.length; i += 1) {\n        var prop = list[i];\n\n      this$1.toAssignable(prop, isBinding);\n        // Early error:\n        //   AssignmentRestProperty[Yield, Await] :\n        //     `...` DestructuringAssignmentTarget[Yield, Await]\n        //\n        //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\n        if (\n          prop.type === \"RestElement\" &&\n          (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")\n        ) {\n          this$1.raise(prop.argument.start, \"Unexpected token\");\n        }\n      }\n      break\n\n    case \"Property\":\n      // AssignmentProperty has type == \"Property\"\n      if (node.kind !== \"init\") { this.raise(node.key.start, \"Object pattern can't contain getter or setter\"); }\n      this.toAssignable(node.value, isBinding);\n      break\n\n    case \"ArrayExpression\":\n      node.type = \"ArrayPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      this.toAssignableList(node.elements, isBinding);\n      break\n\n    case \"SpreadElement\":\n      node.type = \"RestElement\";\n      this.toAssignable(node.argument, isBinding);\n      if (node.argument.type === \"AssignmentPattern\")\n        { this.raise(node.argument.start, \"Rest elements cannot have a default value\"); }\n      break\n\n    case \"AssignmentExpression\":\n      if (node.operator !== \"=\") { this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\"); }\n      node.type = \"AssignmentPattern\";\n      delete node.operator;\n      this.toAssignable(node.left, isBinding);\n      // falls through to AssignmentPattern\n\n    case \"AssignmentPattern\":\n      break\n\n    case \"ParenthesizedExpression\":\n      this.toAssignable(node.expression, isBinding);\n      break\n\n    case \"MemberExpression\":\n      if (!isBinding) { break }\n\n    default:\n      this.raise(node.start, \"Assigning to rvalue\");\n    }\n  } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n  return node\n};\n\n// Convert list of expression atoms to binding list.\n\npp$2.toAssignableList = function(exprList, isBinding) {\n  var this$1 = this;\n\n  var end = exprList.length;\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n    if (elt) { this$1.toAssignable(elt, isBinding); }\n  }\n  if (end) {\n    var last = exprList[end - 1];\n    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n      { this.unexpected(last.argument.start); }\n  }\n  return exprList\n};\n\n// Parses spread element.\n\npp$2.parseSpread = function(refDestructuringErrors) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n  return this.finishNode(node, \"SpreadElement\")\n};\n\npp$2.parseRestBinding = function() {\n  var node = this.startNode();\n  this.next();\n\n  // RestElement inside of a function parameter must be an identifier\n  if (this.options.ecmaVersion === 6 && this.type !== types.name)\n    { this.unexpected(); }\n\n  node.argument = this.parseBindingAtom();\n\n  return this.finishNode(node, \"RestElement\")\n};\n\n// Parses lvalue (assignable) atom.\n\npp$2.parseBindingAtom = function() {\n  if (this.options.ecmaVersion >= 6) {\n    switch (this.type) {\n    case types.bracketL:\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseBindingList(types.bracketR, true, true);\n      return this.finishNode(node, \"ArrayPattern\")\n\n    case types.braceL:\n      return this.parseObj(true)\n    }\n  }\n  return this.parseIdent()\n};\n\npp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma) {\n  var this$1 = this;\n\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (first) { first = false; }\n    else { this$1.expect(types.comma); }\n    if (allowEmpty && this$1.type === types.comma) {\n      elts.push(null);\n    } else if (allowTrailingComma && this$1.afterTrailingComma(close)) {\n      break\n    } else if (this$1.type === types.ellipsis) {\n      var rest = this$1.parseRestBinding();\n      this$1.parseBindingListItem(rest);\n      elts.push(rest);\n      if (this$1.type === types.comma) { this$1.raise(this$1.start, \"Comma is not permitted after the rest element\"); }\n      this$1.expect(close);\n      break\n    } else {\n      var elem = this$1.parseMaybeDefault(this$1.start, this$1.startLoc);\n      this$1.parseBindingListItem(elem);\n      elts.push(elem);\n    }\n  }\n  return elts\n};\n\npp$2.parseBindingListItem = function(param) {\n  return param\n};\n\n// Parses assignment pattern around given atom if possible.\n\npp$2.parseMaybeDefault = function(startPos, startLoc, left) {\n  left = left || this.parseBindingAtom();\n  if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) { return left }\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\")\n};\n\n// Verify that a node is an lval — something that can be assigned\n// to.\n// bindingType can be either:\n// 'var' indicating that the lval creates a 'var' binding\n// 'let' indicating that the lval creates a lexical ('let' or 'const') binding\n// 'none' indicating that the binding should be checked for illegal identifiers, but not for duplicate references\n\npp$2.checkLVal = function(expr, bindingType, checkClashes) {\n  var this$1 = this;\n\n  switch (expr.type) {\n  case \"Identifier\":\n    if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n      { this.raiseRecoverable(expr.start, (bindingType ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\"); }\n    if (checkClashes) {\n      if (has(checkClashes, expr.name))\n        { this.raiseRecoverable(expr.start, \"Argument name clash\"); }\n      checkClashes[expr.name] = true;\n    }\n    if (bindingType && bindingType !== \"none\") {\n      if (\n        bindingType === \"var\" && !this.canDeclareVarName(expr.name) ||\n        bindingType !== \"var\" && !this.canDeclareLexicalName(expr.name)\n      ) {\n        this.raiseRecoverable(expr.start, (\"Identifier '\" + (expr.name) + \"' has already been declared\"));\n      }\n      if (bindingType === \"var\") {\n        this.declareVarName(expr.name);\n      } else {\n        this.declareLexicalName(expr.name);\n      }\n    }\n    break\n\n  case \"MemberExpression\":\n    if (bindingType) { this.raiseRecoverable(expr.start, \"Binding member expression\"); }\n    break\n\n  case \"ObjectPattern\":\n    for (var i = 0, list = expr.properties; i < list.length; i += 1)\n      {\n    var prop = list[i];\n\n    this$1.checkLVal(prop, bindingType, checkClashes);\n  }\n    break\n\n  case \"Property\":\n    // AssignmentProperty has type == \"Property\"\n    this.checkLVal(expr.value, bindingType, checkClashes);\n    break\n\n  case \"ArrayPattern\":\n    for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {\n      var elem = list$1[i$1];\n\n    if (elem) { this$1.checkLVal(elem, bindingType, checkClashes); }\n    }\n    break\n\n  case \"AssignmentPattern\":\n    this.checkLVal(expr.left, bindingType, checkClashes);\n    break\n\n  case \"RestElement\":\n    this.checkLVal(expr.argument, bindingType, checkClashes);\n    break\n\n  case \"ParenthesizedExpression\":\n    this.checkLVal(expr.expression, bindingType, checkClashes);\n    break\n\n  default:\n    this.raise(expr.start, (bindingType ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n  }\n};\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nvar pp$3 = Parser.prototype;\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp$3.checkPropClash = function(prop, propHash, refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\")\n    { return }\n  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n    { return }\n  var key = prop.key;\n  var name;\n  switch (key.type) {\n  case \"Identifier\": name = key.name; break\n  case \"Literal\": name = String(key.value); break\n  default: return\n  }\n  var kind = prop.kind;\n  if (this.options.ecmaVersion >= 6) {\n    if (name === \"__proto__\" && kind === \"init\") {\n      if (propHash.proto) {\n        if (refDestructuringErrors && refDestructuringErrors.doubleProto < 0) { refDestructuringErrors.doubleProto = key.start; }\n        // Backwards-compat kludge. Can be removed in version 6.0\n        else { this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\"); }\n      }\n      propHash.proto = true;\n    }\n    return\n  }\n  name = \"$\" + name;\n  var other = propHash[name];\n  if (other) {\n    var redefinition;\n    if (kind === \"init\") {\n      redefinition = this.strict && other.init || other.get || other.set;\n    } else {\n      redefinition = other.init || other[kind];\n    }\n    if (redefinition)\n      { this.raiseRecoverable(key.start, \"Redefinition of property\"); }\n  } else {\n    other = propHash[name] = {\n      init: false,\n      get: false,\n      set: false\n    };\n  }\n  other[kind] = true;\n};\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp$3.parseExpression = function(noIn, refDestructuringErrors) {\n  var this$1 = this;\n\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);\n  if (this.type === types.comma) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n    while (this.eat(types.comma)) { node.expressions.push(this$1.parseMaybeAssign(noIn, refDestructuringErrors)); }\n    return this.finishNode(node, \"SequenceExpression\")\n  }\n  return expr\n};\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {\n  if (this.inGenerator && this.isContextual(\"yield\")) { return this.parseYield() }\n\n  var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1;\n  if (refDestructuringErrors) {\n    oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n    oldTrailingComma = refDestructuringErrors.trailingComma;\n    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;\n  } else {\n    refDestructuringErrors = new DestructuringErrors;\n    ownDestructuringErrors = true;\n  }\n\n  var startPos = this.start, startLoc = this.startLoc;\n  if (this.type == types.parenL || this.type == types.name)\n    { this.potentialArrowAt = this.start; }\n  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);\n  if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }\n  if (this.type.isAssign) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    node.left = this.type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;\n    if (!ownDestructuringErrors) { DestructuringErrors.call(refDestructuringErrors); }\n    refDestructuringErrors.shorthandAssign = -1; // reset because shorthand default was used correctly\n    this.checkLVal(left);\n    this.next();\n    node.right = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"AssignmentExpression\")\n  } else {\n    if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }\n  }\n  if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }\n  if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }\n  return left\n};\n\n// Parse a ternary conditional (`?:`) operator.\n\npp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprOps(noIn, refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  if (this.eat(types.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(types.colon);\n    node.alternate = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"ConditionalExpression\")\n  }\n  return expr\n};\n\n// Start the precedence parser.\n\npp$3.parseExprOps = function(noIn, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeUnary(refDestructuringErrors, false);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  return expr.start == startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn)\n};\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n  var prec = this.type.binop;\n  if (prec != null && (!noIn || this.type !== types._in)) {\n    if (prec > minPrec) {\n      var logical = this.type === types.logicalOR || this.type === types.logicalAND;\n      var op = this.value;\n      this.next();\n      var startPos = this.start, startLoc = this.startLoc;\n      var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);\n      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)\n    }\n  }\n  return left\n};\n\npp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.operator = op;\n  node.right = right;\n  return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n};\n\n// Parse unary operators, both prefix and postfix.\n\npp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {\n  var this$1 = this;\n\n  var startPos = this.start, startLoc = this.startLoc, expr;\n  if (this.inAsync && this.isContextual(\"await\")) {\n    expr = this.parseAwait();\n    sawUnary = true;\n  } else if (this.type.prefix) {\n    var node = this.startNode(), update = this.type === types.incDec;\n    node.operator = this.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary(null, true);\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    if (update) { this.checkLVal(node.argument); }\n    else if (this.strict && node.operator === \"delete\" &&\n             node.argument.type === \"Identifier\")\n      { this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\"); }\n    else { sawUnary = true; }\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  } else {\n    expr = this.parseExprSubscripts(refDestructuringErrors);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    while (this.type.postfix && !this.canInsertSemicolon()) {\n      var node$1 = this$1.startNodeAt(startPos, startLoc);\n      node$1.operator = this$1.value;\n      node$1.prefix = false;\n      node$1.argument = expr;\n      this$1.checkLVal(expr);\n      this$1.next();\n      expr = this$1.finishNode(node$1, \"UpdateExpression\");\n    }\n  }\n\n  if (!sawUnary && this.eat(types.starstar))\n    { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false) }\n  else\n    { return expr }\n};\n\n// Parse call, dot, and `[]`-subscript expressions.\n\npp$3.parseExprSubscripts = function(refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprAtom(refDestructuringErrors);\n  var skipArrowSubscripts = expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\";\n  if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) { return expr }\n  var result = this.parseSubscripts(expr, startPos, startLoc);\n  if (refDestructuringErrors && result.type === \"MemberExpression\") {\n    if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }\n    if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }\n  }\n  return result\n};\n\npp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {\n  var this$1 = this;\n\n  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" &&\n      this.lastTokEnd == base.end && !this.canInsertSemicolon() && this.input.slice(base.start, base.end) === \"async\";\n  for (var computed = (void 0);;) {\n    if ((computed = this$1.eat(types.bracketL)) || this$1.eat(types.dot)) {\n      var node = this$1.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = computed ? this$1.parseExpression() : this$1.parseIdent(true);\n      node.computed = !!computed;\n      if (computed) { this$1.expect(types.bracketR); }\n      base = this$1.finishNode(node, \"MemberExpression\");\n    } else if (!noCalls && this$1.eat(types.parenL)) {\n      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this$1.yieldPos, oldAwaitPos = this$1.awaitPos;\n      this$1.yieldPos = 0;\n      this$1.awaitPos = 0;\n      var exprList = this$1.parseExprList(types.parenR, this$1.options.ecmaVersion >= 8, false, refDestructuringErrors);\n      if (maybeAsyncArrow && !this$1.canInsertSemicolon() && this$1.eat(types.arrow)) {\n        this$1.checkPatternErrors(refDestructuringErrors, false);\n        this$1.checkYieldAwaitInDefaultParams();\n        this$1.yieldPos = oldYieldPos;\n        this$1.awaitPos = oldAwaitPos;\n        return this$1.parseArrowExpression(this$1.startNodeAt(startPos, startLoc), exprList, true)\n      }\n      this$1.checkExpressionErrors(refDestructuringErrors, true);\n      this$1.yieldPos = oldYieldPos || this$1.yieldPos;\n      this$1.awaitPos = oldAwaitPos || this$1.awaitPos;\n      var node$1 = this$1.startNodeAt(startPos, startLoc);\n      node$1.callee = base;\n      node$1.arguments = exprList;\n      base = this$1.finishNode(node$1, \"CallExpression\");\n    } else if (this$1.type === types.backQuote) {\n      var node$2 = this$1.startNodeAt(startPos, startLoc);\n      node$2.tag = base;\n      node$2.quasi = this$1.parseTemplate({isTagged: true});\n      base = this$1.finishNode(node$2, \"TaggedTemplateExpression\");\n    } else {\n      return base\n    }\n  }\n};\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\npp$3.parseExprAtom = function(refDestructuringErrors) {\n  var node, canBeArrow = this.potentialArrowAt == this.start;\n  switch (this.type) {\n  case types._super:\n    if (!this.inFunction)\n      { this.raise(this.start, \"'super' outside of function or class\"); }\n    node = this.startNode();\n    this.next();\n    // The `super` keyword can appear at below:\n    // SuperProperty:\n    //     super [ Expression ]\n    //     super . IdentifierName\n    // SuperCall:\n    //     super Arguments\n    if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL)\n      { this.unexpected(); }\n    return this.finishNode(node, \"Super\")\n\n  case types._this:\n    node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"ThisExpression\")\n\n  case types.name:\n    var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;\n    var id = this.parseIdent(this.type !== types.name);\n    if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types._function))\n      { return this.parseFunction(this.startNodeAt(startPos, startLoc), false, false, true) }\n    if (canBeArrow && !this.canInsertSemicolon()) {\n      if (this.eat(types.arrow))\n        { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false) }\n      if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types.name && !containsEsc) {\n        id = this.parseIdent();\n        if (this.canInsertSemicolon() || !this.eat(types.arrow))\n          { this.unexpected(); }\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true)\n      }\n    }\n    return id\n\n  case types.regexp:\n    var value = this.value;\n    node = this.parseLiteral(value.value);\n    node.regex = {pattern: value.pattern, flags: value.flags};\n    return node\n\n  case types.num: case types.string:\n    return this.parseLiteral(this.value)\n\n  case types._null: case types._true: case types._false:\n    node = this.startNode();\n    node.value = this.type === types._null ? null : this.type === types._true;\n    node.raw = this.type.keyword;\n    this.next();\n    return this.finishNode(node, \"Literal\")\n\n  case types.parenL:\n    var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow);\n    if (refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))\n        { refDestructuringErrors.parenthesizedAssign = start; }\n      if (refDestructuringErrors.parenthesizedBind < 0)\n        { refDestructuringErrors.parenthesizedBind = start; }\n    }\n    return expr\n\n  case types.bracketL:\n    node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);\n    return this.finishNode(node, \"ArrayExpression\")\n\n  case types.braceL:\n    return this.parseObj(false, refDestructuringErrors)\n\n  case types._function:\n    node = this.startNode();\n    this.next();\n    return this.parseFunction(node, false)\n\n  case types._class:\n    return this.parseClass(this.startNode(), false)\n\n  case types._new:\n    return this.parseNew()\n\n  case types.backQuote:\n    return this.parseTemplate()\n\n  default:\n    this.unexpected();\n  }\n};\n\npp$3.parseLiteral = function(value) {\n  var node = this.startNode();\n  node.value = value;\n  node.raw = this.input.slice(this.start, this.end);\n  this.next();\n  return this.finishNode(node, \"Literal\")\n};\n\npp$3.parseParenExpression = function() {\n  this.expect(types.parenL);\n  var val = this.parseExpression();\n  this.expect(types.parenR);\n  return val\n};\n\npp$3.parseParenAndDistinguishExpression = function(canBeArrow) {\n  var this$1 = this;\n\n  var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;\n  if (this.options.ecmaVersion >= 6) {\n    this.next();\n\n    var innerStartPos = this.start, innerStartLoc = this.startLoc;\n    var exprList = [], first = true, lastIsComma = false;\n    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    while (this.type !== types.parenR) {\n      first ? first = false : this$1.expect(types.comma);\n      if (allowTrailingComma && this$1.afterTrailingComma(types.parenR, true)) {\n        lastIsComma = true;\n        break\n      } else if (this$1.type === types.ellipsis) {\n        spreadStart = this$1.start;\n        exprList.push(this$1.parseParenItem(this$1.parseRestBinding()));\n        if (this$1.type === types.comma) { this$1.raise(this$1.start, \"Comma is not permitted after the rest element\"); }\n        break\n      } else {\n        exprList.push(this$1.parseMaybeAssign(false, refDestructuringErrors, this$1.parseParenItem));\n      }\n    }\n    var innerEndPos = this.start, innerEndLoc = this.startLoc;\n    this.expect(types.parenR);\n\n    if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, false);\n      this.checkYieldAwaitInDefaultParams();\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      return this.parseParenArrowList(startPos, startLoc, exprList)\n    }\n\n    if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }\n    if (spreadStart) { this.unexpected(spreadStart); }\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n  } else {\n    val = this.parseParenExpression();\n  }\n\n  if (this.options.preserveParens) {\n    var par = this.startNodeAt(startPos, startLoc);\n    par.expression = val;\n    return this.finishNode(par, \"ParenthesizedExpression\")\n  } else {\n    return val\n  }\n};\n\npp$3.parseParenItem = function(item) {\n  return item\n};\n\npp$3.parseParenArrowList = function(startPos, startLoc, exprList) {\n  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)\n};\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\n\nvar empty$1 = [];\n\npp$3.parseNew = function() {\n  var node = this.startNode();\n  var meta = this.parseIdent(true);\n  if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {\n    node.meta = meta;\n    var containsEsc = this.containsEsc;\n    node.property = this.parseIdent(true);\n    if (node.property.name !== \"target\" || containsEsc)\n      { this.raiseRecoverable(node.property.start, \"The only valid meta property for new is new.target\"); }\n    if (!this.inFunction)\n      { this.raiseRecoverable(node.start, \"new.target can only be used in functions\"); }\n    return this.finishNode(node, \"MetaProperty\")\n  }\n  var startPos = this.start, startLoc = this.startLoc;\n  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  if (this.eat(types.parenL)) { node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false); }\n  else { node.arguments = empty$1; }\n  return this.finishNode(node, \"NewExpression\")\n};\n\n// Parse template expression.\n\npp$3.parseTemplateElement = function(ref) {\n  var isTagged = ref.isTagged;\n\n  var elem = this.startNode();\n  if (this.type === types.invalidTemplate) {\n    if (!isTagged) {\n      this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\n    }\n    elem.value = {\n      raw: this.value,\n      cooked: null\n    };\n  } else {\n    elem.value = {\n      raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.value\n    };\n  }\n  this.next();\n  elem.tail = this.type === types.backQuote;\n  return this.finishNode(elem, \"TemplateElement\")\n};\n\npp$3.parseTemplate = function(ref) {\n  var this$1 = this;\n  if ( ref === void 0 ) ref = {};\n  var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;\n\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement({isTagged: isTagged});\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    this$1.expect(types.dollarBraceL);\n    node.expressions.push(this$1.parseExpression());\n    this$1.expect(types.braceR);\n    node.quasis.push(curElt = this$1.parseTemplateElement({isTagged: isTagged}));\n  }\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\")\n};\n\npp$3.isAsyncProp = function(prop) {\n  return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" &&\n    (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types.star)) &&\n    !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\n// Parse an object literal or binding pattern.\n\npp$3.parseObj = function(isPattern, refDestructuringErrors) {\n  var this$1 = this;\n\n  var node = this.startNode(), first = true, propHash = {};\n  node.properties = [];\n  this.next();\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (this$1.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var prop = this$1.parseProperty(isPattern, refDestructuringErrors);\n    if (!isPattern) { this$1.checkPropClash(prop, propHash, refDestructuringErrors); }\n    node.properties.push(prop);\n  }\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n};\n\npp$3.parseProperty = function(isPattern, refDestructuringErrors) {\n  var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;\n  if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {\n    if (isPattern) {\n      prop.argument = this.parseIdent(false);\n      if (this.type === types.comma) {\n        this.raise(this.start, \"Comma is not permitted after the rest element\");\n      }\n      return this.finishNode(prop, \"RestElement\")\n    }\n    // To disallow parenthesized identifier via `this.toAssignable()`.\n    if (this.type === types.parenL && refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0) {\n        refDestructuringErrors.parenthesizedAssign = this.start;\n      }\n      if (refDestructuringErrors.parenthesizedBind < 0) {\n        refDestructuringErrors.parenthesizedBind = this.start;\n      }\n    }\n    // Parse argument.\n    prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n    // To disallow trailing comma via `this.toAssignable()`.\n    if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {\n      refDestructuringErrors.trailingComma = this.start;\n    }\n    // Finish\n    return this.finishNode(prop, \"SpreadElement\")\n  }\n  if (this.options.ecmaVersion >= 6) {\n    prop.method = false;\n    prop.shorthand = false;\n    if (isPattern || refDestructuringErrors) {\n      startPos = this.start;\n      startLoc = this.startLoc;\n    }\n    if (!isPattern)\n      { isGenerator = this.eat(types.star); }\n  }\n  var containsEsc = this.containsEsc;\n  this.parsePropertyName(prop);\n  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n    isAsync = true;\n    isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n    this.parsePropertyName(prop, refDestructuringErrors);\n  } else {\n    isAsync = false;\n  }\n  this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\n  return this.finishNode(prop, \"Property\")\n};\n\npp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\n  if ((isGenerator || isAsync) && this.type === types.colon)\n    { this.unexpected(); }\n\n  if (this.eat(types.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n    prop.kind = \"init\";\n  } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {\n    if (isPattern) { this.unexpected(); }\n    prop.kind = \"init\";\n    prop.method = true;\n    prop.value = this.parseMethod(isGenerator, isAsync);\n  } else if (!isPattern && !containsEsc &&\n             this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n             (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n             (this.type != types.comma && this.type != types.braceR)) {\n    if (isGenerator || isAsync) { this.unexpected(); }\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    prop.value = this.parseMethod(false);\n    var paramCount = prop.kind === \"get\" ? 0 : 1;\n    if (prop.value.params.length !== paramCount) {\n      var start = prop.value.start;\n      if (prop.kind === \"get\")\n        { this.raiseRecoverable(start, \"getter should have no params\"); }\n      else\n        { this.raiseRecoverable(start, \"setter should have exactly one param\"); }\n    } else {\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n        { this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\"); }\n    }\n  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n    this.checkUnreserved(prop.key);\n    prop.kind = \"init\";\n    if (isPattern) {\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else if (this.type === types.eq && refDestructuringErrors) {\n      if (refDestructuringErrors.shorthandAssign < 0)\n        { refDestructuringErrors.shorthandAssign = this.start; }\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else {\n      prop.value = prop.key;\n    }\n    prop.shorthand = true;\n  } else { this.unexpected(); }\n};\n\npp$3.parsePropertyName = function(prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(types.bracketR);\n      return prop.key\n    } else {\n      prop.computed = false;\n    }\n  }\n  return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(true)\n};\n\n// Initialize empty function node.\n\npp$3.initFunction = function(node) {\n  node.id = null;\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = false;\n    node.expression = false;\n  }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = false; }\n};\n\n// Parse object or class method.\n\npp$3.parseMethod = function(isGenerator, isAsync) {\n  var node = this.startNode(), oldInGen = this.inGenerator, oldInAsync = this.inAsync,\n      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction;\n\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6)\n    { node.generator = isGenerator; }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  this.inGenerator = node.generator;\n  this.inAsync = node.async;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.inFunction = true;\n  this.enterFunctionScope();\n\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n  this.parseFunctionBody(node, false);\n\n  this.inGenerator = oldInGen;\n  this.inAsync = oldInAsync;\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.inFunction = oldInFunc;\n  return this.finishNode(node, \"FunctionExpression\")\n};\n\n// Parse arrow function expression with given parameters.\n\npp$3.parseArrowExpression = function(node, params, isAsync) {\n  var oldInGen = this.inGenerator, oldInAsync = this.inAsync,\n      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction;\n\n  this.enterFunctionScope();\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  this.inGenerator = false;\n  this.inAsync = node.async;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.inFunction = true;\n\n  node.params = this.toAssignableList(params, true);\n  this.parseFunctionBody(node, true);\n\n  this.inGenerator = oldInGen;\n  this.inAsync = oldInAsync;\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.inFunction = oldInFunc;\n  return this.finishNode(node, \"ArrowFunctionExpression\")\n};\n\n// Parse function body and check parameters.\n\npp$3.parseFunctionBody = function(node, isArrowFunction) {\n  var isExpression = isArrowFunction && this.type !== types.braceL;\n  var oldStrict = this.strict, useStrict = false;\n\n  if (isExpression) {\n    node.body = this.parseMaybeAssign();\n    node.expression = true;\n    this.checkParams(node, false);\n  } else {\n    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n    if (!oldStrict || nonSimple) {\n      useStrict = this.strictDirective(this.end);\n      // If this is a strict mode function, verify that argument names\n      // are not repeated, and it does not try to bind the words `eval`\n      // or `arguments`.\n      if (useStrict && nonSimple)\n        { this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\"); }\n    }\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldLabels = this.labels;\n    this.labels = [];\n    if (useStrict) { this.strict = true; }\n\n    // Add the params to varDeclaredNames to ensure that an error is thrown\n    // if a let/const declaration in the function clashes with one of the params.\n    this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && this.isSimpleParamList(node.params));\n    node.body = this.parseBlock(false);\n    node.expression = false;\n    this.adaptDirectivePrologue(node.body.body);\n    this.labels = oldLabels;\n  }\n  this.exitFunctionScope();\n\n  if (this.strict && node.id) {\n    // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n    this.checkLVal(node.id, \"none\");\n  }\n  this.strict = oldStrict;\n};\n\npp$3.isSimpleParamList = function(params) {\n  for (var i = 0, list = params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    if (param.type !== \"Identifier\") { return false\n  } }\n  return true\n};\n\n// Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\n\npp$3.checkParams = function(node, allowDuplicates) {\n  var this$1 = this;\n\n  var nameHash = {};\n  for (var i = 0, list = node.params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    this$1.checkLVal(param, \"var\", allowDuplicates ? null : nameHash);\n  }\n};\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n  var this$1 = this;\n\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (allowTrailingComma && this$1.afterTrailingComma(close)) { break }\n    } else { first = false; }\n\n    var elt = (void 0);\n    if (allowEmpty && this$1.type === types.comma)\n      { elt = null; }\n    else if (this$1.type === types.ellipsis) {\n      elt = this$1.parseSpread(refDestructuringErrors);\n      if (refDestructuringErrors && this$1.type === types.comma && refDestructuringErrors.trailingComma < 0)\n        { refDestructuringErrors.trailingComma = this$1.start; }\n    } else {\n      elt = this$1.parseMaybeAssign(false, refDestructuringErrors);\n    }\n    elts.push(elt);\n  }\n  return elts\n};\n\npp$3.checkUnreserved = function(ref) {\n  var start = ref.start;\n  var end = ref.end;\n  var name = ref.name;\n\n  if (this.inGenerator && name === \"yield\")\n    { this.raiseRecoverable(start, \"Can not use 'yield' as identifier inside a generator\"); }\n  if (this.inAsync && name === \"await\")\n    { this.raiseRecoverable(start, \"Can not use 'await' as identifier inside an async function\"); }\n  if (this.isKeyword(name))\n    { this.raise(start, (\"Unexpected keyword '\" + name + \"'\")); }\n  if (this.options.ecmaVersion < 6 &&\n    this.input.slice(start, end).indexOf(\"\\\\\") != -1) { return }\n  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n  if (re.test(name)) {\n    if (!this.inAsync && name === \"await\")\n      { this.raiseRecoverable(start, \"Can not use keyword 'await' outside an async function\"); }\n    this.raiseRecoverable(start, (\"The keyword '\" + name + \"' is reserved\"));\n  }\n};\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\npp$3.parseIdent = function(liberal, isBinding) {\n  var node = this.startNode();\n  if (liberal && this.options.allowReserved == \"never\") { liberal = false; }\n  if (this.type === types.name) {\n    node.name = this.value;\n  } else if (this.type.keyword) {\n    node.name = this.type.keyword;\n\n    // To fix https://github.com/acornjs/acorn/issues/575\n    // `class` and `function` keywords push new context into this.context.\n    // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n    // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\n    if ((node.name === \"class\" || node.name === \"function\") &&\n        (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {\n      this.context.pop();\n    }\n  } else {\n    this.unexpected();\n  }\n  this.next();\n  this.finishNode(node, \"Identifier\");\n  if (!liberal) { this.checkUnreserved(node); }\n  return node\n};\n\n// Parses yield expression inside generator.\n\npp$3.parseYield = function() {\n  if (!this.yieldPos) { this.yieldPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  if (this.type == types.semi || this.canInsertSemicolon() || (this.type != types.star && !this.type.startsExpr)) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(types.star);\n    node.argument = this.parseMaybeAssign();\n  }\n  return this.finishNode(node, \"YieldExpression\")\n};\n\npp$3.parseAwait = function() {\n  if (!this.awaitPos) { this.awaitPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeUnary(null, true);\n  return this.finishNode(node, \"AwaitExpression\")\n};\n\nvar pp$4 = Parser.prototype;\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp$4.raise = function(pos, message) {\n  var loc = getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos; err.loc = loc; err.raisedAt = this.pos;\n  throw err\n};\n\npp$4.raiseRecoverable = pp$4.raise;\n\npp$4.curPosition = function() {\n  if (this.options.locations) {\n    return new Position(this.curLine, this.pos - this.lineStart)\n  }\n};\n\nvar pp$5 = Parser.prototype;\n\n// Object.assign polyfill\nvar assign = Object.assign || function(target) {\n  var sources = [], len = arguments.length - 1;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\n\n  for (var i = 0, list = sources; i < list.length; i += 1) {\n    var source = list[i];\n\n    for (var key in source) {\n      if (has(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target\n};\n\n// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\n\npp$5.enterFunctionScope = function() {\n  // var: a hash of var-declared names in the current lexical scope\n  // lexical: a hash of lexically-declared names in the current lexical scope\n  // childVar: a hash of var-declared names in all child lexical scopes of the current lexical scope (within the current function scope)\n  // parentLexical: a hash of lexically-declared names in all parent lexical scopes of the current lexical scope (within the current function scope)\n  this.scopeStack.push({var: {}, lexical: {}, childVar: {}, parentLexical: {}});\n};\n\npp$5.exitFunctionScope = function() {\n  this.scopeStack.pop();\n};\n\npp$5.enterLexicalScope = function() {\n  var parentScope = this.scopeStack[this.scopeStack.length - 1];\n  var childScope = {var: {}, lexical: {}, childVar: {}, parentLexical: {}};\n\n  this.scopeStack.push(childScope);\n  assign(childScope.parentLexical, parentScope.lexical, parentScope.parentLexical);\n};\n\npp$5.exitLexicalScope = function() {\n  var childScope = this.scopeStack.pop();\n  var parentScope = this.scopeStack[this.scopeStack.length - 1];\n\n  assign(parentScope.childVar, childScope.var, childScope.childVar);\n};\n\n/**\n * A name can be declared with `var` if there are no variables with the same name declared with `let`/`const`\n * in the current lexical scope or any of the parent lexical scopes in this function.\n */\npp$5.canDeclareVarName = function(name) {\n  var currentScope = this.scopeStack[this.scopeStack.length - 1];\n\n  return !has(currentScope.lexical, name) && !has(currentScope.parentLexical, name)\n};\n\n/**\n * A name can be declared with `let`/`const` if there are no variables with the same name declared with `let`/`const`\n * in the current scope, and there are no variables with the same name declared with `var` in the current scope or in\n * any child lexical scopes in this function.\n */\npp$5.canDeclareLexicalName = function(name) {\n  var currentScope = this.scopeStack[this.scopeStack.length - 1];\n\n  return !has(currentScope.lexical, name) && !has(currentScope.var, name) && !has(currentScope.childVar, name)\n};\n\npp$5.declareVarName = function(name) {\n  this.scopeStack[this.scopeStack.length - 1].var[name] = true;\n};\n\npp$5.declareLexicalName = function(name) {\n  this.scopeStack[this.scopeStack.length - 1].lexical[name] = true;\n};\n\nvar Node = function Node(parser, pos, loc) {\n  this.type = \"\";\n  this.start = pos;\n  this.end = 0;\n  if (parser.options.locations)\n    { this.loc = new SourceLocation(parser, loc); }\n  if (parser.options.directSourceFile)\n    { this.sourceFile = parser.options.directSourceFile; }\n  if (parser.options.ranges)\n    { this.range = [pos, 0]; }\n};\n\n// Start an AST node, attaching a start offset.\n\nvar pp$6 = Parser.prototype;\n\npp$6.startNode = function() {\n  return new Node(this, this.start, this.startLoc)\n};\n\npp$6.startNodeAt = function(pos, loc) {\n  return new Node(this, pos, loc)\n};\n\n// Finish an AST node, adding `type` and `end` properties.\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type;\n  node.end = pos;\n  if (this.options.locations)\n    { node.loc.end = loc; }\n  if (this.options.ranges)\n    { node.range[1] = pos; }\n  return node\n}\n\npp$6.finishNode = function(node, type) {\n  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n};\n\n// Finish node at given position\n\npp$6.finishNodeAt = function(node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc)\n};\n\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n  this.generator = !!generator;\n};\n\nvar types$1 = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", false),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.tryReadTemplateToken(); }),\n  f_stat: new TokContext(\"function\", false),\n  f_expr: new TokContext(\"function\", true),\n  f_expr_gen: new TokContext(\"function\", true, false, null, true),\n  f_gen: new TokContext(\"function\", false, false, null, true)\n};\n\nvar pp$7 = Parser.prototype;\n\npp$7.initialContext = function() {\n  return [types$1.b_stat]\n};\n\npp$7.braceIsBlock = function(prevType) {\n  var parent = this.curContext();\n  if (parent === types$1.f_expr || parent === types$1.f_stat)\n    { return true }\n  if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr))\n    { return !parent.isExpr }\n\n  // The check for `tt.name && exprAllowed` detects whether we are\n  // after a `yield` or `of` construct. See the `updateContext` for\n  // `tt.name`.\n  if (prevType === types._return || prevType == types.name && this.exprAllowed)\n    { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }\n  if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType == types.arrow)\n    { return true }\n  if (prevType == types.braceL)\n    { return parent === types$1.b_stat }\n  if (prevType == types._var || prevType == types.name)\n    { return false }\n  return !this.exprAllowed\n};\n\npp$7.inGeneratorContext = function() {\n  var this$1 = this;\n\n  for (var i = this.context.length - 1; i >= 1; i--) {\n    var context = this$1.context[i];\n    if (context.token === \"function\")\n      { return context.generator }\n  }\n  return false\n};\n\npp$7.updateContext = function(prevType) {\n  var update, type = this.type;\n  if (type.keyword && prevType == types.dot)\n    { this.exprAllowed = false; }\n  else if (update = type.updateContext)\n    { update.call(this, prevType); }\n  else\n    { this.exprAllowed = type.beforeExpr; }\n};\n\n// Token-specific context update code\n\ntypes.parenR.updateContext = types.braceR.updateContext = function() {\n  if (this.context.length == 1) {\n    this.exprAllowed = true;\n    return\n  }\n  var out = this.context.pop();\n  if (out === types$1.b_stat && this.curContext().token === \"function\") {\n    out = this.context.pop();\n  }\n  this.exprAllowed = !out.isExpr;\n};\n\ntypes.braceL.updateContext = function(prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);\n  this.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function() {\n  this.context.push(types$1.b_tmpl);\n  this.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function(prevType) {\n  var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);\n  this.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function() {\n  // tokExprAllowed stays unchanged\n};\n\ntypes._function.updateContext = types._class.updateContext = function(prevType) {\n  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else &&\n      !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat))\n    { this.context.push(types$1.f_expr); }\n  else\n    { this.context.push(types$1.f_stat); }\n  this.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function() {\n  if (this.curContext() === types$1.q_tmpl)\n    { this.context.pop(); }\n  else\n    { this.context.push(types$1.q_tmpl); }\n  this.exprAllowed = false;\n};\n\ntypes.star.updateContext = function(prevType) {\n  if (prevType == types._function) {\n    var index = this.context.length - 1;\n    if (this.context[index] === types$1.f_expr)\n      { this.context[index] = types$1.f_expr_gen; }\n    else\n      { this.context[index] = types$1.f_gen; }\n  }\n  this.exprAllowed = true;\n};\n\ntypes.name.updateContext = function(prevType) {\n  var allowed = false;\n  if (this.options.ecmaVersion >= 6) {\n    if (this.value == \"of\" && !this.exprAllowed ||\n        this.value == \"yield\" && this.inGeneratorContext())\n      { allowed = true; }\n  }\n  this.exprAllowed = allowed;\n};\n\nvar data = {\n  \"$LONE\": [\n    \"ASCII\",\n    \"ASCII_Hex_Digit\",\n    \"AHex\",\n    \"Alphabetic\",\n    \"Alpha\",\n    \"Any\",\n    \"Assigned\",\n    \"Bidi_Control\",\n    \"Bidi_C\",\n    \"Bidi_Mirrored\",\n    \"Bidi_M\",\n    \"Case_Ignorable\",\n    \"CI\",\n    \"Cased\",\n    \"Changes_When_Casefolded\",\n    \"CWCF\",\n    \"Changes_When_Casemapped\",\n    \"CWCM\",\n    \"Changes_When_Lowercased\",\n    \"CWL\",\n    \"Changes_When_NFKC_Casefolded\",\n    \"CWKCF\",\n    \"Changes_When_Titlecased\",\n    \"CWT\",\n    \"Changes_When_Uppercased\",\n    \"CWU\",\n    \"Dash\",\n    \"Default_Ignorable_Code_Point\",\n    \"DI\",\n    \"Deprecated\",\n    \"Dep\",\n    \"Diacritic\",\n    \"Dia\",\n    \"Emoji\",\n    \"Emoji_Component\",\n    \"Emoji_Modifier\",\n    \"Emoji_Modifier_Base\",\n    \"Emoji_Presentation\",\n    \"Extender\",\n    \"Ext\",\n    \"Grapheme_Base\",\n    \"Gr_Base\",\n    \"Grapheme_Extend\",\n    \"Gr_Ext\",\n    \"Hex_Digit\",\n    \"Hex\",\n    \"IDS_Binary_Operator\",\n    \"IDSB\",\n    \"IDS_Trinary_Operator\",\n    \"IDST\",\n    \"ID_Continue\",\n    \"IDC\",\n    \"ID_Start\",\n    \"IDS\",\n    \"Ideographic\",\n    \"Ideo\",\n    \"Join_Control\",\n    \"Join_C\",\n    \"Logical_Order_Exception\",\n    \"LOE\",\n    \"Lowercase\",\n    \"Lower\",\n    \"Math\",\n    \"Noncharacter_Code_Point\",\n    \"NChar\",\n    \"Pattern_Syntax\",\n    \"Pat_Syn\",\n    \"Pattern_White_Space\",\n    \"Pat_WS\",\n    \"Quotation_Mark\",\n    \"QMark\",\n    \"Radical\",\n    \"Regional_Indicator\",\n    \"RI\",\n    \"Sentence_Terminal\",\n    \"STerm\",\n    \"Soft_Dotted\",\n    \"SD\",\n    \"Terminal_Punctuation\",\n    \"Term\",\n    \"Unified_Ideograph\",\n    \"UIdeo\",\n    \"Uppercase\",\n    \"Upper\",\n    \"Variation_Selector\",\n    \"VS\",\n    \"White_Space\",\n    \"space\",\n    \"XID_Continue\",\n    \"XIDC\",\n    \"XID_Start\",\n    \"XIDS\"\n  ],\n  \"General_Category\": [\n    \"Cased_Letter\",\n    \"LC\",\n    \"Close_Punctuation\",\n    \"Pe\",\n    \"Connector_Punctuation\",\n    \"Pc\",\n    \"Control\",\n    \"Cc\",\n    \"cntrl\",\n    \"Currency_Symbol\",\n    \"Sc\",\n    \"Dash_Punctuation\",\n    \"Pd\",\n    \"Decimal_Number\",\n    \"Nd\",\n    \"digit\",\n    \"Enclosing_Mark\",\n    \"Me\",\n    \"Final_Punctuation\",\n    \"Pf\",\n    \"Format\",\n    \"Cf\",\n    \"Initial_Punctuation\",\n    \"Pi\",\n    \"Letter\",\n    \"L\",\n    \"Letter_Number\",\n    \"Nl\",\n    \"Line_Separator\",\n    \"Zl\",\n    \"Lowercase_Letter\",\n    \"Ll\",\n    \"Mark\",\n    \"M\",\n    \"Combining_Mark\",\n    \"Math_Symbol\",\n    \"Sm\",\n    \"Modifier_Letter\",\n    \"Lm\",\n    \"Modifier_Symbol\",\n    \"Sk\",\n    \"Nonspacing_Mark\",\n    \"Mn\",\n    \"Number\",\n    \"N\",\n    \"Open_Punctuation\",\n    \"Ps\",\n    \"Other\",\n    \"C\",\n    \"Other_Letter\",\n    \"Lo\",\n    \"Other_Number\",\n    \"No\",\n    \"Other_Punctuation\",\n    \"Po\",\n    \"Other_Symbol\",\n    \"So\",\n    \"Paragraph_Separator\",\n    \"Zp\",\n    \"Private_Use\",\n    \"Co\",\n    \"Punctuation\",\n    \"P\",\n    \"punct\",\n    \"Separator\",\n    \"Z\",\n    \"Space_Separator\",\n    \"Zs\",\n    \"Spacing_Mark\",\n    \"Mc\",\n    \"Surrogate\",\n    \"Cs\",\n    \"Symbol\",\n    \"S\",\n    \"Titlecase_Letter\",\n    \"Lt\",\n    \"Unassigned\",\n    \"Cn\",\n    \"Uppercase_Letter\",\n    \"Lu\"\n  ],\n  \"Script\": [\n    \"Adlam\",\n    \"Adlm\",\n    \"Ahom\",\n    \"Anatolian_Hieroglyphs\",\n    \"Hluw\",\n    \"Arabic\",\n    \"Arab\",\n    \"Armenian\",\n    \"Armn\",\n    \"Avestan\",\n    \"Avst\",\n    \"Balinese\",\n    \"Bali\",\n    \"Bamum\",\n    \"Bamu\",\n    \"Bassa_Vah\",\n    \"Bass\",\n    \"Batak\",\n    \"Batk\",\n    \"Bengali\",\n    \"Beng\",\n    \"Bhaiksuki\",\n    \"Bhks\",\n    \"Bopomofo\",\n    \"Bopo\",\n    \"Brahmi\",\n    \"Brah\",\n    \"Braille\",\n    \"Brai\",\n    \"Buginese\",\n    \"Bugi\",\n    \"Buhid\",\n    \"Buhd\",\n    \"Canadian_Aboriginal\",\n    \"Cans\",\n    \"Carian\",\n    \"Cari\",\n    \"Caucasian_Albanian\",\n    \"Aghb\",\n    \"Chakma\",\n    \"Cakm\",\n    \"Cham\",\n    \"Cherokee\",\n    \"Cher\",\n    \"Common\",\n    \"Zyyy\",\n    \"Coptic\",\n    \"Copt\",\n    \"Qaac\",\n    \"Cuneiform\",\n    \"Xsux\",\n    \"Cypriot\",\n    \"Cprt\",\n    \"Cyrillic\",\n    \"Cyrl\",\n    \"Deseret\",\n    \"Dsrt\",\n    \"Devanagari\",\n    \"Deva\",\n    \"Duployan\",\n    \"Dupl\",\n    \"Egyptian_Hieroglyphs\",\n    \"Egyp\",\n    \"Elbasan\",\n    \"Elba\",\n    \"Ethiopic\",\n    \"Ethi\",\n    \"Georgian\",\n    \"Geor\",\n    \"Glagolitic\",\n    \"Glag\",\n    \"Gothic\",\n    \"Goth\",\n    \"Grantha\",\n    \"Gran\",\n    \"Greek\",\n    \"Grek\",\n    \"Gujarati\",\n    \"Gujr\",\n    \"Gurmukhi\",\n    \"Guru\",\n    \"Han\",\n    \"Hani\",\n    \"Hangul\",\n    \"Hang\",\n    \"Hanunoo\",\n    \"Hano\",\n    \"Hatran\",\n    \"Hatr\",\n    \"Hebrew\",\n    \"Hebr\",\n    \"Hiragana\",\n    \"Hira\",\n    \"Imperial_Aramaic\",\n    \"Armi\",\n    \"Inherited\",\n    \"Zinh\",\n    \"Qaai\",\n    \"Inscriptional_Pahlavi\",\n    \"Phli\",\n    \"Inscriptional_Parthian\",\n    \"Prti\",\n    \"Javanese\",\n    \"Java\",\n    \"Kaithi\",\n    \"Kthi\",\n    \"Kannada\",\n    \"Knda\",\n    \"Katakana\",\n    \"Kana\",\n    \"Kayah_Li\",\n    \"Kali\",\n    \"Kharoshthi\",\n    \"Khar\",\n    \"Khmer\",\n    \"Khmr\",\n    \"Khojki\",\n    \"Khoj\",\n    \"Khudawadi\",\n    \"Sind\",\n    \"Lao\",\n    \"Laoo\",\n    \"Latin\",\n    \"Latn\",\n    \"Lepcha\",\n    \"Lepc\",\n    \"Limbu\",\n    \"Limb\",\n    \"Linear_A\",\n    \"Lina\",\n    \"Linear_B\",\n    \"Linb\",\n    \"Lisu\",\n    \"Lycian\",\n    \"Lyci\",\n    \"Lydian\",\n    \"Lydi\",\n    \"Mahajani\",\n    \"Mahj\",\n    \"Malayalam\",\n    \"Mlym\",\n    \"Mandaic\",\n    \"Mand\",\n    \"Manichaean\",\n    \"Mani\",\n    \"Marchen\",\n    \"Marc\",\n    \"Masaram_Gondi\",\n    \"Gonm\",\n    \"Meetei_Mayek\",\n    \"Mtei\",\n    \"Mende_Kikakui\",\n    \"Mend\",\n    \"Meroitic_Cursive\",\n    \"Merc\",\n    \"Meroitic_Hieroglyphs\",\n    \"Mero\",\n    \"Miao\",\n    \"Plrd\",\n    \"Modi\",\n    \"Mongolian\",\n    \"Mong\",\n    \"Mro\",\n    \"Mroo\",\n    \"Multani\",\n    \"Mult\",\n    \"Myanmar\",\n    \"Mymr\",\n    \"Nabataean\",\n    \"Nbat\",\n    \"New_Tai_Lue\",\n    \"Talu\",\n    \"Newa\",\n    \"Nko\",\n    \"Nkoo\",\n    \"Nushu\",\n    \"Nshu\",\n    \"Ogham\",\n    \"Ogam\",\n    \"Ol_Chiki\",\n    \"Olck\",\n    \"Old_Hungarian\",\n    \"Hung\",\n    \"Old_Italic\",\n    \"Ital\",\n    \"Old_North_Arabian\",\n    \"Narb\",\n    \"Old_Permic\",\n    \"Perm\",\n    \"Old_Persian\",\n    \"Xpeo\",\n    \"Old_South_Arabian\",\n    \"Sarb\",\n    \"Old_Turkic\",\n    \"Orkh\",\n    \"Oriya\",\n    \"Orya\",\n    \"Osage\",\n    \"Osge\",\n    \"Osmanya\",\n    \"Osma\",\n    \"Pahawh_Hmong\",\n    \"Hmng\",\n    \"Palmyrene\",\n    \"Palm\",\n    \"Pau_Cin_Hau\",\n    \"Pauc\",\n    \"Phags_Pa\",\n    \"Phag\",\n    \"Phoenician\",\n    \"Phnx\",\n    \"Psalter_Pahlavi\",\n    \"Phlp\",\n    \"Rejang\",\n    \"Rjng\",\n    \"Runic\",\n    \"Runr\",\n    \"Samaritan\",\n    \"Samr\",\n    \"Saurashtra\",\n    \"Saur\",\n    \"Sharada\",\n    \"Shrd\",\n    \"Shavian\",\n    \"Shaw\",\n    \"Siddham\",\n    \"Sidd\",\n    \"SignWriting\",\n    \"Sgnw\",\n    \"Sinhala\",\n    \"Sinh\",\n    \"Sora_Sompeng\",\n    \"Sora\",\n    \"Soyombo\",\n    \"Soyo\",\n    \"Sundanese\",\n    \"Sund\",\n    \"Syloti_Nagri\",\n    \"Sylo\",\n    \"Syriac\",\n    \"Syrc\",\n    \"Tagalog\",\n    \"Tglg\",\n    \"Tagbanwa\",\n    \"Tagb\",\n    \"Tai_Le\",\n    \"Tale\",\n    \"Tai_Tham\",\n    \"Lana\",\n    \"Tai_Viet\",\n    \"Tavt\",\n    \"Takri\",\n    \"Takr\",\n    \"Tamil\",\n    \"Taml\",\n    \"Tangut\",\n    \"Tang\",\n    \"Telugu\",\n    \"Telu\",\n    \"Thaana\",\n    \"Thaa\",\n    \"Thai\",\n    \"Tibetan\",\n    \"Tibt\",\n    \"Tifinagh\",\n    \"Tfng\",\n    \"Tirhuta\",\n    \"Tirh\",\n    \"Ugaritic\",\n    \"Ugar\",\n    \"Vai\",\n    \"Vaii\",\n    \"Warang_Citi\",\n    \"Wara\",\n    \"Yi\",\n    \"Yiii\",\n    \"Zanabazar_Square\",\n    \"Zanb\"\n  ]\n};\nArray.prototype.push.apply(data.$LONE, data.General_Category);\ndata.gc = data.General_Category;\ndata.sc = data.Script_Extensions = data.scx = data.Script;\n\nvar pp$9 = Parser.prototype;\n\nvar RegExpValidationState = function RegExpValidationState(parser) {\n  this.parser = parser;\n  this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\");\n  this.source = \"\";\n  this.flags = \"\";\n  this.start = 0;\n  this.switchU = false;\n  this.switchN = false;\n  this.pos = 0;\n  this.lastIntValue = 0;\n  this.lastStringValue = \"\";\n  this.lastAssertionIsQuantifiable = false;\n  this.numCapturingParens = 0;\n  this.maxBackReference = 0;\n  this.groupNames = [];\n  this.backReferenceNames = [];\n};\n\nRegExpValidationState.prototype.reset = function reset (start, pattern, flags) {\n  var unicode = flags.indexOf(\"u\") !== -1;\n  this.start = start | 0;\n  this.source = pattern + \"\";\n  this.flags = flags;\n  this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n  this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n};\n\nRegExpValidationState.prototype.raise = function raise (message) {\n  this.parser.raiseRecoverable(this.start, (\"Invalid regular expression: /\" + (this.source) + \"/: \" + message));\n};\n\n// If u flag is given, this returns the code point at the index (it combines a surrogate pair).\n// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\nRegExpValidationState.prototype.at = function at (i) {\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return -1\n  }\n  var c = s.charCodeAt(i);\n  if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n    return c\n  }\n  return (c << 10) + s.charCodeAt(i + 1) - 0x35FDC00\n};\n\nRegExpValidationState.prototype.nextIndex = function nextIndex (i) {\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return l\n  }\n  var c = s.charCodeAt(i);\n  if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n    return i + 1\n  }\n  return i + 2\n};\n\nRegExpValidationState.prototype.current = function current () {\n  return this.at(this.pos)\n};\n\nRegExpValidationState.prototype.lookahead = function lookahead () {\n  return this.at(this.nextIndex(this.pos))\n};\n\nRegExpValidationState.prototype.advance = function advance () {\n  this.pos = this.nextIndex(this.pos);\n};\n\nRegExpValidationState.prototype.eat = function eat (ch) {\n  if (this.current() === ch) {\n    this.advance();\n    return true\n  }\n  return false\n};\n\nfunction codePointToString$1(ch) {\n  if (ch <= 0xFFFF) { return String.fromCharCode(ch) }\n  ch -= 0x10000;\n  return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00)\n}\n\n/**\n * Validate the flags part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$9.validateRegExpFlags = function(state) {\n  var this$1 = this;\n\n  var validFlags = state.validFlags;\n  var flags = state.flags;\n\n  for (var i = 0; i < flags.length; i++) {\n    var flag = flags.charAt(i);\n    if (validFlags.indexOf(flag) == -1) {\n      this$1.raise(state.start, \"Invalid regular expression flag\");\n    }\n    if (flags.indexOf(flag, i + 1) > -1) {\n      this$1.raise(state.start, \"Duplicate regular expression flag\");\n    }\n  }\n};\n\n/**\n * Validate the pattern part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$9.validateRegExpPattern = function(state) {\n  this.regexp_pattern(state);\n\n  // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\n  // parsing contains a |GroupName|, reparse with the goal symbol\n  // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\n  // exception if _P_ did not conform to the grammar, if any elements of _P_\n  // were not matched by the parse, or if any Early Error conditions exist.\n  if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {\n    state.switchN = true;\n    this.regexp_pattern(state);\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\npp$9.regexp_pattern = function(state) {\n  state.pos = 0;\n  state.lastIntValue = 0;\n  state.lastStringValue = \"\";\n  state.lastAssertionIsQuantifiable = false;\n  state.numCapturingParens = 0;\n  state.maxBackReference = 0;\n  state.groupNames.length = 0;\n  state.backReferenceNames.length = 0;\n\n  this.regexp_disjunction(state);\n\n  if (state.pos !== state.source.length) {\n    // Make the same messages as V8.\n    if (state.eat(0x29 /* ) */)) {\n      state.raise(\"Unmatched ')'\");\n    }\n    if (state.eat(0x5D /* [ */) || state.eat(0x7D /* } */)) {\n      state.raise(\"Lone quantifier brackets\");\n    }\n  }\n  if (state.maxBackReference > state.numCapturingParens) {\n    state.raise(\"Invalid escape\");\n  }\n  for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {\n    var name = list[i];\n\n    if (state.groupNames.indexOf(name) === -1) {\n      state.raise(\"Invalid named capture referenced\");\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\npp$9.regexp_disjunction = function(state) {\n  var this$1 = this;\n\n  this.regexp_alternative(state);\n  while (state.eat(0x7C /* | */)) {\n    this$1.regexp_alternative(state);\n  }\n\n  // Make the same message as V8.\n  if (this.regexp_eatQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  if (state.eat(0x7B /* { */)) {\n    state.raise(\"Lone quantifier brackets\");\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\npp$9.regexp_alternative = function(state) {\n  while (state.pos < state.source.length && this.regexp_eatTerm(state))\n    {  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\npp$9.regexp_eatTerm = function(state) {\n  if (this.regexp_eatAssertion(state)) {\n    // Handle `QuantifiableAssertion Quantifier` alternative.\n    // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n    // is a QuantifiableAssertion.\n    if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\n      // Make the same message as V8.\n      if (state.switchU) {\n        state.raise(\"Invalid quantifier\");\n      }\n    }\n    return true\n  }\n\n  if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n    this.regexp_eatQuantifier(state);\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\npp$9.regexp_eatAssertion = function(state) {\n  var start = state.pos;\n  state.lastAssertionIsQuantifiable = false;\n\n  // ^, $\n  if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {\n    return true\n  }\n\n  // \\b \\B\n  if (state.eat(0x5C /* \\ */)) {\n    if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  // Lookahead / Lookbehind\n  if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {\n    var lookbehind = false;\n    if (this.options.ecmaVersion >= 9) {\n      lookbehind = state.eat(0x3C /* < */);\n    }\n    if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {\n      this.regexp_disjunction(state);\n      if (!state.eat(0x29 /* ) */)) {\n        state.raise(\"Unterminated group\");\n      }\n      state.lastAssertionIsQuantifiable = !lookbehind;\n      return true\n    }\n  }\n\n  state.pos = start;\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\npp$9.regexp_eatQuantifier = function(state, noError) {\n  if ( noError === void 0 ) noError = false;\n\n  if (this.regexp_eatQuantifierPrefix(state, noError)) {\n    state.eat(0x3F /* ? */);\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\npp$9.regexp_eatQuantifierPrefix = function(state, noError) {\n  return (\n    state.eat(0x2A /* * */) ||\n    state.eat(0x2B /* + */) ||\n    state.eat(0x3F /* ? */) ||\n    this.regexp_eatBracedQuantifier(state, noError)\n  )\n};\npp$9.regexp_eatBracedQuantifier = function(state, noError) {\n  var start = state.pos;\n  if (state.eat(0x7B /* { */)) {\n    var min = 0, max = -1;\n    if (this.regexp_eatDecimalDigits(state)) {\n      min = state.lastIntValue;\n      if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {\n        max = state.lastIntValue;\n      }\n      if (state.eat(0x7D /* } */)) {\n        // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\n        if (max !== -1 && max < min && !noError) {\n          state.raise(\"numbers out of order in {} quantifier\");\n        }\n        return true\n      }\n    }\n    if (state.switchU && !noError) {\n      state.raise(\"Incomplete quantifier\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\npp$9.regexp_eatAtom = function(state) {\n  return (\n    this.regexp_eatPatternCharacters(state) ||\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state)\n  )\n};\npp$9.regexp_eatReverseSolidusAtomEscape = function(state) {\n  var start = state.pos;\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatAtomEscape(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$9.regexp_eatUncapturingGroup = function(state) {\n  var start = state.pos;\n  if (state.eat(0x28 /* ( */)) {\n    if (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {\n      this.regexp_disjunction(state);\n      if (state.eat(0x29 /* ) */)) {\n        return true\n      }\n      state.raise(\"Unterminated group\");\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$9.regexp_eatCapturingGroup = function(state) {\n  if (state.eat(0x28 /* ( */)) {\n    if (this.options.ecmaVersion >= 9) {\n      this.regexp_groupSpecifier(state);\n    } else if (state.current() === 0x3F /* ? */) {\n      state.raise(\"Invalid group\");\n    }\n    this.regexp_disjunction(state);\n    if (state.eat(0x29 /* ) */)) {\n      state.numCapturingParens += 1;\n      return true\n    }\n    state.raise(\"Unterminated group\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\npp$9.regexp_eatExtendedAtom = function(state) {\n  return (\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state) ||\n    this.regexp_eatInvalidBracedQuantifier(state) ||\n    this.regexp_eatExtendedPatternCharacter(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\npp$9.regexp_eatInvalidBracedQuantifier = function(state) {\n  if (this.regexp_eatBracedQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\npp$9.regexp_eatSyntaxCharacter = function(state) {\n  var ch = state.current();\n  if (isSyntaxCharacter(ch)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isSyntaxCharacter(ch) {\n  return (\n    ch === 0x24 /* $ */ ||\n    ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||\n    ch === 0x2E /* . */ ||\n    ch === 0x3F /* ? */ ||\n    ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||\n    ch >= 0x7B /* { */ && ch <= 0x7D /* } */\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n// But eat eager.\npp$9.regexp_eatPatternCharacters = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {\n    state.advance();\n  }\n  return state.pos !== start\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\npp$9.regexp_eatExtendedPatternCharacter = function(state) {\n  var ch = state.current();\n  if (\n    ch !== -1 &&\n    ch !== 0x24 /* $ */ &&\n    !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&\n    ch !== 0x2E /* . */ &&\n    ch !== 0x3F /* ? */ &&\n    ch !== 0x5B /* [ */ &&\n    ch !== 0x5E /* ^ */ &&\n    ch !== 0x7C /* | */\n  ) {\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// GroupSpecifier[U] ::\n//   [empty]\n//   `?` GroupName[?U]\npp$9.regexp_groupSpecifier = function(state) {\n  if (state.eat(0x3F /* ? */)) {\n    if (this.regexp_eatGroupName(state)) {\n      if (state.groupNames.indexOf(state.lastStringValue) !== -1) {\n        state.raise(\"Duplicate capture group name\");\n      }\n      state.groupNames.push(state.lastStringValue);\n      return\n    }\n    state.raise(\"Invalid group\");\n  }\n};\n\n// GroupName[U] ::\n//   `<` RegExpIdentifierName[?U] `>`\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$9.regexp_eatGroupName = function(state) {\n  state.lastStringValue = \"\";\n  if (state.eat(0x3C /* < */)) {\n    if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {\n      return true\n    }\n    state.raise(\"Invalid capture group name\");\n  }\n  return false\n};\n\n// RegExpIdentifierName[U] ::\n//   RegExpIdentifierStart[?U]\n//   RegExpIdentifierName[?U] RegExpIdentifierPart[?U]\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$9.regexp_eatRegExpIdentifierName = function(state) {\n  state.lastStringValue = \"\";\n  if (this.regexp_eatRegExpIdentifierStart(state)) {\n    state.lastStringValue += codePointToString$1(state.lastIntValue);\n    while (this.regexp_eatRegExpIdentifierPart(state)) {\n      state.lastStringValue += codePointToString$1(state.lastIntValue);\n    }\n    return true\n  }\n  return false\n};\n\n// RegExpIdentifierStart[U] ::\n//   UnicodeIDStart\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[?U]\npp$9.regexp_eatRegExpIdentifierStart = function(state) {\n  var start = state.pos;\n  var ch = state.current();\n  state.advance();\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierStart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierStart(ch) {\n  return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */\n}\n\n// RegExpIdentifierPart[U] ::\n//   UnicodeIDContinue\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[?U]\n//   <ZWNJ>\n//   <ZWJ>\npp$9.regexp_eatRegExpIdentifierPart = function(state) {\n  var start = state.pos;\n  var ch = state.current();\n  state.advance();\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierPart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierPart(ch) {\n  return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\npp$9.regexp_eatAtomEscape = function(state) {\n  if (\n    this.regexp_eatBackReference(state) ||\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state) ||\n    (state.switchN && this.regexp_eatKGroupName(state))\n  ) {\n    return true\n  }\n  if (state.switchU) {\n    // Make the same message as V8.\n    if (state.current() === 0x63 /* c */) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.raise(\"Invalid escape\");\n  }\n  return false\n};\npp$9.regexp_eatBackReference = function(state) {\n  var start = state.pos;\n  if (this.regexp_eatDecimalEscape(state)) {\n    var n = state.lastIntValue;\n    if (state.switchU) {\n      // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\n      if (n > state.maxBackReference) {\n        state.maxBackReference = n;\n      }\n      return true\n    }\n    if (n <= state.numCapturingParens) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$9.regexp_eatKGroupName = function(state) {\n  if (state.eat(0x6B /* k */)) {\n    if (this.regexp_eatGroupName(state)) {\n      state.backReferenceNames.push(state.lastStringValue);\n      return true\n    }\n    state.raise(\"Invalid named reference\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\npp$9.regexp_eatCharacterEscape = function(state) {\n  return (\n    this.regexp_eatControlEscape(state) ||\n    this.regexp_eatCControlLetter(state) ||\n    this.regexp_eatZero(state) ||\n    this.regexp_eatHexEscapeSequence(state) ||\n    this.regexp_eatRegExpUnicodeEscapeSequence(state) ||\n    (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||\n    this.regexp_eatIdentityEscape(state)\n  )\n};\npp$9.regexp_eatCControlLetter = function(state) {\n  var start = state.pos;\n  if (state.eat(0x63 /* c */)) {\n    if (this.regexp_eatControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$9.regexp_eatZero = function(state) {\n  if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {\n    state.lastIntValue = 0;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\npp$9.regexp_eatControlEscape = function(state) {\n  var ch = state.current();\n  if (ch === 0x74 /* t */) {\n    state.lastIntValue = 0x09; /* \\t */\n    state.advance();\n    return true\n  }\n  if (ch === 0x6E /* n */) {\n    state.lastIntValue = 0x0A; /* \\n */\n    state.advance();\n    return true\n  }\n  if (ch === 0x76 /* v */) {\n    state.lastIntValue = 0x0B; /* \\v */\n    state.advance();\n    return true\n  }\n  if (ch === 0x66 /* f */) {\n    state.lastIntValue = 0x0C; /* \\f */\n    state.advance();\n    return true\n  }\n  if (ch === 0x72 /* r */) {\n    state.lastIntValue = 0x0D; /* \\r */\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\npp$9.regexp_eatControlLetter = function(state) {\n  var ch = state.current();\n  if (isControlLetter(ch)) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isControlLetter(ch) {\n  return (\n    (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\npp$9.regexp_eatRegExpUnicodeEscapeSequence = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x75 /* u */)) {\n    if (this.regexp_eatFixedHexDigits(state, 4)) {\n      var lead = state.lastIntValue;\n      if (state.switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n        var leadSurrogateEnd = state.pos;\n        if (state.eat(0x5C /* \\ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {\n          var trail = state.lastIntValue;\n          if (trail >= 0xDC00 && trail <= 0xDFFF) {\n            state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n            return true\n          }\n        }\n        state.pos = leadSurrogateEnd;\n        state.lastIntValue = lead;\n      }\n      return true\n    }\n    if (\n      state.switchU &&\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatHexDigits(state) &&\n      state.eat(0x7D /* } */) &&\n      isValidUnicode(state.lastIntValue)\n    ) {\n      return true\n    }\n    if (state.switchU) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.pos = start;\n  }\n\n  return false\n};\nfunction isValidUnicode(ch) {\n  return ch >= 0 && ch <= 0x10FFFF\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\npp$9.regexp_eatIdentityEscape = function(state) {\n  if (state.switchU) {\n    if (this.regexp_eatSyntaxCharacter(state)) {\n      return true\n    }\n    if (state.eat(0x2F /* / */)) {\n      state.lastIntValue = 0x2F; /* / */\n      return true\n    }\n    return false\n  }\n\n  var ch = state.current();\n  if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\npp$9.regexp_eatDecimalEscape = function(state) {\n  state.lastIntValue = 0;\n  var ch = state.current();\n  if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {\n    do {\n      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n      state.advance();\n    } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\npp$9.regexp_eatCharacterClassEscape = function(state) {\n  var ch = state.current();\n\n  if (isCharacterClassEscape(ch)) {\n    state.lastIntValue = -1;\n    state.advance();\n    return true\n  }\n\n  if (\n    state.switchU &&\n    this.options.ecmaVersion >= 9 &&\n    (ch === 0x50 /* P */ || ch === 0x70 /* p */)\n  ) {\n    state.lastIntValue = -1;\n    state.advance();\n    if (\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatUnicodePropertyValueExpression(state) &&\n      state.eat(0x7D /* } */)\n    ) {\n      return true\n    }\n    state.raise(\"Invalid property name\");\n  }\n\n  return false\n};\nfunction isCharacterClassEscape(ch) {\n  return (\n    ch === 0x64 /* d */ ||\n    ch === 0x44 /* D */ ||\n    ch === 0x73 /* s */ ||\n    ch === 0x53 /* S */ ||\n    ch === 0x77 /* w */ ||\n    ch === 0x57 /* W */\n  )\n}\n\n// UnicodePropertyValueExpression ::\n//   UnicodePropertyName `=` UnicodePropertyValue\n//   LoneUnicodePropertyNameOrValue\npp$9.regexp_eatUnicodePropertyValueExpression = function(state) {\n  var start = state.pos;\n\n  // UnicodePropertyName `=` UnicodePropertyValue\n  if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {\n    var name = state.lastStringValue;\n    if (this.regexp_eatUnicodePropertyValue(state)) {\n      var value = state.lastStringValue;\n      this.regexp_validateUnicodePropertyNameAndValue(state, name, value);\n      return true\n    }\n  }\n  state.pos = start;\n\n  // LoneUnicodePropertyNameOrValue\n  if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n    var nameOrValue = state.lastStringValue;\n    this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);\n    return true\n  }\n  return false\n};\npp$9.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {\n  if (!data.hasOwnProperty(name) || data[name].indexOf(value) === -1) {\n    state.raise(\"Invalid property name\");\n  }\n};\npp$9.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {\n  if (data.$LONE.indexOf(nameOrValue) === -1) {\n    state.raise(\"Invalid property name\");\n  }\n};\n\n// UnicodePropertyName ::\n//   UnicodePropertyNameCharacters\npp$9.regexp_eatUnicodePropertyName = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyNameCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString$1(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyNameCharacter(ch) {\n  return isControlLetter(ch) || ch === 0x5F /* _ */\n}\n\n// UnicodePropertyValue ::\n//   UnicodePropertyValueCharacters\npp$9.regexp_eatUnicodePropertyValue = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyValueCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString$1(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyValueCharacter(ch) {\n  return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)\n}\n\n// LoneUnicodePropertyNameOrValue ::\n//   UnicodePropertyValueCharacters\npp$9.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {\n  return this.regexp_eatUnicodePropertyValue(state)\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\npp$9.regexp_eatCharacterClass = function(state) {\n  if (state.eat(0x5B /* [ */)) {\n    state.eat(0x5E /* ^ */);\n    this.regexp_classRanges(state);\n    if (state.eat(0x5D /* [ */)) {\n      return true\n    }\n    // Unreachable since it threw \"unterminated regular expression\" error before.\n    state.raise(\"Unterminated character class\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\npp$9.regexp_classRanges = function(state) {\n  var this$1 = this;\n\n  while (this.regexp_eatClassAtom(state)) {\n    var left = state.lastIntValue;\n    if (state.eat(0x2D /* - */) && this$1.regexp_eatClassAtom(state)) {\n      var right = state.lastIntValue;\n      if (state.switchU && (left === -1 || right === -1)) {\n        state.raise(\"Invalid character class\");\n      }\n      if (left !== -1 && right !== -1 && left > right) {\n        state.raise(\"Range out of order in character class\");\n      }\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\npp$9.regexp_eatClassAtom = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatClassEscape(state)) {\n      return true\n    }\n    if (state.switchU) {\n      // Make the same message as V8.\n      var ch$1 = state.current();\n      if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {\n        state.raise(\"Invalid class escape\");\n      }\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n\n  var ch = state.current();\n  if (ch !== 0x5D /* [ */) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\npp$9.regexp_eatClassEscape = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x62 /* b */)) {\n    state.lastIntValue = 0x08; /* <BS> */\n    return true\n  }\n\n  if (state.switchU && state.eat(0x2D /* - */)) {\n    state.lastIntValue = 0x2D; /* - */\n    return true\n  }\n\n  if (!state.switchU && state.eat(0x63 /* c */)) {\n    if (this.regexp_eatClassControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  return (\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\npp$9.regexp_eatClassControlLetter = function(state) {\n  var ch = state.current();\n  if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$9.regexp_eatHexEscapeSequence = function(state) {\n  var start = state.pos;\n  if (state.eat(0x78 /* x */)) {\n    if (this.regexp_eatFixedHexDigits(state, 2)) {\n      return true\n    }\n    if (state.switchU) {\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\npp$9.regexp_eatDecimalDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isDecimalDigit(ch = state.current())) {\n    state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isDecimalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\npp$9.regexp_eatHexDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isHexDigit(ch = state.current())) {\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isHexDigit(ch) {\n  return (\n    (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||\n    (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)\n  )\n}\nfunction hexToInt(ch) {\n  if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {\n    return 10 + (ch - 0x41 /* A */)\n  }\n  if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {\n    return 10 + (ch - 0x61 /* a */)\n  }\n  return ch - 0x30 /* 0 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n// Allows only 0-377(octal) i.e. 0-255(decimal).\npp$9.regexp_eatLegacyOctalEscapeSequence = function(state) {\n  if (this.regexp_eatOctalDigit(state)) {\n    var n1 = state.lastIntValue;\n    if (this.regexp_eatOctalDigit(state)) {\n      var n2 = state.lastIntValue;\n      if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {\n        state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n      } else {\n        state.lastIntValue = n1 * 8 + n2;\n      }\n    } else {\n      state.lastIntValue = n1;\n    }\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\npp$9.regexp_eatOctalDigit = function(state) {\n  var ch = state.current();\n  if (isOctalDigit(ch)) {\n    state.lastIntValue = ch - 0x30; /* 0 */\n    state.advance();\n    return true\n  }\n  state.lastIntValue = 0;\n  return false\n};\nfunction isOctalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$9.regexp_eatFixedHexDigits = function(state, length) {\n  var start = state.pos;\n  state.lastIntValue = 0;\n  for (var i = 0; i < length; ++i) {\n    var ch = state.current();\n    if (!isHexDigit(ch)) {\n      state.pos = start;\n      return false\n    }\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return true\n};\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = function Token(p) {\n  this.type = p.type;\n  this.value = p.value;\n  this.start = p.start;\n  this.end = p.end;\n  if (p.options.locations)\n    { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }\n  if (p.options.ranges)\n    { this.range = [p.start, p.end]; }\n};\n\n// ## Tokenizer\n\nvar pp$8 = Parser.prototype;\n\n// Move to the next token\n\npp$8.next = function() {\n  if (this.options.onToken)\n    { this.options.onToken(new Token(this)); }\n\n  this.lastTokEnd = this.end;\n  this.lastTokStart = this.start;\n  this.lastTokEndLoc = this.endLoc;\n  this.lastTokStartLoc = this.startLoc;\n  this.nextToken();\n};\n\npp$8.getToken = function() {\n  this.next();\n  return new Token(this)\n};\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\")\n  { pp$8[Symbol.iterator] = function() {\n    var this$1 = this;\n\n    return {\n      next: function () {\n        var token = this$1.getToken();\n        return {\n          done: token.type === types.eof,\n          value: token\n        }\n      }\n    }\n  }; }\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\npp$8.curContext = function() {\n  return this.context[this.context.length - 1]\n};\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp$8.nextToken = function() {\n  var curContext = this.curContext();\n  if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }\n\n  this.start = this.pos;\n  if (this.options.locations) { this.startLoc = this.curPosition(); }\n  if (this.pos >= this.input.length) { return this.finishToken(types.eof) }\n\n  if (curContext.override) { return curContext.override(this) }\n  else { this.readToken(this.fullCharCodeAtPos()); }\n};\n\npp$8.readToken = function(code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n    { return this.readWord() }\n\n  return this.getTokenFromCode(code)\n};\n\npp$8.fullCharCodeAtPos = function() {\n  var code = this.input.charCodeAt(this.pos);\n  if (code <= 0xd7ff || code >= 0xe000) { return code }\n  var next = this.input.charCodeAt(this.pos + 1);\n  return (code << 10) + next - 0x35fdc00\n};\n\npp$8.skipBlockComment = function() {\n  var this$1 = this;\n\n  var startLoc = this.options.onComment && this.curPosition();\n  var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);\n  if (end === -1) { this.raise(this.pos - 2, \"Unterminated comment\"); }\n  this.pos = end + 2;\n  if (this.options.locations) {\n    lineBreakG.lastIndex = start;\n    var match;\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n      ++this$1.curLine;\n      this$1.lineStart = match.index + match[0].length;\n    }\n  }\n  if (this.options.onComment)\n    { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\npp$8.skipLineComment = function(startSkip) {\n  var this$1 = this;\n\n  var start = this.pos;\n  var startLoc = this.options.onComment && this.curPosition();\n  var ch = this.input.charCodeAt(this.pos += startSkip);\n  while (this.pos < this.input.length && !isNewLine(ch)) {\n    ch = this$1.input.charCodeAt(++this$1.pos);\n  }\n  if (this.options.onComment)\n    { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp$8.skipSpace = function() {\n  var this$1 = this;\n\n  loop: while (this.pos < this.input.length) {\n    var ch = this$1.input.charCodeAt(this$1.pos);\n    switch (ch) {\n    case 32: case 160: // ' '\n      ++this$1.pos;\n      break\n    case 13:\n      if (this$1.input.charCodeAt(this$1.pos + 1) === 10) {\n        ++this$1.pos;\n      }\n    case 10: case 8232: case 8233:\n      ++this$1.pos;\n      if (this$1.options.locations) {\n        ++this$1.curLine;\n        this$1.lineStart = this$1.pos;\n      }\n      break\n    case 47: // '/'\n      switch (this$1.input.charCodeAt(this$1.pos + 1)) {\n      case 42: // '*'\n        this$1.skipBlockComment();\n        break\n      case 47:\n        this$1.skipLineComment(2);\n        break\n      default:\n        break loop\n      }\n      break\n    default:\n      if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n        ++this$1.pos;\n      } else {\n        break loop\n      }\n    }\n  }\n};\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp$8.finishToken = function(type, val) {\n  this.end = this.pos;\n  if (this.options.locations) { this.endLoc = this.curPosition(); }\n  var prevType = this.type;\n  this.type = type;\n  this.value = val;\n\n  this.updateContext(prevType);\n};\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp$8.readToken_dot = function() {\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next >= 48 && next <= 57) { return this.readNumber(true) }\n  var next2 = this.input.charCodeAt(this.pos + 2);\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n    this.pos += 3;\n    return this.finishToken(types.ellipsis)\n  } else {\n    ++this.pos;\n    return this.finishToken(types.dot)\n  }\n};\n\npp$8.readToken_slash = function() { // '/'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (this.exprAllowed) { ++this.pos; return this.readRegexp() }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.slash, 1)\n};\n\npp$8.readToken_mult_modulo_exp = function(code) { // '%*'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  var tokentype = code === 42 ? types.star : types.modulo;\n\n  // exponentiation operator ** and **=\n  if (this.options.ecmaVersion >= 7 && code == 42 && next === 42) {\n    ++size;\n    tokentype = types.starstar;\n    next = this.input.charCodeAt(this.pos + 2);\n  }\n\n  if (next === 61) { return this.finishOp(types.assign, size + 1) }\n  return this.finishOp(tokentype, size)\n};\n\npp$8.readToken_pipe_amp = function(code) { // '|&'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) { return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2) }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1)\n};\n\npp$8.readToken_caret = function() { // '^'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.bitwiseXOR, 1)\n};\n\npp$8.readToken_plus_min = function(code) { // '+-'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (next == 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) == 62 &&\n        (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n      // A `--\x3e` line comment\n      this.skipLineComment(3);\n      this.skipSpace();\n      return this.nextToken()\n    }\n    return this.finishOp(types.incDec, 2)\n  }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.plusMin, 1)\n};\n\npp$8.readToken_lt_gt = function(code) { // '<>'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n    if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types.assign, size + 1) }\n    return this.finishOp(types.bitShift, size)\n  }\n  if (next == 33 && code == 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) == 45 &&\n      this.input.charCodeAt(this.pos + 3) == 45) {\n    // `\x3c!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4);\n    this.skipSpace();\n    return this.nextToken()\n  }\n  if (next === 61) { size = 2; }\n  return this.finishOp(types.relational, size)\n};\n\npp$8.readToken_eq_excl = function(code) { // '=!'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n    this.pos += 2;\n    return this.finishToken(types.arrow)\n  }\n  return this.finishOp(code === 61 ? types.eq : types.prefix, 1)\n};\n\npp$8.getTokenFromCode = function(code) {\n  switch (code) {\n  // The interpretation of a dot depends on whether it is followed\n  // by a digit or another two dots.\n  case 46: // '.'\n    return this.readToken_dot()\n\n  // Punctuation tokens.\n  case 40: ++this.pos; return this.finishToken(types.parenL)\n  case 41: ++this.pos; return this.finishToken(types.parenR)\n  case 59: ++this.pos; return this.finishToken(types.semi)\n  case 44: ++this.pos; return this.finishToken(types.comma)\n  case 91: ++this.pos; return this.finishToken(types.bracketL)\n  case 93: ++this.pos; return this.finishToken(types.bracketR)\n  case 123: ++this.pos; return this.finishToken(types.braceL)\n  case 125: ++this.pos; return this.finishToken(types.braceR)\n  case 58: ++this.pos; return this.finishToken(types.colon)\n  case 63: ++this.pos; return this.finishToken(types.question)\n\n  case 96: // '`'\n    if (this.options.ecmaVersion < 6) { break }\n    ++this.pos;\n    return this.finishToken(types.backQuote)\n\n  case 48: // '0'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number\n    if (this.options.ecmaVersion >= 6) {\n      if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number\n      if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number\n    }\n\n  // Anything else beginning with a digit is an integer, octal\n  // number, or float.\n  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n    return this.readNumber(false)\n\n  // Quotes produce strings.\n  case 34: case 39: // '\"', \"'\"\n    return this.readString(code)\n\n  // Operators are parsed inline in tiny state machines. '=' (61) is\n  // often referred to. `finishOp` simply skips the amount of\n  // characters it is given as second argument, and returns a token\n  // of the type given by its first argument.\n\n  case 47: // '/'\n    return this.readToken_slash()\n\n  case 37: case 42: // '%*'\n    return this.readToken_mult_modulo_exp(code)\n\n  case 124: case 38: // '|&'\n    return this.readToken_pipe_amp(code)\n\n  case 94: // '^'\n    return this.readToken_caret()\n\n  case 43: case 45: // '+-'\n    return this.readToken_plus_min(code)\n\n  case 60: case 62: // '<>'\n    return this.readToken_lt_gt(code)\n\n  case 61: case 33: // '=!'\n    return this.readToken_eq_excl(code)\n\n  case 126: // '~'\n    return this.finishOp(types.prefix, 1)\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n};\n\npp$8.finishOp = function(type, size) {\n  var str = this.input.slice(this.pos, this.pos + size);\n  this.pos += size;\n  return this.finishToken(type, str)\n};\n\npp$8.readRegexp = function() {\n  var this$1 = this;\n\n  var escaped, inClass, start = this.pos;\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) { this$1.raise(start, \"Unterminated regular expression\"); }\n    var ch = this$1.input.charAt(this$1.pos);\n    if (lineBreak.test(ch)) { this$1.raise(start, \"Unterminated regular expression\"); }\n    if (!escaped) {\n      if (ch === \"[\") { inClass = true; }\n      else if (ch === \"]\" && inClass) { inClass = false; }\n      else if (ch === \"/\" && !inClass) { break }\n      escaped = ch === \"\\\\\";\n    } else { escaped = false; }\n    ++this$1.pos;\n  }\n  var pattern = this.input.slice(start, this.pos);\n  ++this.pos;\n  var flagsStart = this.pos;\n  var flags = this.readWord1();\n  if (this.containsEsc) { this.unexpected(flagsStart); }\n\n  // Validate pattern\n  var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n  state.reset(start, pattern, flags);\n  this.validateRegExpFlags(state);\n  this.validateRegExpPattern(state);\n\n  // Create Literal#value property value.\n  var value = null;\n  try {\n    value = new RegExp(pattern, flags);\n  } catch (e) {\n    // ESTree requires null if it failed to instantiate RegExp object.\n    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n  }\n\n  return this.finishToken(types.regexp, {pattern: pattern, flags: flags, value: value})\n};\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp$8.readInt = function(radix, len) {\n  var this$1 = this;\n\n  var start = this.pos, total = 0;\n  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    var code = this$1.input.charCodeAt(this$1.pos), val = (void 0);\n    if (code >= 97) { val = code - 97 + 10; } // a\n    else if (code >= 65) { val = code - 65 + 10; } // A\n    else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9\n    else { val = Infinity; }\n    if (val >= radix) { break }\n    ++this$1.pos;\n    total = total * radix + val;\n  }\n  if (this.pos === start || len != null && this.pos - start !== len) { return null }\n\n  return total\n};\n\npp$8.readRadixNumber = function(radix) {\n  this.pos += 2; // 0x\n  var val = this.readInt(radix);\n  if (val == null) { this.raise(this.start + 2, \"Expected number in radix \" + radix); }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n  return this.finishToken(types.num, val)\n};\n\n// Read an integer, octal integer, or floating-point number.\n\npp$8.readNumber = function(startsWithDot) {\n  var start = this.pos;\n  if (!startsWithDot && this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n  var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n  if (octal && this.strict) { this.raise(start, \"Invalid number\"); }\n  if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }\n  var next = this.input.charCodeAt(this.pos);\n  if (next === 46 && !octal) { // '.'\n    ++this.pos;\n    this.readInt(10);\n    next = this.input.charCodeAt(this.pos);\n  }\n  if ((next === 69 || next === 101) && !octal) { // 'eE'\n    next = this.input.charCodeAt(++this.pos);\n    if (next === 43 || next === 45) { ++this.pos; } // '+-'\n    if (this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n  }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n\n  var str = this.input.slice(start, this.pos);\n  var val = octal ? parseInt(str, 8) : parseFloat(str);\n  return this.finishToken(types.num, val)\n};\n\n// Read a string value, interpreting backslash-escapes.\n\npp$8.readCodePoint = function() {\n  var ch = this.input.charCodeAt(this.pos), code;\n\n  if (ch === 123) { // '{'\n    if (this.options.ecmaVersion < 6) { this.unexpected(); }\n    var codePos = ++this.pos;\n    code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n    ++this.pos;\n    if (code > 0x10FFFF) { this.invalidStringToken(codePos, \"Code point out of bounds\"); }\n  } else {\n    code = this.readHexChar(4);\n  }\n  return code\n};\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) { return String.fromCharCode(code) }\n  code -= 0x10000;\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n}\n\npp$8.readString = function(quote) {\n  var this$1 = this;\n\n  var out = \"\", chunkStart = ++this.pos;\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) { this$1.raise(this$1.start, \"Unterminated string constant\"); }\n    var ch = this$1.input.charCodeAt(this$1.pos);\n    if (ch === quote) { break }\n    if (ch === 92) { // '\\'\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      out += this$1.readEscapedChar(false);\n      chunkStart = this$1.pos;\n    } else {\n      if (isNewLine(ch)) { this$1.raise(this$1.start, \"Unterminated string constant\"); }\n      ++this$1.pos;\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++);\n  return this.finishToken(types.string, out)\n};\n\n// Reads template string tokens.\n\nvar INVALID_TEMPLATE_ESCAPE_ERROR = {};\n\npp$8.tryReadTemplateToken = function() {\n  this.inTemplateElement = true;\n  try {\n    this.readTmplToken();\n  } catch (err) {\n    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\n      this.readInvalidTemplateToken();\n    } else {\n      throw err\n    }\n  }\n\n  this.inTemplateElement = false;\n};\n\npp$8.invalidStringToken = function(position, message) {\n  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\n    throw INVALID_TEMPLATE_ESCAPE_ERROR\n  } else {\n    this.raise(position, message);\n  }\n};\n\npp$8.readTmplToken = function() {\n  var this$1 = this;\n\n  var out = \"\", chunkStart = this.pos;\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) { this$1.raise(this$1.start, \"Unterminated template\"); }\n    var ch = this$1.input.charCodeAt(this$1.pos);\n    if (ch === 96 || ch === 36 && this$1.input.charCodeAt(this$1.pos + 1) === 123) { // '`', '${'\n      if (this$1.pos === this$1.start && (this$1.type === types.template || this$1.type === types.invalidTemplate)) {\n        if (ch === 36) {\n          this$1.pos += 2;\n          return this$1.finishToken(types.dollarBraceL)\n        } else {\n          ++this$1.pos;\n          return this$1.finishToken(types.backQuote)\n        }\n      }\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      return this$1.finishToken(types.template, out)\n    }\n    if (ch === 92) { // '\\'\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      out += this$1.readEscapedChar(true);\n      chunkStart = this$1.pos;\n    } else if (isNewLine(ch)) {\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      ++this$1.pos;\n      switch (ch) {\n      case 13:\n        if (this$1.input.charCodeAt(this$1.pos) === 10) { ++this$1.pos; }\n      case 10:\n        out += \"\\n\";\n        break\n      default:\n        out += String.fromCharCode(ch);\n        break\n      }\n      if (this$1.options.locations) {\n        ++this$1.curLine;\n        this$1.lineStart = this$1.pos;\n      }\n      chunkStart = this$1.pos;\n    } else {\n      ++this$1.pos;\n    }\n  }\n};\n\n// Reads a template token to search for the end, without validating any escape sequences\npp$8.readInvalidTemplateToken = function() {\n  var this$1 = this;\n\n  for (; this.pos < this.input.length; this.pos++) {\n    switch (this$1.input[this$1.pos]) {\n    case \"\\\\\":\n      ++this$1.pos;\n      break\n\n    case \"$\":\n      if (this$1.input[this$1.pos + 1] !== \"{\") {\n        break\n      }\n    // falls through\n\n    case \"`\":\n      return this$1.finishToken(types.invalidTemplate, this$1.input.slice(this$1.start, this$1.pos))\n\n    // no default\n    }\n  }\n  this.raise(this.start, \"Unterminated template\");\n};\n\n// Used to read escaped characters\n\npp$8.readEscapedChar = function(inTemplate) {\n  var ch = this.input.charCodeAt(++this.pos);\n  ++this.pos;\n  switch (ch) {\n  case 110: return \"\\n\" // 'n' -> '\\n'\n  case 114: return \"\\r\" // 'r' -> '\\r'\n  case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n  case 117: return codePointToString(this.readCodePoint()) // 'u'\n  case 116: return \"\\t\" // 't' -> '\\t'\n  case 98: return \"\\b\" // 'b' -> '\\b'\n  case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n  case 102: return \"\\f\" // 'f' -> '\\f'\n  case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\\r\\n'\n  case 10: // ' \\n'\n    if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }\n    return \"\"\n  default:\n    if (ch >= 48 && ch <= 55) {\n      var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n      var octal = parseInt(octalStr, 8);\n      if (octal > 255) {\n        octalStr = octalStr.slice(0, -1);\n        octal = parseInt(octalStr, 8);\n      }\n      this.pos += octalStr.length - 1;\n      ch = this.input.charCodeAt(this.pos);\n      if ((octalStr !== \"0\" || ch == 56 || ch == 57) && (this.strict || inTemplate)) {\n        this.invalidStringToken(\n          this.pos - 1 - octalStr.length,\n          inTemplate\n            ? \"Octal literal in template string\"\n            : \"Octal literal in strict mode\"\n        );\n      }\n      return String.fromCharCode(octal)\n    }\n    return String.fromCharCode(ch)\n  }\n};\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp$8.readHexChar = function(len) {\n  var codePos = this.pos;\n  var n = this.readInt(16, len);\n  if (n === null) { this.invalidStringToken(codePos, \"Bad character escape sequence\"); }\n  return n\n};\n\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp$8.readWord1 = function() {\n  var this$1 = this;\n\n  this.containsEsc = false;\n  var word = \"\", first = true, chunkStart = this.pos;\n  var astral = this.options.ecmaVersion >= 6;\n  while (this.pos < this.input.length) {\n    var ch = this$1.fullCharCodeAtPos();\n    if (isIdentifierChar(ch, astral)) {\n      this$1.pos += ch <= 0xffff ? 1 : 2;\n    } else if (ch === 92) { // \"\\\"\n      this$1.containsEsc = true;\n      word += this$1.input.slice(chunkStart, this$1.pos);\n      var escStart = this$1.pos;\n      if (this$1.input.charCodeAt(++this$1.pos) != 117) // \"u\"\n        { this$1.invalidStringToken(this$1.pos, \"Expecting Unicode escape sequence \\\\uXXXX\"); }\n      ++this$1.pos;\n      var esc = this$1.readCodePoint();\n      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n        { this$1.invalidStringToken(escStart, \"Invalid Unicode escape\"); }\n      word += codePointToString(esc);\n      chunkStart = this$1.pos;\n    } else {\n      break\n    }\n    first = false;\n  }\n  return word + this.input.slice(chunkStart, this.pos)\n};\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp$8.readWord = function() {\n  var word = this.readWord1();\n  var type = types.name;\n  if (this.keywords.test(word)) {\n    if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + word); }\n    type = keywords$1[word];\n  }\n  return this.finishToken(type, word)\n};\n\n// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n//\n// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n// various contributors and released under an MIT license.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/acornjs/acorn.git\n//\n// Please use the [github bug tracker][ghbt] to report issues.\n//\n// [ghbt]: https://github.com/acornjs/acorn/issues\n//\n// This file defines the main parser interface. The library also comes\n// with a [error-tolerant parser][dammit] and an\n// [abstract syntax tree walker][walk], defined in other files.\n//\n// [dammit]: acorn_loose.js\n// [walk]: util/walk.js\n\nvar version = \"5.5.3\";\n\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nfunction parse(input, options) {\n  return new Parser(options, input).parse()\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nfunction parseExpressionAt(input, pos, options) {\n  var p = new Parser(options, input, pos);\n  p.nextToken();\n  return p.parseExpression()\n}\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\nfunction tokenizer(input, options) {\n  return new Parser(options, input)\n}\n\n// This is a terrible kludge to support the existing, pre-ES6\n// interface where the loose parser module retroactively adds exports\n// to this module.\nvar parse_dammit;\nvar LooseParser;\nvar pluginsLoose; // eslint-disable-line camelcase\nfunction addLooseExports(parse, Parser$$1, plugins$$1) {\n  parse_dammit = parse; // eslint-disable-line camelcase\n  LooseParser = Parser$$1;\n  pluginsLoose = plugins$$1;\n}\n\n\nvar acorn = Object.freeze({\n\tversion: version,\n\tparse: parse,\n\tparseExpressionAt: parseExpressionAt,\n\ttokenizer: tokenizer,\n\tget parse_dammit () { return parse_dammit; },\n\tget LooseParser () { return LooseParser; },\n\tget pluginsLoose () { return pluginsLoose; },\n\taddLooseExports: addLooseExports,\n\tParser: Parser,\n\tplugins: plugins,\n\tdefaultOptions: defaultOptions,\n\tPosition: Position,\n\tSourceLocation: SourceLocation,\n\tgetLineInfo: getLineInfo,\n\tNode: Node,\n\tTokenType: TokenType,\n\ttokTypes: types,\n\tkeywordTypes: keywords$1,\n\tTokContext: TokContext,\n\ttokContexts: types$1,\n\tisIdentifierChar: isIdentifierChar,\n\tisIdentifierStart: isIdentifierStart,\n\tToken: Token,\n\tisNewLine: isNewLine,\n\tlineBreak: lineBreak,\n\tlineBreakG: lineBreakG,\n\tnonASCIIwhitespace: nonASCIIwhitespace\n});\n\nconst literals = new Map([['true', true], ['false', false], ['null', null]]);\nfunction readExpression(parser) {\n    const start = parser.index;\n    const name = parser.readUntil(parser.v2 ? /\\s*}/ : /\\s*}}/);\n    if (name && /^[a-z]+$/.test(name)) {\n        const end = start + name.length;\n        if (literals.has(name)) {\n            return {\n                type: 'Literal',\n                start,\n                end,\n                value: literals.get(name),\n                raw: name,\n            };\n        }\n        return {\n            type: 'Identifier',\n            start,\n            end: start + name.length,\n            name,\n        };\n    }\n    parser.index = start;\n    try {\n        const node = parseExpressionAt(parser.template, parser.index, {\n            ecmaVersion: 9,\n            preserveParens: true,\n        });\n        parser.index = node.end;\n        return node;\n    }\n    catch (err) {\n        parser.acornError(err);\n    }\n}\n\n/* eslint-disable no-underscore-dangle */\n\nfunction injectDynamicImport(acorn) {\n  const tt = acorn.tokTypes;\n\n  // NOTE: This allows `yield import()` to parse correctly.\n  tt._import.startsExpr = true;\n\n  function parseDynamicImport() {\n    const node = this.startNode();\n    this.next();\n    if (this.type !== tt.parenL) {\n      this.unexpected();\n    }\n    return this.finishNode(node, 'Import');\n  }\n\n  function peekNext() {\n    return this.input[this.pos];\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  acorn.plugins.dynamicImport = function dynamicImportPlugin(instance) {\n    instance.extend('parseStatement', nextMethod => (\n      function parseStatement(...args) {\n        const node = this.startNode();\n        if (this.type === tt._import) {\n          const nextToken = peekNext.call(this);\n          if (nextToken === tt.parenL.label) {\n            const expr = this.parseExpression();\n            return this.parseExpressionStatement(node, expr);\n          }\n        }\n\n        return nextMethod.apply(this, args);\n      }\n    ));\n\n    instance.extend('parseExprAtom', nextMethod => (\n      function parseExprAtom(refDestructuringErrors) {\n        if (this.type === tt._import) {\n          return parseDynamicImport.call(this);\n        }\n        return nextMethod.call(this, refDestructuringErrors);\n      }\n    ));\n  };\n\n  return acorn;\n}\n\nfunction repeat(str, i) {\n    let result = '';\n    while (i--)\n        result += str;\n    return result;\n}\n\nconst scriptClosingTag = '<\/script>';\ninjectDynamicImport(acorn);\nfunction readScript(parser, start, attributes) {\n    const scriptStart = parser.index;\n    const scriptEnd = parser.template.indexOf(scriptClosingTag, scriptStart);\n    if (scriptEnd === -1)\n        parser.error({\n            code: `unclosed-script`,\n            message: `<script> must have a closing tag`\n        });\n    const source = repeat(' ', scriptStart) + parser.template.slice(scriptStart, scriptEnd);\n    parser.index = scriptEnd + scriptClosingTag.length;\n    let ast;\n    try {\n        ast = parse(source, {\n            ecmaVersion: 9,\n            sourceType: 'module',\n            plugins: {\n                dynamicImport: true\n            }\n        });\n    }\n    catch (err) {\n        parser.acornError(err);\n    }\n    if (!ast.body.length)\n        return null;\n    ast.start = scriptStart;\n    return {\n        start,\n        end: parser.index,\n        attributes,\n        content: ast,\n    };\n}\n\nvar MAX_LINE_LENGTH = 100;\nvar OFFSET_CORRECTION = 60;\nvar TAB_REPLACEMENT = '    ';\n\nfunction sourceFragment(error, extraLines) {\n    function processLines(start, end) {\n        return lines.slice(start, end).map(function(line, idx) {\n            var num = String(start + idx + 1);\n\n            while (num.length < maxNumLength) {\n                num = ' ' + num;\n            }\n\n            return num + ' |' + line;\n        }).join('\\n');\n    }\n\n    var lines = error.source.split(/\\n|\\r\\n?|\\f/);\n    var line = error.line;\n    var column = error.column;\n    var startLine = Math.max(1, line - extraLines) - 1;\n    var endLine = Math.min(line + extraLines, lines.length + 1);\n    var maxNumLength = Math.max(4, String(endLine).length) + 1;\n    var cutLeft = 0;\n\n    // correct column according to replaced tab before column\n    column += (TAB_REPLACEMENT.length - 1) * (lines[line - 1].substr(0, column - 1).match(/\\t/g) || []).length;\n\n    if (column > MAX_LINE_LENGTH) {\n        cutLeft = column - OFFSET_CORRECTION + 3;\n        column = OFFSET_CORRECTION - 2;\n    }\n\n    for (var i = startLine; i <= endLine; i++) {\n        if (i >= 0 && i < lines.length) {\n            lines[i] = lines[i].replace(/\\t/g, TAB_REPLACEMENT);\n            lines[i] =\n                (cutLeft > 0 && lines[i].length > cutLeft ? '\\u2026' : '') +\n                lines[i].substr(cutLeft, MAX_LINE_LENGTH - 2) +\n                (lines[i].length > cutLeft + MAX_LINE_LENGTH - 1 ? '\\u2026' : '');\n        }\n    }\n\n    return [\n        processLines(startLine, line),\n        new Array(column + maxNumLength + 2).join('-') + '^',\n        processLines(line, endLine)\n    ].join('\\n');\n}\n\nvar CssSyntaxError = function(message, source, offset, line, column) {\n    // some VMs prevent setting line/column otherwise (iOS Safari 10 even throw an exception)\n    var error = Object.create(SyntaxError.prototype);\n\n    error.name = 'CssSyntaxError';\n    error.message = message;\n    error.stack = (new Error().stack || '').replace(/^.+\\n/, error.name + ': ' + error.message + '\\n');\n    error.source = source;\n    error.offset = offset;\n    error.line = line;\n    error.column = column;\n\n    error.sourceFragment = function(extraLines) {\n        return sourceFragment(error, isNaN(extraLines) ? 0 : extraLines);\n    };\n    Object.defineProperty(error, 'formattedMessage', {\n        get: function() {\n            return (\n                'Parse error: ' + error.message + '\\n' +\n                sourceFragment(error, 2)\n            );\n        }\n    });\n\n    // for backward capability\n    error.parseError = {\n        offset: offset,\n        line: line,\n        column: column\n    };\n\n    return error;\n};\n\nvar error = CssSyntaxError;\n\n// token types (note: value shouldn't intersect with used char codes)\nvar WHITESPACE = 1;\nvar IDENTIFIER = 2;\nvar NUMBER = 3;\nvar STRING = 4;\nvar COMMENT = 5;\nvar PUNCTUATOR = 6;\nvar CDO = 7;\nvar CDC = 8;\nvar ATRULE = 14;\nvar FUNCTION = 15;\nvar URL = 16;\nvar RAW = 17;\n\nvar TAB = 9;\nvar N = 10;\nvar F = 12;\nvar R = 13;\nvar SPACE = 32;\n\nvar TYPE = {\n    WhiteSpace:   WHITESPACE,\n    Identifier:   IDENTIFIER,\n    Number:           NUMBER,\n    String:           STRING,\n    Comment:         COMMENT,\n    Punctuator:   PUNCTUATOR,\n    CDO:                 CDO,\n    CDC:                 CDC,\n    Atrule:           ATRULE,\n    Function:       FUNCTION,\n    Url:                 URL,\n    Raw:                 RAW,\n\n    ExclamationMark:      33,  // !\n    QuotationMark:        34,  // \"\n    NumberSign:           35,  // #\n    DollarSign:           36,  // $\n    PercentSign:          37,  // %\n    Ampersand:            38,  // &\n    Apostrophe:           39,  // '\n    LeftParenthesis:      40,  // (\n    RightParenthesis:     41,  // )\n    Asterisk:             42,  // *\n    PlusSign:             43,  // +\n    Comma:                44,  // ,\n    HyphenMinus:          45,  // -\n    FullStop:             46,  // .\n    Solidus:              47,  // /\n    Colon:                58,  // :\n    Semicolon:            59,  // ;\n    LessThanSign:         60,  // <\n    EqualsSign:           61,  // =\n    GreaterThanSign:      62,  // >\n    QuestionMark:         63,  // ?\n    CommercialAt:         64,  // @\n    LeftSquareBracket:    91,  // [\n    Backslash:            92,  // \\\n    RightSquareBracket:   93,  // ]\n    CircumflexAccent:     94,  // ^\n    LowLine:              95,  // _\n    GraveAccent:          96,  // `\n    LeftCurlyBracket:    123,  // {\n    VerticalLine:        124,  // |\n    RightCurlyBracket:   125,  // }\n    Tilde:               126   // ~\n};\n\nvar NAME = Object.keys(TYPE).reduce(function(result, key) {\n    result[TYPE[key]] = key;\n    return result;\n}, {});\n\n// https://drafts.csswg.org/css-syntax/#tokenizer-definitions\n// > non-ASCII code point\n// >   A code point with a value equal to or greater than U+0080 <control>\n// > name-start code point\n// >   A letter, a non-ASCII code point, or U+005F LOW LINE (_).\n// > name code point\n// >   A name-start code point, a digit, or U+002D HYPHEN-MINUS (-)\n// That means only ASCII code points has a special meaning and we a maps for 0..127 codes only\nvar SafeUint32Array = typeof Uint32Array !== 'undefined' ? Uint32Array : Array; // fallback on Array when TypedArray is not supported\nvar SYMBOL_TYPE = new SafeUint32Array(0x80);\nvar PUNCTUATION = new SafeUint32Array(0x80);\nvar STOP_URL_RAW = new SafeUint32Array(0x80);\n\nfor (var i = 0; i < SYMBOL_TYPE.length; i++) {\n    SYMBOL_TYPE[i] = IDENTIFIER;\n}\n\n// fill categories\n[\n    TYPE.ExclamationMark,    // !\n    TYPE.QuotationMark,      // \"\n    TYPE.NumberSign,         // #\n    TYPE.DollarSign,         // $\n    TYPE.PercentSign,        // %\n    TYPE.Ampersand,          // &\n    TYPE.Apostrophe,         // '\n    TYPE.LeftParenthesis,    // (\n    TYPE.RightParenthesis,   // )\n    TYPE.Asterisk,           // *\n    TYPE.PlusSign,           // +\n    TYPE.Comma,              // ,\n    TYPE.HyphenMinus,        // -\n    TYPE.FullStop,           // .\n    TYPE.Solidus,            // /\n    TYPE.Colon,              // :\n    TYPE.Semicolon,          // ;\n    TYPE.LessThanSign,       // <\n    TYPE.EqualsSign,         // =\n    TYPE.GreaterThanSign,    // >\n    TYPE.QuestionMark,       // ?\n    TYPE.CommercialAt,       // @\n    TYPE.LeftSquareBracket,  // [\n    // TYPE.Backslash,          // \\\n    TYPE.RightSquareBracket, // ]\n    TYPE.CircumflexAccent,   // ^\n    // TYPE.LowLine,            // _\n    TYPE.GraveAccent,        // `\n    TYPE.LeftCurlyBracket,   // {\n    TYPE.VerticalLine,       // |\n    TYPE.RightCurlyBracket,  // }\n    TYPE.Tilde               // ~\n].forEach(function(key) {\n    SYMBOL_TYPE[Number(key)] = PUNCTUATOR;\n    PUNCTUATION[Number(key)] = PUNCTUATOR;\n});\n\nfor (var i = 48; i <= 57; i++) {\n    SYMBOL_TYPE[i] = NUMBER;\n}\n\nSYMBOL_TYPE[SPACE] = WHITESPACE;\nSYMBOL_TYPE[TAB] = WHITESPACE;\nSYMBOL_TYPE[N] = WHITESPACE;\nSYMBOL_TYPE[R] = WHITESPACE;\nSYMBOL_TYPE[F] = WHITESPACE;\n\nSYMBOL_TYPE[TYPE.Apostrophe] = STRING;\nSYMBOL_TYPE[TYPE.QuotationMark] = STRING;\n\nSTOP_URL_RAW[SPACE] = 1;\nSTOP_URL_RAW[TAB] = 1;\nSTOP_URL_RAW[N] = 1;\nSTOP_URL_RAW[R] = 1;\nSTOP_URL_RAW[F] = 1;\nSTOP_URL_RAW[TYPE.Apostrophe] = 1;\nSTOP_URL_RAW[TYPE.QuotationMark] = 1;\nSTOP_URL_RAW[TYPE.LeftParenthesis] = 1;\nSTOP_URL_RAW[TYPE.RightParenthesis] = 1;\n\n// whitespace is punctuation ...\nPUNCTUATION[SPACE] = PUNCTUATOR;\nPUNCTUATION[TAB] = PUNCTUATOR;\nPUNCTUATION[N] = PUNCTUATOR;\nPUNCTUATION[R] = PUNCTUATOR;\nPUNCTUATION[F] = PUNCTUATOR;\n// ... hyper minus is not\nPUNCTUATION[TYPE.HyphenMinus] = 0;\n\nvar _const = {\n    TYPE: TYPE,\n    NAME: NAME,\n\n    SYMBOL_TYPE: SYMBOL_TYPE,\n    PUNCTUATION: PUNCTUATION,\n    STOP_URL_RAW: STOP_URL_RAW\n};\n\nvar PUNCTUATION$1 = _const.PUNCTUATION;\nvar STOP_URL_RAW$1 = _const.STOP_URL_RAW;\nvar TYPE$1 = _const.TYPE;\nvar FULLSTOP = TYPE$1.FullStop;\nvar PLUSSIGN = TYPE$1.PlusSign;\nvar HYPHENMINUS = TYPE$1.HyphenMinus;\nvar PUNCTUATOR$1 = TYPE$1.Punctuator;\nvar TAB$1 = 9;\nvar N$1 = 10;\nvar F$1 = 12;\nvar R$1 = 13;\nvar SPACE$1 = 32;\nvar BACK_SLASH = 92;\nvar E = 101; // 'e'.charCodeAt(0)\n\nfunction firstCharOffset(source) {\n    // detect BOM (https://en.wikipedia.org/wiki/Byte_order_mark)\n    if (source.charCodeAt(0) === 0xFEFF ||  // UTF-16BE\n        source.charCodeAt(0) === 0xFFFE) {  // UTF-16LE\n        return 1;\n    }\n\n    return 0;\n}\n\nfunction isHex(code) {\n    return (code >= 48 && code <= 57) || // 0 .. 9\n           (code >= 65 && code <= 70) || // A .. F\n           (code >= 97 && code <= 102);  // a .. f\n}\n\nfunction isNumber(code) {\n    return code >= 48 && code <= 57;\n}\n\nfunction isNewline(source, offset, code) {\n    if (code === N$1 || code === F$1 || code === R$1) {\n        if (code === R$1 && offset + 1 < source.length && source.charCodeAt(offset + 1) === N$1) {\n            return 2;\n        }\n\n        return 1;\n    }\n\n    return 0;\n}\n\nfunction cmpChar(testStr, offset, referenceCode) {\n    var code = testStr.charCodeAt(offset);\n\n    // code.toLowerCase()\n    if (code >= 65 && code <= 90) {\n        code = code | 32;\n    }\n\n    return code === referenceCode;\n}\n\nfunction cmpStr(testStr, start, end, referenceStr) {\n    if (end - start !== referenceStr.length) {\n        return false;\n    }\n\n    if (start < 0 || end > testStr.length) {\n        return false;\n    }\n\n    for (var i = start; i < end; i++) {\n        var testCode = testStr.charCodeAt(i);\n        var refCode = referenceStr.charCodeAt(i - start);\n\n        // testStr[i].toLowerCase()\n        if (testCode >= 65 && testCode <= 90) {\n            testCode = testCode | 32;\n        }\n\n        if (testCode !== refCode) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction endsWith(testStr, referenceStr) {\n    return cmpStr(testStr, testStr.length - referenceStr.length, testStr.length, referenceStr);\n}\n\nfunction findLastNonSpaceLocation(scanner) {\n    for (var i = scanner.source.length - 1; i >= 0; i--) {\n        var code = scanner.source.charCodeAt(i);\n\n        if (code !== SPACE$1 && code !== TAB$1 && code !== R$1 && code !== N$1 && code !== F$1) {\n            break;\n        }\n    }\n\n    return scanner.getLocation(i + 1);\n}\n\nfunction findWhiteSpaceEnd(source, offset) {\n    for (; offset < source.length; offset++) {\n        var code = source.charCodeAt(offset);\n\n        if (code !== SPACE$1 && code !== TAB$1 && code !== R$1 && code !== N$1 && code !== F$1) {\n            break;\n        }\n    }\n\n    return offset;\n}\n\nfunction findCommentEnd(source, offset) {\n    var commentEnd = source.indexOf('*/', offset);\n\n    if (commentEnd === -1) {\n        return source.length;\n    }\n\n    return commentEnd + 2;\n}\n\nfunction findStringEnd(source, offset, quote) {\n    for (; offset < source.length; offset++) {\n        var code = source.charCodeAt(offset);\n\n        // TODO: bad string\n        if (code === BACK_SLASH) {\n            offset++;\n        } else if (code === quote) {\n            offset++;\n            break;\n        }\n    }\n\n    return offset;\n}\n\nfunction findDecimalNumberEnd(source, offset) {\n    for (; offset < source.length; offset++) {\n        var code = source.charCodeAt(offset);\n\n        if (code < 48 || code > 57) {  // not a 0 .. 9\n            break;\n        }\n    }\n\n    return offset;\n}\n\nfunction findNumberEnd(source, offset, allowFraction) {\n    var code;\n\n    offset = findDecimalNumberEnd(source, offset);\n\n    // fraction: .\\d+\n    if (allowFraction && offset + 1 < source.length && source.charCodeAt(offset) === FULLSTOP) {\n        code = source.charCodeAt(offset + 1);\n\n        if (isNumber(code)) {\n            offset = findDecimalNumberEnd(source, offset + 1);\n        }\n    }\n\n    // exponent: e[+-]\\d+\n    if (offset + 1 < source.length) {\n        if ((source.charCodeAt(offset) | 32) === E) { // case insensitive check for `e`\n            code = source.charCodeAt(offset + 1);\n\n            if (code === PLUSSIGN || code === HYPHENMINUS) {\n                if (offset + 2 < source.length) {\n                    code = source.charCodeAt(offset + 2);\n                }\n            }\n\n            if (isNumber(code)) {\n                offset = findDecimalNumberEnd(source, offset + 2);\n            }\n        }\n    }\n\n    return offset;\n}\n\n// skip escaped unicode sequence that can ends with space\n// [0-9a-f]{1,6}(\\r\\n|[ \\n\\r\\t\\f])?\nfunction findEscaseEnd(source, offset) {\n    for (var i = 0; i < 7 && offset + i < source.length; i++) {\n        var code = source.charCodeAt(offset + i);\n\n        if (i !== 6 && isHex(code)) {\n            continue;\n        }\n\n        if (i > 0) {\n            offset += i - 1 + isNewline(source, offset + i, code);\n            if (code === SPACE$1 || code === TAB$1) {\n                offset++;\n            }\n        }\n\n        break;\n    }\n\n    return offset;\n}\n\nfunction findIdentifierEnd(source, offset) {\n    for (; offset < source.length; offset++) {\n        var code = source.charCodeAt(offset);\n\n        if (code === BACK_SLASH) {\n            offset = findEscaseEnd(source, offset + 1);\n        } else if (code < 0x80 && PUNCTUATION$1[code] === PUNCTUATOR$1) {\n            break;\n        }\n    }\n\n    return offset;\n}\n\nfunction findUrlRawEnd(source, offset) {\n    for (; offset < source.length; offset++) {\n        var code = source.charCodeAt(offset);\n\n        if (code === BACK_SLASH) {\n            offset = findEscaseEnd(source, offset + 1);\n        } else if (code < 0x80 && STOP_URL_RAW$1[code] === 1) {\n            break;\n        }\n    }\n\n    return offset;\n}\n\nvar utils = {\n    firstCharOffset: firstCharOffset,\n\n    isHex: isHex,\n    isNumber: isNumber,\n    isNewline: isNewline,\n\n    cmpChar: cmpChar,\n    cmpStr: cmpStr,\n    endsWith: endsWith,\n\n    findLastNonSpaceLocation: findLastNonSpaceLocation,\n    findWhiteSpaceEnd: findWhiteSpaceEnd,\n    findCommentEnd: findCommentEnd,\n    findStringEnd: findStringEnd,\n    findDecimalNumberEnd: findDecimalNumberEnd,\n    findNumberEnd: findNumberEnd,\n    findEscaseEnd: findEscaseEnd,\n    findIdentifierEnd: findIdentifierEnd,\n    findUrlRawEnd: findUrlRawEnd\n};\n\nvar TYPE$2 = _const.TYPE;\nvar NAME$1 = _const.NAME;\nvar SYMBOL_TYPE$1 = _const.SYMBOL_TYPE;\n\n\nvar firstCharOffset$1 = utils.firstCharOffset;\nvar cmpStr$1 = utils.cmpStr;\nvar isNumber$1 = utils.isNumber;\nvar findLastNonSpaceLocation$1 = utils.findLastNonSpaceLocation;\nvar findWhiteSpaceEnd$1 = utils.findWhiteSpaceEnd;\nvar findCommentEnd$1 = utils.findCommentEnd;\nvar findStringEnd$1 = utils.findStringEnd;\nvar findNumberEnd$1 = utils.findNumberEnd;\nvar findIdentifierEnd$1 = utils.findIdentifierEnd;\nvar findUrlRawEnd$1 = utils.findUrlRawEnd;\n\nvar NULL = 0;\nvar WHITESPACE$1 = TYPE$2.WhiteSpace;\nvar IDENTIFIER$1 = TYPE$2.Identifier;\nvar NUMBER$1 = TYPE$2.Number;\nvar STRING$1 = TYPE$2.String;\nvar COMMENT$1 = TYPE$2.Comment;\nvar PUNCTUATOR$2 = TYPE$2.Punctuator;\nvar CDO$1 = TYPE$2.CDO;\nvar CDC$1 = TYPE$2.CDC;\nvar ATRULE$1 = TYPE$2.Atrule;\nvar FUNCTION$1 = TYPE$2.Function;\nvar URL$1 = TYPE$2.Url;\nvar RAW$1 = TYPE$2.Raw;\n\nvar N$2 = 10;\nvar F$2 = 12;\nvar R$2 = 13;\nvar STAR = TYPE$2.Asterisk;\nvar SLASH = TYPE$2.Solidus;\nvar FULLSTOP$1 = TYPE$2.FullStop;\nvar PLUSSIGN$1 = TYPE$2.PlusSign;\nvar HYPHENMINUS$1 = TYPE$2.HyphenMinus;\nvar GREATERTHANSIGN = TYPE$2.GreaterThanSign;\nvar LESSTHANSIGN = TYPE$2.LessThanSign;\nvar EXCLAMATIONMARK = TYPE$2.ExclamationMark;\nvar COMMERCIALAT = TYPE$2.CommercialAt;\nvar QUOTATIONMARK = TYPE$2.QuotationMark;\nvar APOSTROPHE = TYPE$2.Apostrophe;\nvar LEFTPARENTHESIS = TYPE$2.LeftParenthesis;\nvar RIGHTPARENTHESIS = TYPE$2.RightParenthesis;\nvar LEFTCURLYBRACKET = TYPE$2.LeftCurlyBracket;\nvar RIGHTCURLYBRACKET = TYPE$2.RightCurlyBracket;\nvar LEFTSQUAREBRACKET = TYPE$2.LeftSquareBracket;\nvar RIGHTSQUAREBRACKET = TYPE$2.RightSquareBracket;\n\nvar MIN_BUFFER_SIZE = 16 * 1024;\nvar OFFSET_MASK = 0x00FFFFFF;\nvar TYPE_SHIFT = 24;\nvar SafeUint32Array$1 = typeof Uint32Array !== 'undefined' ? Uint32Array : Array; // fallback on Array when TypedArray is not supported\n\nfunction computeLinesAndColumns(tokenizer, source) {\n    var sourceLength = source.length;\n    var start = firstCharOffset$1(source);\n    var lines = tokenizer.lines;\n    var line = tokenizer.startLine;\n    var columns = tokenizer.columns;\n    var column = tokenizer.startColumn;\n\n    if (lines === null || lines.length < sourceLength + 1) {\n        lines = new SafeUint32Array$1(Math.max(sourceLength + 1024, MIN_BUFFER_SIZE));\n        columns = new SafeUint32Array$1(lines.length);\n    }\n\n    for (var i = start; i < sourceLength; i++) {\n        var code = source.charCodeAt(i);\n\n        lines[i] = line;\n        columns[i] = column++;\n\n        if (code === N$2 || code === R$2 || code === F$2) {\n            if (code === R$2 && i + 1 < sourceLength && source.charCodeAt(i + 1) === N$2) {\n                i++;\n                lines[i] = line;\n                columns[i] = column;\n            }\n\n            line++;\n            column = 1;\n        }\n    }\n\n    lines[i] = line;\n    columns[i] = column;\n\n    tokenizer.linesAnsColumnsComputed = true;\n    tokenizer.lines = lines;\n    tokenizer.columns = columns;\n}\n\nfunction tokenLayout(tokenizer, source, startPos) {\n    var sourceLength = source.length;\n    var offsetAndType = tokenizer.offsetAndType;\n    var balance = tokenizer.balance;\n    var tokenCount = 0;\n    var prevType = 0;\n    var offset = startPos;\n    var anchor = 0;\n    var balanceCloseCode = 0;\n    var balanceStart = 0;\n    var balancePrev = 0;\n\n    if (offsetAndType === null || offsetAndType.length < sourceLength + 1) {\n        offsetAndType = new SafeUint32Array$1(sourceLength + 1024);\n        balance = new SafeUint32Array$1(sourceLength + 1024);\n    }\n\n    while (offset < sourceLength) {\n        var code = source.charCodeAt(offset);\n        var type = code < 0x80 ? SYMBOL_TYPE$1[code] : IDENTIFIER$1;\n\n        balance[tokenCount] = sourceLength;\n\n        switch (type) {\n            case WHITESPACE$1:\n                offset = findWhiteSpaceEnd$1(source, offset + 1);\n                break;\n\n            case PUNCTUATOR$2:\n                switch (code) {\n                    case balanceCloseCode:\n                        balancePrev = balanceStart & OFFSET_MASK;\n                        balanceStart = balance[balancePrev];\n                        balanceCloseCode = balanceStart >> TYPE_SHIFT;\n                        balance[tokenCount] = balancePrev;\n                        balance[balancePrev++] = tokenCount;\n                        for (; balancePrev < tokenCount; balancePrev++) {\n                            if (balance[balancePrev] === sourceLength) {\n                                balance[balancePrev] = tokenCount;\n                            }\n                        }\n                        break;\n\n                    case LEFTSQUAREBRACKET:\n                        balance[tokenCount] = balanceStart;\n                        balanceCloseCode = RIGHTSQUAREBRACKET;\n                        balanceStart = (balanceCloseCode << TYPE_SHIFT) | tokenCount;\n                        break;\n\n                    case LEFTCURLYBRACKET:\n                        balance[tokenCount] = balanceStart;\n                        balanceCloseCode = RIGHTCURLYBRACKET;\n                        balanceStart = (balanceCloseCode << TYPE_SHIFT) | tokenCount;\n                        break;\n\n                    case LEFTPARENTHESIS:\n                        balance[tokenCount] = balanceStart;\n                        balanceCloseCode = RIGHTPARENTHESIS;\n                        balanceStart = (balanceCloseCode << TYPE_SHIFT) | tokenCount;\n                        break;\n                }\n\n                // /*\n                if (code === STAR && prevType === SLASH) {\n                    type = COMMENT$1;\n                    offset = findCommentEnd$1(source, offset + 1);\n                    tokenCount--; // rewrite prev token\n                    break;\n                }\n\n                // edge case for -.123 and +.123\n                if (code === FULLSTOP$1 && (prevType === PLUSSIGN$1 || prevType === HYPHENMINUS$1)) {\n                    if (offset + 1 < sourceLength && isNumber$1(source.charCodeAt(offset + 1))) {\n                        type = NUMBER$1;\n                        offset = findNumberEnd$1(source, offset + 2, false);\n                        tokenCount--; // rewrite prev token\n                        break;\n                    }\n                }\n\n                // \x3c!--\n                if (code === EXCLAMATIONMARK && prevType === LESSTHANSIGN) {\n                    if (offset + 2 < sourceLength &&\n                        source.charCodeAt(offset + 1) === HYPHENMINUS$1 &&\n                        source.charCodeAt(offset + 2) === HYPHENMINUS$1) {\n                        type = CDO$1;\n                        offset = offset + 3;\n                        tokenCount--; // rewrite prev token\n                        break;\n                    }\n                }\n\n                // --\x3e\n                if (code === HYPHENMINUS$1 && prevType === HYPHENMINUS$1) {\n                    if (offset + 1 < sourceLength && source.charCodeAt(offset + 1) === GREATERTHANSIGN) {\n                        type = CDC$1;\n                        offset = offset + 2;\n                        tokenCount--; // rewrite prev token\n                        break;\n                    }\n                }\n\n                // ident(\n                if (code === LEFTPARENTHESIS && prevType === IDENTIFIER$1) {\n                    offset = offset + 1;\n                    tokenCount--; // rewrite prev token\n                    balance[tokenCount] = balance[tokenCount + 1];\n                    balanceStart--;\n\n                    // 4 char length identifier and equal to `url(` (case insensitive)\n                    if (offset - anchor === 4 && cmpStr$1(source, anchor, offset, 'url(')) {\n                        // special case for url() because it can contain any symbols sequence with few exceptions\n                        anchor = findWhiteSpaceEnd$1(source, offset);\n                        code = source.charCodeAt(anchor);\n                        if (code !== LEFTPARENTHESIS &&\n                            code !== RIGHTPARENTHESIS &&\n                            code !== QUOTATIONMARK &&\n                            code !== APOSTROPHE) {\n                            // url(\n                            offsetAndType[tokenCount++] = (URL$1 << TYPE_SHIFT) | offset;\n                            balance[tokenCount] = sourceLength;\n\n                            // ws*\n                            if (anchor !== offset) {\n                                offsetAndType[tokenCount++] = (WHITESPACE$1 << TYPE_SHIFT) | anchor;\n                                balance[tokenCount] = sourceLength;\n                            }\n\n                            // raw\n                            type = RAW$1;\n                            offset = findUrlRawEnd$1(source, anchor);\n                        } else {\n                            type = URL$1;\n                        }\n                    } else {\n                        type = FUNCTION$1;\n                    }\n                    break;\n                }\n\n                type = code;\n                offset = offset + 1;\n                break;\n\n            case NUMBER$1:\n                offset = findNumberEnd$1(source, offset + 1, prevType !== FULLSTOP$1);\n\n                // merge number with a preceding dot, dash or plus\n                if (prevType === FULLSTOP$1 ||\n                    prevType === HYPHENMINUS$1 ||\n                    prevType === PLUSSIGN$1) {\n                    tokenCount--; // rewrite prev token\n                }\n\n                break;\n\n            case STRING$1:\n                offset = findStringEnd$1(source, offset + 1, code);\n                break;\n\n            default:\n                anchor = offset;\n                offset = findIdentifierEnd$1(source, offset);\n\n                // merge identifier with a preceding dash\n                if (prevType === HYPHENMINUS$1) {\n                    // rewrite prev token\n                    tokenCount--;\n                    // restore prev prev token type\n                    // for case @-prefix-ident\n                    prevType = tokenCount === 0 ? 0 : offsetAndType[tokenCount - 1] >> TYPE_SHIFT;\n                }\n\n                if (prevType === COMMERCIALAT) {\n                    // rewrite prev token and change type to <at-keyword-token>\n                    tokenCount--;\n                    type = ATRULE$1;\n                }\n        }\n\n        offsetAndType[tokenCount++] = (type << TYPE_SHIFT) | offset;\n        prevType = type;\n    }\n\n    // finalize arrays\n    offsetAndType[tokenCount] = offset;\n    balance[tokenCount] = sourceLength;\n    while (balanceStart !== 0) {\n        balancePrev = balanceStart & OFFSET_MASK;\n        balanceStart = balance[balancePrev];\n        balance[balancePrev] = sourceLength;\n    }\n\n    tokenizer.offsetAndType = offsetAndType;\n    tokenizer.tokenCount = tokenCount;\n    tokenizer.balance = balance;\n}\n\n//\n// tokenizer\n//\n\nvar Tokenizer = function(source, startOffset, startLine, startColumn) {\n    this.offsetAndType = null;\n    this.balance = null;\n    this.lines = null;\n    this.columns = null;\n\n    this.setSource(source, startOffset, startLine, startColumn);\n};\n\nTokenizer.prototype = {\n    setSource: function(source, startOffset, startLine, startColumn) {\n        var safeSource = String(source || '');\n        var start = firstCharOffset$1(safeSource);\n\n        this.source = safeSource;\n        this.firstCharOffset = start;\n        this.startOffset = typeof startOffset === 'undefined' ? 0 : startOffset;\n        this.startLine = typeof startLine === 'undefined' ? 1 : startLine;\n        this.startColumn = typeof startColumn === 'undefined' ? 1 : startColumn;\n        this.linesAnsColumnsComputed = false;\n\n        this.eof = false;\n        this.currentToken = -1;\n        this.tokenType = 0;\n        this.tokenStart = start;\n        this.tokenEnd = start;\n\n        tokenLayout(this, safeSource, start);\n        this.next();\n    },\n\n    lookupType: function(offset) {\n        offset += this.currentToken;\n\n        if (offset < this.tokenCount) {\n            return this.offsetAndType[offset] >> TYPE_SHIFT;\n        }\n\n        return NULL;\n    },\n    lookupNonWSType: function(offset) {\n        offset += this.currentToken;\n\n        for (var type; offset < this.tokenCount; offset++) {\n            type = this.offsetAndType[offset] >> TYPE_SHIFT;\n\n            if (type !== WHITESPACE$1) {\n                return type;\n            }\n        }\n\n        return NULL;\n    },\n    lookupValue: function(offset, referenceStr) {\n        offset += this.currentToken;\n\n        if (offset < this.tokenCount) {\n            return cmpStr$1(\n                this.source,\n                this.offsetAndType[offset - 1] & OFFSET_MASK,\n                this.offsetAndType[offset] & OFFSET_MASK,\n                referenceStr\n            );\n        }\n\n        return false;\n    },\n    getTokenStart: function(tokenNum) {\n        if (tokenNum === this.currentToken) {\n            return this.tokenStart;\n        }\n\n        if (tokenNum > 0) {\n            return tokenNum < this.tokenCount\n                ? this.offsetAndType[tokenNum - 1] & OFFSET_MASK\n                : this.offsetAndType[this.tokenCount] & OFFSET_MASK;\n        }\n\n        return this.firstCharOffset;\n    },\n    getOffsetExcludeWS: function() {\n        if (this.currentToken > 0) {\n            if ((this.offsetAndType[this.currentToken - 1] >> TYPE_SHIFT) === WHITESPACE$1) {\n                return this.currentToken > 1\n                    ? this.offsetAndType[this.currentToken - 2] & OFFSET_MASK\n                    : this.firstCharOffset;\n            }\n        }\n        return this.tokenStart;\n    },\n    getRawLength: function(startToken, endTokenType1, endTokenType2, includeTokenType2) {\n        var cursor = startToken;\n        var balanceEnd;\n\n        loop:\n        for (; cursor < this.tokenCount; cursor++) {\n            balanceEnd = this.balance[cursor];\n\n            // belance end points to offset before start\n            if (balanceEnd < startToken) {\n                break loop;\n            }\n\n            // check token is stop type\n            switch (this.offsetAndType[cursor] >> TYPE_SHIFT) {\n                case endTokenType1:\n                    break loop;\n\n                case endTokenType2:\n                    if (includeTokenType2) {\n                        cursor++;\n                    }\n                    break loop;\n\n                default:\n                    // fast forward to the end of balanced block\n                    if (this.balance[balanceEnd] === cursor) {\n                        cursor = balanceEnd;\n                    }\n            }\n\n        }\n\n        return cursor - this.currentToken;\n    },\n\n    getTokenValue: function() {\n        return this.source.substring(this.tokenStart, this.tokenEnd);\n    },\n    substrToCursor: function(start) {\n        return this.source.substring(start, this.tokenStart);\n    },\n\n    skipWS: function() {\n        for (var i = this.currentToken, skipTokenCount = 0; i < this.tokenCount; i++, skipTokenCount++) {\n            if ((this.offsetAndType[i] >> TYPE_SHIFT) !== WHITESPACE$1) {\n                break;\n            }\n        }\n\n        if (skipTokenCount > 0) {\n            this.skip(skipTokenCount);\n        }\n    },\n    skipSC: function() {\n        while (this.tokenType === WHITESPACE$1 || this.tokenType === COMMENT$1) {\n            this.next();\n        }\n    },\n    skip: function(tokenCount) {\n        var next = this.currentToken + tokenCount;\n\n        if (next < this.tokenCount) {\n            this.currentToken = next;\n            this.tokenStart = this.offsetAndType[next - 1] & OFFSET_MASK;\n            next = this.offsetAndType[next];\n            this.tokenType = next >> TYPE_SHIFT;\n            this.tokenEnd = next & OFFSET_MASK;\n        } else {\n            this.currentToken = this.tokenCount;\n            this.next();\n        }\n    },\n    next: function() {\n        var next = this.currentToken + 1;\n\n        if (next < this.tokenCount) {\n            this.currentToken = next;\n            this.tokenStart = this.tokenEnd;\n            next = this.offsetAndType[next];\n            this.tokenType = next >> TYPE_SHIFT;\n            this.tokenEnd = next & OFFSET_MASK;\n        } else {\n            this.currentToken = this.tokenCount;\n            this.eof = true;\n            this.tokenType = NULL;\n            this.tokenStart = this.tokenEnd = this.source.length;\n        }\n    },\n\n    eat: function(tokenType) {\n        if (this.tokenType !== tokenType) {\n            var offset = this.tokenStart;\n            var message = NAME$1[tokenType] + ' is expected';\n\n            // tweak message and offset\n            if (tokenType === IDENTIFIER$1) {\n                // when identifier is expected but there is a function or url\n                if (this.tokenType === FUNCTION$1 || this.tokenType === URL$1) {\n                    offset = this.tokenEnd - 1;\n                    message += ' but function found';\n                }\n            } else {\n                // when test type is part of another token show error for current position + 1\n                // e.g. eat(HYPHENMINUS) will fail on \"-foo\", but pointing on \"-\" is odd\n                if (this.source.charCodeAt(this.tokenStart) === tokenType) {\n                    offset = offset + 1;\n                }\n            }\n\n            this.error(message, offset);\n        }\n\n        this.next();\n    },\n    eatNonWS: function(tokenType) {\n        this.skipWS();\n        this.eat(tokenType);\n    },\n\n    consume: function(tokenType) {\n        var value = this.getTokenValue();\n\n        this.eat(tokenType);\n\n        return value;\n    },\n    consumeFunctionName: function() {\n        var name = this.source.substring(this.tokenStart, this.tokenEnd - 1);\n\n        this.eat(FUNCTION$1);\n\n        return name;\n    },\n    consumeNonWS: function(tokenType) {\n        this.skipWS();\n\n        return this.consume(tokenType);\n    },\n\n    expectIdentifier: function(name) {\n        if (this.tokenType !== IDENTIFIER$1 || cmpStr$1(this.source, this.tokenStart, this.tokenEnd, name) === false) {\n            this.error('Identifier `' + name + '` is expected');\n        }\n\n        this.next();\n    },\n\n    getLocation: function(offset, filename) {\n        if (!this.linesAnsColumnsComputed) {\n            computeLinesAndColumns(this, this.source);\n        }\n\n        return {\n            source: filename,\n            offset: this.startOffset + offset,\n            line: this.lines[offset],\n            column: this.columns[offset]\n        };\n    },\n\n    getLocationRange: function(start, end, filename) {\n        if (!this.linesAnsColumnsComputed) {\n            computeLinesAndColumns(this, this.source);\n        }\n\n        return {\n            source: filename,\n            start: {\n                offset: this.startOffset + start,\n                line: this.lines[start],\n                column: this.columns[start]\n            },\n            end: {\n                offset: this.startOffset + end,\n                line: this.lines[end],\n                column: this.columns[end]\n            }\n        };\n    },\n\n    error: function(message, offset) {\n        var location = typeof offset !== 'undefined' && offset < this.source.length\n            ? this.getLocation(offset)\n            : this.eof\n                ? findLastNonSpaceLocation$1(this)\n                : this.getLocation(this.tokenStart);\n\n        throw new error(\n            message || 'Unexpected input',\n            this.source,\n            location.offset,\n            location.line,\n            location.column\n        );\n    },\n\n    dump: function() {\n        var offset = 0;\n\n        return Array.prototype.slice.call(this.offsetAndType, 0, this.tokenCount).map(function(item, idx) {\n            var start = offset;\n            var end = item & OFFSET_MASK;\n\n            offset = end;\n\n            return {\n                idx: idx,\n                type: NAME$1[item >> TYPE_SHIFT],\n                chunk: this.source.substring(start, end),\n                balance: this.balance[idx]\n            };\n        }, this);\n    }\n};\n\n// extend with error class\nTokenizer.CssSyntaxError = error;\n\n// extend tokenizer with constants\nObject.keys(_const).forEach(function(key) {\n    Tokenizer[key] = _const[key];\n});\n\n// extend tokenizer with static methods from utils\nObject.keys(utils).forEach(function(key) {\n    Tokenizer[key] = utils[key];\n});\n\n// warm up tokenizer to elimitate code branches that never execute\n// fix soft deoptimizations (insufficient type feedback)\nnew Tokenizer('\\n\\r\\r\\n\\f\x3c!----\x3e//\"\"\\'\\'/*\\r\\n\\f*/1a;.\\\\31\\t\\+2{url(a);func();+1.2e3 -.4e-5 .6e+7}').getLocation();\n\nvar Tokenizer_1 = Tokenizer;\n\nvar tokenizer$1 = Tokenizer_1;\n\n//\n//            item        item        item        item\n//          /------\\    /------\\    /------\\    /------\\\n//          | data |    | data |    | data |    | data |\n//  null <--+-prev |<---+-prev |<---+-prev |<---+-prev |\n//          | next-+---\x3e| next-+---\x3e| next-+---\x3e| next-+--\x3e null\n//          \\------/    \\------/    \\------/    \\------/\n//             ^                                    ^\n//             |                list                |\n//             |              /------\\              |\n//             \\--------------+-head |              |\n//                            | tail-+--------------/\n//                            \\------/\n//\n\nfunction createItem(data) {\n    return {\n        prev: null,\n        next: null,\n        data: data\n    };\n}\n\nvar cursors = null;\nvar List = function() {\n    this.cursor = null;\n    this.head = null;\n    this.tail = null;\n};\n\nList.createItem = createItem;\nList.prototype.createItem = createItem;\n\nList.prototype.getSize = function() {\n    var size = 0;\n    var cursor = this.head;\n\n    while (cursor) {\n        size++;\n        cursor = cursor.next;\n    }\n\n    return size;\n};\n\nList.prototype.fromArray = function(array) {\n    var cursor = null;\n\n    this.head = null;\n\n    for (var i = 0; i < array.length; i++) {\n        var item = createItem(array[i]);\n\n        if (cursor !== null) {\n            cursor.next = item;\n        } else {\n            this.head = item;\n        }\n\n        item.prev = cursor;\n        cursor = item;\n    }\n\n    this.tail = cursor;\n\n    return this;\n};\n\nList.prototype.toArray = function() {\n    var cursor = this.head;\n    var result = [];\n\n    while (cursor) {\n        result.push(cursor.data);\n        cursor = cursor.next;\n    }\n\n    return result;\n};\n\nList.prototype.toJSON = List.prototype.toArray;\n\nList.prototype.isEmpty = function() {\n    return this.head === null;\n};\n\nList.prototype.first = function() {\n    return this.head && this.head.data;\n};\n\nList.prototype.last = function() {\n    return this.tail && this.tail.data;\n};\n\nfunction allocateCursor(node, prev, next) {\n    var cursor;\n\n    if (cursors !== null) {\n        cursor = cursors;\n        cursors = cursors.cursor;\n        cursor.prev = prev;\n        cursor.next = next;\n        cursor.cursor = node.cursor;\n    } else {\n        cursor = {\n            prev: prev,\n            next: next,\n            cursor: node.cursor\n        };\n    }\n\n    node.cursor = cursor;\n\n    return cursor;\n}\n\nfunction releaseCursor(node) {\n    var cursor = node.cursor;\n\n    node.cursor = cursor.cursor;\n    cursor.prev = null;\n    cursor.next = null;\n    cursor.cursor = cursors;\n    cursors = cursor;\n}\n\nList.prototype.each = function(fn, context) {\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, null, this.head);\n\n    while (cursor.next !== null) {\n        item = cursor.next;\n        cursor.next = item.next;\n\n        fn.call(context, item.data, item, this);\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.eachRight = function(fn, context) {\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, this.tail, null);\n\n    while (cursor.prev !== null) {\n        item = cursor.prev;\n        cursor.prev = item.prev;\n\n        fn.call(context, item.data, item, this);\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.nextUntil = function(start, fn, context) {\n    if (start === null) {\n        return;\n    }\n\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, null, start);\n\n    while (cursor.next !== null) {\n        item = cursor.next;\n        cursor.next = item.next;\n\n        if (fn.call(context, item.data, item, this)) {\n            break;\n        }\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.prevUntil = function(start, fn, context) {\n    if (start === null) {\n        return;\n    }\n\n    var item;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    // push cursor\n    var cursor = allocateCursor(this, start, null);\n\n    while (cursor.prev !== null) {\n        item = cursor.prev;\n        cursor.prev = item.prev;\n\n        if (fn.call(context, item.data, item, this)) {\n            break;\n        }\n    }\n\n    // pop cursor\n    releaseCursor(this);\n};\n\nList.prototype.some = function(fn, context) {\n    var cursor = this.head;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    while (cursor !== null) {\n        if (fn.call(context, cursor.data, cursor, this)) {\n            return true;\n        }\n\n        cursor = cursor.next;\n    }\n\n    return false;\n};\n\nList.prototype.map = function(fn, context) {\n    var result = [];\n    var cursor = this.head;\n\n    if (context === undefined) {\n        context = this;\n    }\n\n    while (cursor !== null) {\n        result.push(fn.call(context, cursor.data, cursor, this));\n        cursor = cursor.next;\n    }\n\n    return result;\n};\n\nList.prototype.clear = function() {\n    this.head = null;\n    this.tail = null;\n};\n\nList.prototype.copy = function() {\n    var result = new List();\n    var cursor = this.head;\n\n    while (cursor !== null) {\n        result.insert(createItem(cursor.data));\n        cursor = cursor.next;\n    }\n\n    return result;\n};\n\nList.prototype.updateCursors = function(prevOld, prevNew, nextOld, nextNew) {\n    var cursor = this.cursor;\n\n    while (cursor !== null) {\n        if (cursor.prev === prevOld) {\n            cursor.prev = prevNew;\n        }\n\n        if (cursor.next === nextOld) {\n            cursor.next = nextNew;\n        }\n\n        cursor = cursor.cursor;\n    }\n};\n\nList.prototype.prepend = function(item) {\n    //      head\n    //    ^\n    // item\n    this.updateCursors(null, item, this.head, item);\n\n    // insert to the beginning of the list\n    if (this.head !== null) {\n        // new item <- first item\n        this.head.prev = item;\n\n        // new item -> first item\n        item.next = this.head;\n    } else {\n        // if list has no head, then it also has no tail\n        // in this case tail points to the new item\n        this.tail = item;\n    }\n\n    // head always points to new item\n    this.head = item;\n\n    return this;\n};\n\nList.prototype.prependData = function(data) {\n    return this.prepend(createItem(data));\n};\n\nList.prototype.append = function(item) {\n    // tail\n    //      ^\n    //      item\n    this.updateCursors(this.tail, item, null, item);\n\n    // insert to the ending of the list\n    if (this.tail !== null) {\n        // last item -> new item\n        this.tail.next = item;\n\n        // last item <- new item\n        item.prev = this.tail;\n    } else {\n        // if list has no tail, then it also has no head\n        // in this case head points to new item\n        this.head = item;\n    }\n\n    // tail always points to new item\n    this.tail = item;\n\n    return this;\n};\n\nList.prototype.appendData = function(data) {\n    return this.append(createItem(data));\n};\n\nList.prototype.insert = function(item, before) {\n    if (before !== undefined && before !== null) {\n        // prev   before\n        //      ^\n        //     item\n        this.updateCursors(before.prev, item, before, item);\n\n        if (before.prev === null) {\n            // insert to the beginning of list\n            if (this.head !== before) {\n                throw new Error('before doesn\\'t belong to list');\n            }\n\n            // since head points to before therefore list doesn't empty\n            // no need to check tail\n            this.head = item;\n            before.prev = item;\n            item.next = before;\n\n            this.updateCursors(null, item);\n        } else {\n\n            // insert between two items\n            before.prev.next = item;\n            item.prev = before.prev;\n\n            before.prev = item;\n            item.next = before;\n        }\n    } else {\n        this.append(item);\n    }\n};\n\nList.prototype.insertData = function(data, before) {\n    this.insert(createItem(data), before);\n};\n\nList.prototype.remove = function(item) {\n    //      item\n    //       ^\n    // prev     next\n    this.updateCursors(item, item.prev, item, item.next);\n\n    if (item.prev !== null) {\n        item.prev.next = item.next;\n    } else {\n        if (this.head !== item) {\n            throw new Error('item doesn\\'t belong to list');\n        }\n\n        this.head = item.next;\n    }\n\n    if (item.next !== null) {\n        item.next.prev = item.prev;\n    } else {\n        if (this.tail !== item) {\n            throw new Error('item doesn\\'t belong to list');\n        }\n\n        this.tail = item.prev;\n    }\n\n    item.prev = null;\n    item.next = null;\n\n    return item;\n};\n\nList.prototype.appendList = function(list) {\n    // ignore empty lists\n    if (list.head === null) {\n        return;\n    }\n\n    this.updateCursors(this.tail, list.tail, null, list.head);\n\n    // insert to end of the list\n    if (this.tail !== null) {\n        // if destination list has a tail, then it also has a head,\n        // but head doesn't change\n\n        // dest tail -> source head\n        this.tail.next = list.head;\n\n        // dest tail <- source head\n        list.head.prev = this.tail;\n    } else {\n        // if list has no a tail, then it also has no a head\n        // in this case points head to new item\n        this.head = list.head;\n    }\n\n    // tail always start point to new item\n    this.tail = list.tail;\n\n    list.head = null;\n    list.tail = null;\n};\n\nList.prototype.insertList = function(list, before) {\n    if (before !== undefined && before !== null) {\n        // ignore empty lists\n        if (list.head === null) {\n            return;\n        }\n\n        this.updateCursors(before.prev, list.tail, before, list.head);\n\n        // insert in the middle of dist list\n        if (before.prev !== null) {\n            // before.prev <-> list.head\n            before.prev.next = list.head;\n            list.head.prev = before.prev;\n        } else {\n            this.head = list.head;\n        }\n\n        before.prev = list.tail;\n        list.tail.next = before;\n\n        list.head = null;\n        list.tail = null;\n    } else {\n        this.appendList(list);\n    }\n};\n\nList.prototype.replace = function(oldItem, newItemOrList) {\n    if ('head' in newItemOrList) {\n        this.insertList(newItemOrList, oldItem);\n    } else {\n        this.insert(newItemOrList, oldItem);\n    }\n    this.remove(oldItem);\n};\n\nvar list = List;\n\nvar TYPE$3 = tokenizer$1.TYPE;\nvar WHITESPACE$2 = TYPE$3.WhiteSpace;\nvar COMMENT$2 = TYPE$3.Comment;\n\nvar sequence = function readSequence(recognizer) {\n    var children = new list();\n    var child = null;\n    var context = {\n        recognizer: recognizer,\n        space: null,\n        ignoreWS: false,\n        ignoreWSAfter: false\n    };\n\n    this.scanner.skipSC();\n\n    while (!this.scanner.eof) {\n        switch (this.scanner.tokenType) {\n            case COMMENT$2:\n                this.scanner.next();\n                continue;\n\n            case WHITESPACE$2:\n                if (context.ignoreWS) {\n                    this.scanner.next();\n                } else {\n                    context.space = this.WhiteSpace();\n                }\n                continue;\n        }\n\n        child = recognizer.getNode.call(this, context);\n\n        if (child === undefined) {\n            break;\n        }\n\n        if (context.space !== null) {\n            children.appendData(context.space);\n            context.space = null;\n        }\n\n        children.appendData(child);\n\n        if (context.ignoreWSAfter) {\n            context.ignoreWSAfter = false;\n            context.ignoreWS = true;\n        } else {\n            context.ignoreWS = false;\n        }\n    }\n\n    return children;\n};\n\nvar noop = function() {};\n\nfunction createParseContext(name) {\n    return function() {\n        return this[name]();\n    };\n}\n\nfunction processConfig(config) {\n    var parserConfig = {\n        context: {},\n        scope: {},\n        atrule: {},\n        pseudo: {}\n    };\n\n    if (config.parseContext) {\n        for (var name in config.parseContext) {\n            switch (typeof config.parseContext[name]) {\n                case 'function':\n                    parserConfig.context[name] = config.parseContext[name];\n                    break;\n\n                case 'string':\n                    parserConfig.context[name] = createParseContext(config.parseContext[name]);\n                    break;\n            }\n        }\n    }\n\n    if (config.scope) {\n        for (var name in config.scope) {\n            parserConfig.scope[name] = config.scope[name];\n        }\n    }\n\n    if (config.atrule) {\n        for (var name in config.atrule) {\n            var atrule = config.atrule[name];\n\n            if (atrule.parse) {\n                parserConfig.atrule[name] = atrule.parse;\n            }\n        }\n    }\n\n    if (config.pseudo) {\n        for (var name in config.pseudo) {\n            var pseudo = config.pseudo[name];\n\n            if (pseudo.parse) {\n                parserConfig.pseudo[name] = pseudo.parse;\n            }\n        }\n    }\n\n    if (config.node) {\n        for (var name in config.node) {\n            parserConfig[name] = config.node[name].parse;\n        }\n    }\n\n    return parserConfig;\n}\n\nvar create = function createParser(config) {\n    var parser = {\n        scanner: new tokenizer$1(),\n        filename: '<unknown>',\n        needPositions: false,\n        tolerant: false,\n        onParseError: noop,\n        parseAtruleExpression: true,\n        parseSelector: true,\n        parseValue: true,\n        parseCustomProperty: false,\n\n        readSequence: sequence,\n\n        tolerantParse: function(consumer, fallback) {\n            if (this.tolerant) {\n                var start = this.scanner.currentToken;\n\n                try {\n                    return consumer.call(this);\n                } catch (e) {\n                    this.onParseError(e);\n                    return fallback.call(this, start);\n                }\n            } else {\n                return consumer.call(this);\n            }\n        },\n\n        getLocation: function(start, end) {\n            if (this.needPositions) {\n                return this.scanner.getLocationRange(\n                    start,\n                    end,\n                    this.filename\n                );\n            }\n\n            return null;\n        },\n        getLocationFromList: function(list) {\n            if (this.needPositions) {\n                return this.scanner.getLocationRange(\n                    list.head !== null ? list.first().loc.start.offset - this.scanner.startOffset : this.scanner.tokenStart,\n                    list.head !== null ? list.last().loc.end.offset - this.scanner.startOffset : this.scanner.tokenStart,\n                    this.filename\n                );\n            }\n\n            return null;\n        }\n    };\n\n    config = processConfig(config || {});\n    for (var key in config) {\n        parser[key] = config[key];\n    }\n\n    return function(source, options) {\n        options = options || {};\n\n        var context = options.context || 'default';\n        var ast;\n\n        parser.scanner.setSource(source, options.offset, options.line, options.column);\n        parser.filename = options.filename || '<unknown>';\n        parser.needPositions = Boolean(options.positions);\n        parser.tolerant = Boolean(options.tolerant);\n        parser.onParseError = typeof options.onParseError === 'function' ? options.onParseError : noop;\n        parser.parseAtruleExpression = 'parseAtruleExpression' in options ? Boolean(options.parseAtruleExpression) : true;\n        parser.parseSelector = 'parseSelector' in options ? Boolean(options.parseSelector) : true;\n        parser.parseValue = 'parseValue' in options ? Boolean(options.parseValue) : true;\n        parser.parseCustomProperty = 'parseCustomProperty' in options ? Boolean(options.parseCustomProperty) : false;\n\n        if (!parser.context.hasOwnProperty(context)) {\n            throw new Error('Unknown context `' + context + '`');\n        }\n\n        ast = parser.context[context].call(parser, options);\n\n        if (!parser.scanner.eof) {\n            parser.scanner.error();\n        }\n\n        // console.log(JSON.stringify(ast, null, 4));\n        return ast;\n    };\n};\n\nvar cmpChar$1 = tokenizer$1.cmpChar;\nvar TYPE$4 = tokenizer$1.TYPE;\n\nvar IDENTIFIER$2 = TYPE$4.Identifier;\nvar STRING$2 = TYPE$4.String;\nvar NUMBER$2 = TYPE$4.Number;\nvar FUNCTION$2 = TYPE$4.Function;\nvar URL$2 = TYPE$4.Url;\nvar NUMBERSIGN = TYPE$4.NumberSign;\nvar LEFTPARENTHESIS$1 = TYPE$4.LeftParenthesis;\nvar LEFTSQUAREBRACKET$1 = TYPE$4.LeftSquareBracket;\nvar PLUSSIGN$2 = TYPE$4.PlusSign;\nvar HYPHENMINUS$2 = TYPE$4.HyphenMinus;\nvar COMMA = TYPE$4.Comma;\nvar SOLIDUS = TYPE$4.Solidus;\nvar ASTERISK = TYPE$4.Asterisk;\nvar PERCENTSIGN = TYPE$4.PercentSign;\nvar BACKSLASH = TYPE$4.Backslash;\nvar U = 117; // 'u'.charCodeAt(0)\n\nvar _default = function defaultRecognizer(context) {\n    switch (this.scanner.tokenType) {\n        case NUMBERSIGN:\n            return this.HexColor();\n\n        case COMMA:\n            context.space = null;\n            context.ignoreWSAfter = true;\n            return this.Operator();\n\n        case SOLIDUS:\n        case ASTERISK:\n        case PLUSSIGN$2:\n        case HYPHENMINUS$2:\n            return this.Operator();\n\n        case LEFTPARENTHESIS$1:\n            return this.Parentheses(this.readSequence, context.recognizer);\n\n        case LEFTSQUAREBRACKET$1:\n            return this.Brackets(this.readSequence, context.recognizer);\n\n        case STRING$2:\n            return this.String();\n\n        case NUMBER$2:\n            switch (this.scanner.lookupType(1)) {\n                case PERCENTSIGN:\n                    return this.Percentage();\n\n                case IDENTIFIER$2:\n                    // edge case: number with folowing \\0 and \\9 hack shouldn't to be a Dimension\n                    if (cmpChar$1(this.scanner.source, this.scanner.tokenEnd, BACKSLASH)) {\n                        return this.Number();\n                    } else {\n                        return this.Dimension();\n                    }\n\n                default:\n                    return this.Number();\n            }\n\n        case FUNCTION$2:\n            return this.Function(this.readSequence, context.recognizer);\n\n        case URL$2:\n            return this.Url();\n\n        case IDENTIFIER$2:\n            // check for unicode range, it should start with u+ or U+\n            if (cmpChar$1(this.scanner.source, this.scanner.tokenStart, U) &&\n                cmpChar$1(this.scanner.source, this.scanner.tokenStart + 1, PLUSSIGN$2)) {\n                return this.UnicodeRange();\n            } else {\n                return this.Identifier();\n            }\n    }\n};\n\nvar atruleExpression = {\n    getNode: _default\n};\n\nvar TYPE$5 = tokenizer$1.TYPE;\n\nvar IDENTIFIER$3 = TYPE$5.Identifier;\nvar NUMBER$3 = TYPE$5.Number;\nvar NUMBERSIGN$1 = TYPE$5.NumberSign;\nvar LEFTSQUAREBRACKET$2 = TYPE$5.LeftSquareBracket;\nvar PLUSSIGN$3 = TYPE$5.PlusSign;\nvar SOLIDUS$1 = TYPE$5.Solidus;\nvar ASTERISK$1 = TYPE$5.Asterisk;\nvar FULLSTOP$2 = TYPE$5.FullStop;\nvar COLON = TYPE$5.Colon;\nvar GREATERTHANSIGN$1 = TYPE$5.GreaterThanSign;\nvar VERTICALLINE = TYPE$5.VerticalLine;\nvar TILDE = TYPE$5.Tilde;\n\nfunction getNode(context) {\n    switch (this.scanner.tokenType) {\n        case PLUSSIGN$3:\n        case GREATERTHANSIGN$1:\n        case TILDE:\n            context.space = null;\n            context.ignoreWSAfter = true;\n            return this.Combinator();\n\n        case SOLIDUS$1:  // /deep/\n            return this.Combinator();\n\n        case FULLSTOP$2:\n            return this.ClassSelector();\n\n        case LEFTSQUAREBRACKET$2:\n            return this.AttributeSelector();\n\n        case NUMBERSIGN$1:\n            return this.IdSelector();\n\n        case COLON:\n            if (this.scanner.lookupType(1) === COLON) {\n                return this.PseudoElementSelector();\n            } else {\n                return this.PseudoClassSelector();\n            }\n\n        case IDENTIFIER$3:\n        case ASTERISK$1:\n        case VERTICALLINE:\n            return this.TypeSelector();\n\n        case NUMBER$3:\n            return this.Percentage();\n    }\n}\nvar selector = {\n    getNode: getNode\n};\n\n// https://drafts.csswg.org/css-images-4/#element-notation\n// https://developer.mozilla.org/en-US/docs/Web/CSS/element\nvar element = function() {\n    this.scanner.skipSC();\n\n    var id = this.IdSelector();\n\n    this.scanner.skipSC();\n\n    return new list().appendData(\n        id\n    );\n};\n\n// legacy IE function\n// expression '(' raw ')'\nvar expression = function() {\n    return new list().appendData(\n        this.Raw(this.scanner.currentToken, 0, 0, false, false)\n    );\n};\n\nvar TYPE$6 = tokenizer$1.TYPE;\n\nvar IDENTIFIER$4 = TYPE$6.Identifier;\nvar COMMA$1 = TYPE$6.Comma;\nvar SEMICOLON = TYPE$6.Semicolon;\nvar HYPHENMINUS$3 = TYPE$6.HyphenMinus;\nvar EXCLAMATIONMARK$1 = TYPE$6.ExclamationMark;\n\n// var '(' ident (',' <value>? )? ')'\nvar _var = function() {\n    var children = new list();\n\n    this.scanner.skipSC();\n\n    var identStart = this.scanner.tokenStart;\n\n    this.scanner.eat(HYPHENMINUS$3);\n    if (this.scanner.source.charCodeAt(this.scanner.tokenStart) !== HYPHENMINUS$3) {\n        this.scanner.error('HyphenMinus is expected');\n    }\n    this.scanner.eat(IDENTIFIER$4);\n\n    children.appendData({\n        type: 'Identifier',\n        loc: this.getLocation(identStart, this.scanner.tokenStart),\n        name: this.scanner.substrToCursor(identStart)\n    });\n\n    this.scanner.skipSC();\n\n    if (this.scanner.tokenType === COMMA$1) {\n        children.appendData(this.Operator());\n        children.appendData(this.parseCustomProperty\n            ? this.Value(null)\n            : this.Raw(this.scanner.currentToken, EXCLAMATIONMARK$1, SEMICOLON, false, false)\n        );\n    }\n\n    return children;\n};\n\nvar value = {\n    getNode: _default,\n    '-moz-element': element,\n    'element': element,\n    'expression': expression,\n    'var': _var\n};\n\nvar scope = {\n    AtruleExpression: atruleExpression,\n    Selector: selector,\n    Value: value\n};\n\nvar fontFace = {\n    parse: {\n        expression: null,\n        block: function() {\n            return this.Block(this.Declaration);\n        }\n    }\n};\n\nvar TYPE$7 = tokenizer$1.TYPE;\n\nvar STRING$3 = TYPE$7.String;\nvar IDENTIFIER$5 = TYPE$7.Identifier;\nvar URL$3 = TYPE$7.Url;\nvar LEFTPARENTHESIS$2 = TYPE$7.LeftParenthesis;\n\nvar _import = {\n    parse: {\n        expression: function() {\n            var children = new list();\n\n            this.scanner.skipSC();\n\n            switch (this.scanner.tokenType) {\n                case STRING$3:\n                    children.appendData(this.String());\n                    break;\n\n                case URL$3:\n                    children.appendData(this.Url());\n                    break;\n\n                default:\n                    this.scanner.error('String or url() is expected');\n            }\n\n            if (this.scanner.lookupNonWSType(0) === IDENTIFIER$5 ||\n                this.scanner.lookupNonWSType(0) === LEFTPARENTHESIS$2) {\n                children.appendData(this.WhiteSpace());\n                children.appendData(this.MediaQueryList());\n            }\n\n            return children;\n        },\n        block: null\n    }\n};\n\nvar media = {\n    parse: {\n        expression: function() {\n            return new list().appendData(\n                this.MediaQueryList()\n            );\n        },\n        block: function() {\n            return this.Block(this.Rule);\n        }\n    }\n};\n\nvar TYPE$8 = tokenizer$1.TYPE;\nvar LEFTCURLYBRACKET$1 = TYPE$8.LeftCurlyBracket;\n\nvar page = {\n    parse: {\n        expression: function() {\n            if (this.scanner.lookupNonWSType(0) === LEFTCURLYBRACKET$1) {\n                return null;\n            }\n\n            return new list().appendData(\n                this.SelectorList()\n            );\n        },\n        block: function() {\n            return this.Block(this.Declaration);\n        }\n    }\n};\n\nvar TYPE$9 = tokenizer$1.TYPE;\n\nvar WHITESPACE$3 = TYPE$9.WhiteSpace;\nvar COMMENT$3 = TYPE$9.Comment;\nvar IDENTIFIER$6 = TYPE$9.Identifier;\nvar FUNCTION$3 = TYPE$9.Function;\nvar LEFTPARENTHESIS$3 = TYPE$9.LeftParenthesis;\nvar HYPHENMINUS$4 = TYPE$9.HyphenMinus;\nvar COLON$1 = TYPE$9.Colon;\n\nfunction consumeRaw() {\n    return new list().appendData(\n        this.Raw(this.scanner.currentToken, 0, 0, false, false)\n    );\n}\n\nfunction parentheses() {\n    var index = 0;\n\n    this.scanner.skipSC();\n\n    // TODO: make it simplier\n    if (this.scanner.tokenType === IDENTIFIER$6) {\n        index = 1;\n    } else if (this.scanner.tokenType === HYPHENMINUS$4 &&\n               this.scanner.lookupType(1) === IDENTIFIER$6) {\n        index = 2;\n    }\n\n    if (index !== 0 && this.scanner.lookupNonWSType(index) === COLON$1) {\n        return new list().appendData(\n            this.Declaration()\n        );\n    }\n\n    return readSequence.call(this);\n}\n\nfunction readSequence() {\n    var children = new list();\n    var space = null;\n    var child;\n\n    this.scanner.skipSC();\n\n    scan:\n    while (!this.scanner.eof) {\n        switch (this.scanner.tokenType) {\n            case WHITESPACE$3:\n                space = this.WhiteSpace();\n                continue;\n\n            case COMMENT$3:\n                this.scanner.next();\n                continue;\n\n            case FUNCTION$3:\n                child = this.Function(consumeRaw, this.scope.AtruleExpression);\n                break;\n\n            case IDENTIFIER$6:\n                child = this.Identifier();\n                break;\n\n            case LEFTPARENTHESIS$3:\n                child = this.Parentheses(parentheses, this.scope.AtruleExpression);\n                break;\n\n            default:\n                break scan;\n        }\n\n        if (space !== null) {\n            children.appendData(space);\n            space = null;\n        }\n\n        children.appendData(child);\n    }\n\n    return children;\n}\n\nvar supports = {\n    parse: {\n        expression: function() {\n            var children = readSequence.call(this);\n\n            if (children.isEmpty()) {\n                this.scanner.error('Condition is expected');\n            }\n\n            return children;\n        },\n        block: function() {\n            return this.Block(this.Rule);\n        }\n    }\n};\n\nvar atrule = {\n    'font-face': fontFace,\n    'import': _import,\n    'media': media,\n    'page': page,\n    'supports': supports\n};\n\nvar dir = {\n    parse: function() {\n        return new list().appendData(\n            this.Identifier()\n        );\n    }\n};\n\nvar has$1 = {\n    parse: function() {\n        return new list().appendData(\n            this.SelectorList()\n        );\n    }\n};\n\nvar lang = {\n    parse: function() {\n        return new list().appendData(\n            this.Identifier()\n        );\n    }\n};\n\nvar selectorList = {\n    parse: function selectorList() {\n        return new list().appendData(\n            this.SelectorList()\n        );\n    }\n};\n\nvar matches = selectorList;\n\nvar not = selectorList;\n\nvar ALLOW_OF_CLAUSE = true;\n\nvar nthWithOfClause = {\n    parse: function() {\n        return new list().appendData(\n            this.Nth(ALLOW_OF_CLAUSE)\n        );\n    }\n};\n\nvar nthChild = nthWithOfClause;\n\nvar nthLastChild = nthWithOfClause;\n\nvar DISALLOW_OF_CLAUSE = false;\n\nvar nth = {\n    parse: function nth() {\n        return new list().appendData(\n            this.Nth(DISALLOW_OF_CLAUSE)\n        );\n    }\n};\n\nvar nthLastOfType = nth;\n\nvar nthOfType = nth;\n\nvar slotted = {\n    parse: function compoundSelector() {\n        return new list().appendData(\n            this.Selector()\n        );\n    }\n};\n\nvar pseudo = {\n    'dir': dir,\n    'has': has$1,\n    'lang': lang,\n    'matches': matches,\n    'not': not,\n    'nth-child': nthChild,\n    'nth-last-child': nthLastChild,\n    'nth-last-of-type': nthLastOfType,\n    'nth-of-type': nthOfType,\n    'slotted': slotted\n};\n\nvar cmpChar$2 = tokenizer$1.cmpChar;\nvar isNumber$2 = tokenizer$1.isNumber;\nvar TYPE$10 = tokenizer$1.TYPE;\n\nvar IDENTIFIER$7 = TYPE$10.Identifier;\nvar NUMBER$4 = TYPE$10.Number;\nvar PLUSSIGN$4 = TYPE$10.PlusSign;\nvar HYPHENMINUS$5 = TYPE$10.HyphenMinus;\nvar N$3 = 110; // 'n'.charCodeAt(0)\nvar DISALLOW_SIGN = true;\nvar ALLOW_SIGN = false;\n\nfunction checkTokenIsInteger(scanner, disallowSign) {\n    var pos = scanner.tokenStart;\n\n    if (scanner.source.charCodeAt(pos) === PLUSSIGN$4 ||\n        scanner.source.charCodeAt(pos) === HYPHENMINUS$5) {\n        if (disallowSign) {\n            scanner.error();\n        }\n        pos++;\n    }\n\n    for (; pos < scanner.tokenEnd; pos++) {\n        if (!isNumber$2(scanner.source.charCodeAt(pos))) {\n            scanner.error('Unexpected input', pos);\n        }\n    }\n}\n\n// An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb\nvar AnPlusB = {\n    name: 'AnPlusB',\n    structure: {\n        a: [String, null],\n        b: [String, null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var end = start;\n        var prefix = '';\n        var a = null;\n        var b = null;\n\n        if (this.scanner.tokenType === NUMBER$4 ||\n            this.scanner.tokenType === PLUSSIGN$4) {\n            checkTokenIsInteger(this.scanner, ALLOW_SIGN);\n            prefix = this.scanner.getTokenValue();\n            this.scanner.next();\n            end = this.scanner.tokenStart;\n        }\n\n        if (this.scanner.tokenType === IDENTIFIER$7) {\n            var bStart = this.scanner.tokenStart;\n\n            if (cmpChar$2(this.scanner.source, bStart, HYPHENMINUS$5)) {\n                if (prefix === '') {\n                    prefix = '-';\n                    bStart++;\n                } else {\n                    this.scanner.error('Unexpected hyphen minus');\n                }\n            }\n\n            if (!cmpChar$2(this.scanner.source, bStart, N$3)) {\n                this.scanner.error();\n            }\n\n            a = prefix === ''  ? '1'  :\n                prefix === '+' ? '+1' :\n                prefix === '-' ? '-1' :\n                prefix;\n\n            var len = this.scanner.tokenEnd - bStart;\n            if (len > 1) {\n                // ..n-..\n                if (this.scanner.source.charCodeAt(bStart + 1) !== HYPHENMINUS$5) {\n                    this.scanner.error('Unexpected input', bStart + 1);\n                }\n\n                if (len > 2) {\n                    // ..n-{number}..\n                    this.scanner.tokenStart = bStart + 2;\n                } else {\n                    // ..n- {number}\n                    this.scanner.next();\n                    this.scanner.skipSC();\n                }\n\n                checkTokenIsInteger(this.scanner, DISALLOW_SIGN);\n                b = '-' + this.scanner.getTokenValue();\n                this.scanner.next();\n                end = this.scanner.tokenStart;\n            } else {\n                prefix = '';\n                this.scanner.next();\n                end = this.scanner.tokenStart;\n                this.scanner.skipSC();\n\n                if (this.scanner.tokenType === HYPHENMINUS$5 ||\n                    this.scanner.tokenType === PLUSSIGN$4) {\n                    prefix = this.scanner.getTokenValue();\n                    this.scanner.next();\n                    this.scanner.skipSC();\n                }\n\n                if (this.scanner.tokenType === NUMBER$4) {\n                    checkTokenIsInteger(this.scanner, prefix !== '');\n\n                    if (!isNumber$2(this.scanner.source.charCodeAt(this.scanner.tokenStart))) {\n                        prefix = this.scanner.source.charAt(this.scanner.tokenStart);\n                        this.scanner.tokenStart++;\n                    }\n\n                    if (prefix === '') {\n                        // should be an operator before number\n                        this.scanner.error();\n                    } else if (prefix === '+') {\n                        // plus is using by default\n                        prefix = '';\n                    }\n\n                    b = prefix + this.scanner.getTokenValue();\n\n                    this.scanner.next();\n                    end = this.scanner.tokenStart;\n                } else {\n                    if (prefix) {\n                        this.scanner.eat(NUMBER$4);\n                    }\n                }\n            }\n        } else {\n            if (prefix === '' || prefix === '+') { // no number\n                this.scanner.error(\n                    'Number or identifier is expected',\n                    this.scanner.tokenStart + (\n                        this.scanner.tokenType === PLUSSIGN$4 ||\n                        this.scanner.tokenType === HYPHENMINUS$5\n                    )\n                );\n            }\n\n            b = prefix;\n        }\n\n        return {\n            type: 'AnPlusB',\n            loc: this.getLocation(start, end),\n            a: a,\n            b: b\n        };\n    },\n    generate: function(processChunk, node) {\n        var a = node.a !== null && node.a !== undefined;\n        var b = node.b !== null && node.b !== undefined;\n\n        if (a) {\n            processChunk(\n                node.a === '+1' ? '+n' :\n                node.a ===  '1' ?  'n' :\n                node.a === '-1' ? '-n' :\n                node.a + 'n'\n            );\n\n            if (b) {\n                b = String(node.b);\n                if (b.charAt(0) === '-' || b.charAt(0) === '+') {\n                    processChunk(b.charAt(0));\n                    processChunk(b.substr(1));\n                } else {\n                    processChunk('+');\n                    processChunk(b);\n                }\n            }\n        } else {\n            processChunk(String(node.b));\n        }\n    }\n};\n\nvar TYPE$11 = tokenizer$1.TYPE;\n\nvar ATRULE$2 = TYPE$11.Atrule;\nvar SEMICOLON$1 = TYPE$11.Semicolon;\nvar LEFTCURLYBRACKET$2 = TYPE$11.LeftCurlyBracket;\nvar RIGHTCURLYBRACKET$1 = TYPE$11.RightCurlyBracket;\n\nfunction isBlockAtrule() {\n    for (var offset = 1, type; type = this.scanner.lookupType(offset); offset++) {\n        if (type === RIGHTCURLYBRACKET$1) {\n            return true;\n        }\n\n        if (type === LEFTCURLYBRACKET$2 ||\n            type === ATRULE$2) {\n            return false;\n        }\n    }\n\n    this.scanner.skip(offset);\n    this.scanner.eat(RIGHTCURLYBRACKET$1);\n}\n\nvar Atrule = {\n    name: 'Atrule',\n    structure: {\n        name: String,\n        expression: ['AtruleExpression', null],\n        block: ['Block', null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var name;\n        var nameLowerCase;\n        var expression = null;\n        var block = null;\n\n        this.scanner.eat(ATRULE$2);\n\n        name = this.scanner.substrToCursor(start + 1);\n        nameLowerCase = name.toLowerCase();\n        this.scanner.skipSC();\n\n        expression = this.AtruleExpression(name);\n\n        // turn empty AtruleExpression into null\n        if (expression.children.head === null) {\n            expression = null;\n        }\n\n        this.scanner.skipSC();\n\n        if (this.atrule.hasOwnProperty(nameLowerCase)) {\n            if (typeof this.atrule[nameLowerCase].block === 'function') {\n                if (this.scanner.tokenType !== LEFTCURLYBRACKET$2) {\n                    // FIXME: make tolerant\n                    this.scanner.error('Curly bracket is expected');\n                }\n\n                block = this.atrule[nameLowerCase].block.call(this);\n            } else {\n                if (!this.tolerant || !this.scanner.eof) {\n                    this.scanner.eat(SEMICOLON$1);\n                }\n            }\n        } else {\n            switch (this.scanner.tokenType) {\n                case SEMICOLON$1:\n                    this.scanner.next();\n                    break;\n\n                case LEFTCURLYBRACKET$2:\n                    // TODO: should consume block content as Raw?\n                    block = this.Block(isBlockAtrule.call(this) ? this.Declaration : this.Rule);\n                    break;\n\n                default:\n                    if (!this.tolerant) {\n                        this.scanner.error('Semicolon or block is expected');\n                    }\n            }\n        }\n\n        return {\n            type: 'Atrule',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            expression: expression,\n            block: block\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('@');\n        processChunk(node.name);\n\n        if (node.expression !== null) {\n            processChunk(' ');\n            this.generate(processChunk, node.expression);\n        }\n\n        if (node.block) {\n            this.generate(processChunk, node.block);\n        } else {\n            processChunk(';');\n        }\n    },\n    walkContext: 'atrule'\n};\n\nvar TYPE$12 = tokenizer$1.TYPE;\nvar SEMICOLON$2 = TYPE$12.Semicolon;\nvar LEFTCURLYBRACKET$3 = TYPE$12.LeftCurlyBracket;\n\nfunction consumeRaw$1(startToken) {\n    return new list().appendData(\n        this.Raw(startToken, SEMICOLON$2, LEFTCURLYBRACKET$3, false, true)\n    );\n}\n\nfunction consumeDefaultSequence() {\n    return this.readSequence(this.scope.AtruleExpression);\n}\n\nvar AtruleExpression = {\n    name: 'AtruleExpression',\n    structure: {\n        children: [[]]\n    },\n    parse: function(name) {\n        var children = null;\n        var startToken = this.scanner.currentToken;\n\n        if (name !== null) {\n            name = name.toLowerCase();\n        }\n\n        if (this.parseAtruleExpression) {\n            // custom consumer\n            if (this.atrule.hasOwnProperty(name)) {\n                if (typeof this.atrule[name].expression === 'function') {\n                    children = this.tolerantParse(this.atrule[name].expression, consumeRaw$1);\n                }\n            } else {\n                // default consumer\n                this.scanner.skipSC();\n                children = this.tolerantParse(consumeDefaultSequence, consumeRaw$1);\n            }\n\n            if (this.tolerant) {\n                if (this.scanner.eof || (this.scanner.tokenType !== SEMICOLON$2 && this.scanner.tokenType !== LEFTCURLYBRACKET$3)) {\n                    children = consumeRaw$1.call(this, startToken);\n                }\n            }\n        } else {\n            children = consumeRaw$1.call(this, startToken);\n        }\n\n        if (children === null) {\n            children = new list();\n        }\n\n        return {\n            type: 'AtruleExpression',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        this.each(processChunk, node);\n    },\n    walkContext: 'atruleExpression'\n};\n\nvar TYPE$13 = tokenizer$1.TYPE;\n\nvar IDENTIFIER$8 = TYPE$13.Identifier;\nvar STRING$4 = TYPE$13.String;\nvar DOLLARSIGN = TYPE$13.DollarSign;\nvar ASTERISK$2 = TYPE$13.Asterisk;\nvar COLON$2 = TYPE$13.Colon;\nvar EQUALSSIGN = TYPE$13.EqualsSign;\nvar LEFTSQUAREBRACKET$3 = TYPE$13.LeftSquareBracket;\nvar RIGHTSQUAREBRACKET$1 = TYPE$13.RightSquareBracket;\nvar CIRCUMFLEXACCENT = TYPE$13.CircumflexAccent;\nvar VERTICALLINE$1 = TYPE$13.VerticalLine;\nvar TILDE$1 = TYPE$13.Tilde;\n\nfunction getAttributeName() {\n    if (this.scanner.eof) {\n        this.scanner.error('Unexpected end of input');\n    }\n\n    var start = this.scanner.tokenStart;\n    var expectIdentifier = false;\n    var checkColon = true;\n\n    if (this.scanner.tokenType === ASTERISK$2) {\n        expectIdentifier = true;\n        checkColon = false;\n        this.scanner.next();\n    } else if (this.scanner.tokenType !== VERTICALLINE$1) {\n        this.scanner.eat(IDENTIFIER$8);\n    }\n\n    if (this.scanner.tokenType === VERTICALLINE$1) {\n        if (this.scanner.lookupType(1) !== EQUALSSIGN) {\n            this.scanner.next();\n            this.scanner.eat(IDENTIFIER$8);\n        } else if (expectIdentifier) {\n            this.scanner.error('Identifier is expected', this.scanner.tokenEnd);\n        }\n    } else if (expectIdentifier) {\n        this.scanner.error('Vertical line is expected');\n    }\n\n    if (checkColon && this.scanner.tokenType === COLON$2) {\n        this.scanner.next();\n        this.scanner.eat(IDENTIFIER$8);\n    }\n\n    return {\n        type: 'Identifier',\n        loc: this.getLocation(start, this.scanner.tokenStart),\n        name: this.scanner.substrToCursor(start)\n    };\n}\n\nfunction getOperator() {\n    var start = this.scanner.tokenStart;\n    var tokenType = this.scanner.tokenType;\n\n    if (tokenType !== EQUALSSIGN &&        // =\n        tokenType !== TILDE$1 &&             // ~=\n        tokenType !== CIRCUMFLEXACCENT &&  // ^=\n        tokenType !== DOLLARSIGN &&        // $=\n        tokenType !== ASTERISK$2 &&          // *=\n        tokenType !== VERTICALLINE$1         // |=\n    ) {\n        this.scanner.error('Attribute selector (=, ~=, ^=, $=, *=, |=) is expected');\n    }\n\n    if (tokenType === EQUALSSIGN) {\n        this.scanner.next();\n    } else {\n        this.scanner.next();\n        this.scanner.eat(EQUALSSIGN);\n    }\n\n    return this.scanner.substrToCursor(start);\n}\n\n// '[' S* attrib_name ']'\n// '[' S* attrib_name S* attrib_matcher S* [ IDENT | STRING ] S* attrib_flags? S* ']'\nvar AttributeSelector = {\n    name: 'AttributeSelector',\n    structure: {\n        name: 'Identifier',\n        matcher: [String, null],\n        value: ['String', 'Identifier', null],\n        flags: [String, null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var name;\n        var matcher = null;\n        var value = null;\n        var flags = null;\n\n        this.scanner.eat(LEFTSQUAREBRACKET$3);\n        this.scanner.skipSC();\n\n        name = getAttributeName.call(this);\n        this.scanner.skipSC();\n\n        if (this.scanner.tokenType !== RIGHTSQUAREBRACKET$1) {\n            // avoid case `[name i]`\n            if (this.scanner.tokenType !== IDENTIFIER$8) {\n                matcher = getOperator.call(this);\n\n                this.scanner.skipSC();\n\n                value = this.scanner.tokenType === STRING$4\n                    ? this.String()\n                    : this.Identifier();\n\n                this.scanner.skipSC();\n            }\n\n            // attribute flags\n            if (this.scanner.tokenType === IDENTIFIER$8) {\n                flags = this.scanner.getTokenValue();\n                this.scanner.next();\n\n                this.scanner.skipSC();\n            }\n        }\n\n        this.scanner.eat(RIGHTSQUAREBRACKET$1);\n\n        return {\n            type: 'AttributeSelector',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            matcher: matcher,\n            value: value,\n            flags: flags\n        };\n    },\n    generate: function(processChunk, node) {\n        var flagsPrefix = ' ';\n\n        processChunk('[');\n        this.generate(processChunk, node.name);\n\n        if (node.matcher !== null) {\n            processChunk(node.matcher);\n\n            if (node.value !== null) {\n                this.generate(processChunk, node.value);\n\n                // space between string and flags is not required\n                if (node.value.type === 'String') {\n                    flagsPrefix = '';\n                }\n            }\n        }\n\n        if (node.flags !== null) {\n            processChunk(flagsPrefix);\n            processChunk(node.flags);\n        }\n\n        processChunk(']');\n    }\n};\n\nvar TYPE$14 = tokenizer$1.TYPE;\n\nvar WHITESPACE$4 = TYPE$14.WhiteSpace;\nvar COMMENT$4 = TYPE$14.Comment;\nvar SEMICOLON$3 = TYPE$14.Semicolon;\nvar ATRULE$3 = TYPE$14.Atrule;\nvar LEFTCURLYBRACKET$4 = TYPE$14.LeftCurlyBracket;\nvar RIGHTCURLYBRACKET$2 = TYPE$14.RightCurlyBracket;\n\nfunction consumeRaw$2(startToken) {\n    return this.Raw(startToken, 0, SEMICOLON$3, true, true);\n}\n\nvar Block = {\n    name: 'Block',\n    structure: {\n        children: [['Atrule', 'Rule', 'Declaration']]\n    },\n    parse: function(defaultConsumer) {\n        if (!defaultConsumer) {\n            defaultConsumer = this.Declaration;\n        }\n\n        var start = this.scanner.tokenStart;\n        var children = new list();\n\n        this.scanner.eat(LEFTCURLYBRACKET$4);\n\n        scan:\n        while (!this.scanner.eof) {\n            switch (this.scanner.tokenType) {\n                case RIGHTCURLYBRACKET$2:\n                    break scan;\n\n                case WHITESPACE$4:\n                case COMMENT$4:\n                case SEMICOLON$3:\n                    this.scanner.next();\n                    break;\n\n                case ATRULE$3:\n                    children.appendData(this.tolerantParse(this.Atrule, consumeRaw$2));\n                    break;\n\n                default:\n                    children.appendData(this.tolerantParse(defaultConsumer, consumeRaw$2));\n            }\n        }\n\n        if (!this.tolerant || !this.scanner.eof) {\n            this.scanner.eat(RIGHTCURLYBRACKET$2);\n        }\n\n        return {\n            type: 'Block',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('{');\n        this.each(processChunk, node);\n        processChunk('}');\n    },\n    walkContext: 'block'\n};\n\nvar TYPE$15 = tokenizer$1.TYPE;\nvar LEFTSQUAREBRACKET$4 = TYPE$15.LeftSquareBracket;\nvar RIGHTSQUAREBRACKET$2 = TYPE$15.RightSquareBracket;\n\n// currently only Grid Layout uses square brackets, but left it universal\n// https://drafts.csswg.org/css-grid/#track-sizing\n// [ ident* ]\nvar Brackets = {\n    name: 'Brackets',\n    structure: {\n        children: [[]]\n    },\n    parse: function(readSequence, recognizer) {\n        var start = this.scanner.tokenStart;\n        var children = null;\n\n        this.scanner.eat(LEFTSQUAREBRACKET$4);\n        children = readSequence.call(this, recognizer);\n        this.scanner.eat(RIGHTSQUAREBRACKET$2);\n\n        return {\n            type: 'Brackets',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('[');\n        this.each(processChunk, node);\n        processChunk(']');\n    }\n};\n\nvar CDC$2 = tokenizer$1.TYPE.CDC;\n\nvar CDC_1 = {\n    name: 'CDC',\n    structure: [],\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        this.scanner.eat(CDC$2); // --\x3e\n\n        return {\n            type: 'CDC',\n            loc: this.getLocation(start, this.scanner.tokenStart)\n        };\n    },\n    generate: function(processChunk) {\n        processChunk('--\x3e');\n    }\n};\n\nvar CDO$2 = tokenizer$1.TYPE.CDO;\n\nvar CDO_1 = {\n    name: 'CDO',\n    structure: [],\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        this.scanner.eat(CDO$2); // \x3c!--\n\n        return {\n            type: 'CDO',\n            loc: this.getLocation(start, this.scanner.tokenStart)\n        };\n    },\n    generate: function(processChunk) {\n        processChunk('\x3c!--');\n    }\n};\n\nvar TYPE$16 = tokenizer$1.TYPE;\nvar IDENTIFIER$9 = TYPE$16.Identifier;\nvar FULLSTOP$3 = TYPE$16.FullStop;\n\n// '.' ident\nvar ClassSelector = {\n    name: 'ClassSelector',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        this.scanner.eat(FULLSTOP$3);\n\n        return {\n            type: 'ClassSelector',\n            loc: this.getLocation(this.scanner.tokenStart - 1, this.scanner.tokenEnd),\n            name: this.scanner.consume(IDENTIFIER$9)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('.');\n        processChunk(node.name);\n    }\n};\n\nvar TYPE$17 = tokenizer$1.TYPE;\n\nvar PLUSSIGN$5 = TYPE$17.PlusSign;\nvar SOLIDUS$2 = TYPE$17.Solidus;\nvar GREATERTHANSIGN$2 = TYPE$17.GreaterThanSign;\nvar TILDE$2 = TYPE$17.Tilde;\n\n// + | > | ~ | /deep/\nvar Combinator = {\n    name: 'Combinator',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        switch (this.scanner.tokenType) {\n            case GREATERTHANSIGN$2:\n            case PLUSSIGN$5:\n            case TILDE$2:\n                this.scanner.next();\n                break;\n\n            case SOLIDUS$2:\n                this.scanner.next();\n                this.scanner.expectIdentifier('deep');\n                this.scanner.eat(SOLIDUS$2);\n                break;\n\n            default:\n                this.scanner.error('Combinator is expected');\n        }\n\n        return {\n            type: 'Combinator',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: this.scanner.substrToCursor(start)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.name);\n    }\n};\n\nvar TYPE$18 = tokenizer$1.TYPE;\n\nvar ASTERISK$3 = TYPE$18.Asterisk;\nvar SOLIDUS$3 = TYPE$18.Solidus;\n\n// '/*' .* '*/'\nvar Comment = {\n    name: 'Comment',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var end = this.scanner.tokenEnd;\n\n        if ((end - start + 2) >= 2 &&\n            this.scanner.source.charCodeAt(end - 2) === ASTERISK$3 &&\n            this.scanner.source.charCodeAt(end - 1) === SOLIDUS$3) {\n            end -= 2;\n        }\n\n        this.scanner.next();\n\n        return {\n            type: 'Comment',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: this.scanner.source.substring(start + 2, end)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('/*');\n        processChunk(node.value);\n        processChunk('*/');\n    }\n};\n\nvar TYPE$19 = tokenizer$1.TYPE;\n\nvar IDENTIFIER$10 = TYPE$19.Identifier;\nvar COLON$3 = TYPE$19.Colon;\nvar EXCLAMATIONMARK$2 = TYPE$19.ExclamationMark;\nvar SOLIDUS$4 = TYPE$19.Solidus;\nvar ASTERISK$4 = TYPE$19.Asterisk;\nvar DOLLARSIGN$1 = TYPE$19.DollarSign;\nvar HYPHENMINUS$6 = TYPE$19.HyphenMinus;\nvar SEMICOLON$4 = TYPE$19.Semicolon;\nvar RIGHTCURLYBRACKET$3 = TYPE$19.RightCurlyBracket;\nvar RIGHTPARENTHESIS$1 = TYPE$19.RightParenthesis;\nvar PLUSSIGN$6 = TYPE$19.PlusSign;\nvar NUMBERSIGN$2 = TYPE$19.NumberSign;\n\nvar Declaration = {\n    name: 'Declaration',\n    structure: {\n        important: [Boolean, String],\n        property: String,\n        value: ['Value', 'Raw']\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var property = readProperty.call(this);\n        var important = false;\n        var value;\n\n        this.scanner.skipSC();\n        this.scanner.eat(COLON$3);\n\n        if (isCustomProperty(property) ? this.parseCustomProperty : this.parseValue) {\n            value = this.Value(property);\n        } else {\n            value = this.Raw(this.scanner.currentToken, EXCLAMATIONMARK$2, SEMICOLON$4, false, false);\n        }\n\n        if (this.scanner.tokenType === EXCLAMATIONMARK$2) {\n            important = getImportant(this.scanner);\n            this.scanner.skipSC();\n        }\n\n        // TODO: include or not to include semicolon to range?\n        // if (this.scanner.tokenType === SEMICOLON) {\n        //     this.scanner.next();\n        // }\n\n        if (!this.scanner.eof &&\n            this.scanner.tokenType !== SEMICOLON$4 &&\n            this.scanner.tokenType !== RIGHTPARENTHESIS$1 &&\n            this.scanner.tokenType !== RIGHTCURLYBRACKET$3) {\n            this.scanner.error();\n        }\n\n        return {\n            type: 'Declaration',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            important: important,\n            property: property,\n            value: value\n        };\n    },\n    generate: function(processChunk, node, item) {\n        processChunk(node.property);\n        processChunk(':');\n        this.generate(processChunk, node.value);\n\n        if (node.important) {\n            processChunk(node.important === true ? '!important' : '!' + node.important);\n        }\n\n        if (item && item.next) {\n            processChunk(';');\n        }\n    },\n    walkContext: 'declaration'\n};\n\nfunction isCustomProperty(name) {\n    return name.length >= 2 &&\n           name.charCodeAt(0) === HYPHENMINUS$6 &&\n           name.charCodeAt(1) === HYPHENMINUS$6;\n}\n\nfunction readProperty() {\n    var start = this.scanner.tokenStart;\n    var prefix = 0;\n\n    // hacks\n    switch (this.scanner.tokenType) {\n        case ASTERISK$4:\n        case DOLLARSIGN$1:\n        case PLUSSIGN$6:\n        case NUMBERSIGN$2:\n            prefix = 1;\n            break;\n\n        // TODO: not sure we should support this hack\n        case SOLIDUS$4:\n            prefix = this.scanner.lookupType(1) === SOLIDUS$4 ? 2 : 1;\n            break;\n    }\n\n    if (this.scanner.lookupType(prefix) === HYPHENMINUS$6) {\n        prefix++;\n    }\n\n    if (prefix) {\n        this.scanner.skip(prefix);\n    }\n\n    this.scanner.eat(IDENTIFIER$10);\n\n    return this.scanner.substrToCursor(start);\n}\n\n// ! ws* important\nfunction getImportant(scanner) {\n    scanner.eat(EXCLAMATIONMARK$2);\n    scanner.skipSC();\n\n    var important = scanner.consume(IDENTIFIER$10);\n\n    // store original value in case it differ from `important`\n    // for better original source restoring and hacks like `!ie` support\n    return important === 'important' ? true : important;\n}\n\nvar TYPE$20 = tokenizer$1.TYPE;\n\nvar WHITESPACE$5 = TYPE$20.WhiteSpace;\nvar COMMENT$5 = TYPE$20.Comment;\nvar SEMICOLON$5 = TYPE$20.Semicolon;\n\nfunction consumeRaw$3(startToken) {\n    return this.Raw(startToken, 0, SEMICOLON$5, true, true);\n}\n\nvar DeclarationList = {\n    name: 'DeclarationList',\n    structure: {\n        children: [['Declaration']]\n    },\n    parse: function() {\n        var children = new list();\n\n        scan:\n        while (!this.scanner.eof) {\n            switch (this.scanner.tokenType) {\n                case WHITESPACE$5:\n                case COMMENT$5:\n                case SEMICOLON$5:\n                    this.scanner.next();\n                    break;\n\n                default:\n                    children.appendData(this.tolerantParse(this.Declaration, consumeRaw$3));\n            }\n        }\n\n        return {\n            type: 'DeclarationList',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        this.each(processChunk, node);\n    }\n};\n\nvar NUMBER$5 = tokenizer$1.TYPE.Number;\n\n// special reader for units to avoid adjoined IE hacks (i.e. '1px\\9')\nfunction readUnit(scanner) {\n    var unit = scanner.getTokenValue();\n    var backSlashPos = unit.indexOf('\\\\');\n\n    if (backSlashPos > 0) {\n        // patch token offset\n        scanner.tokenStart += backSlashPos;\n\n        // return part before backslash\n        return unit.substring(0, backSlashPos);\n    }\n\n    // no backslash in unit name\n    scanner.next();\n\n    return unit;\n}\n\n// number ident\nvar Dimension = {\n    name: 'Dimension',\n    structure: {\n        value: String,\n        unit: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var value = this.scanner.consume(NUMBER$5);\n        var unit = readUnit(this.scanner);\n\n        return {\n            type: 'Dimension',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: value,\n            unit: unit\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.value);\n        processChunk(node.unit);\n    }\n};\n\nvar TYPE$21 = tokenizer$1.TYPE;\nvar RIGHTPARENTHESIS$2 = TYPE$21.RightParenthesis;\n\n// <function-token> <sequence> ')'\nvar _Function = {\n    name: 'Function',\n    structure: {\n        name: String,\n        children: [[]]\n    },\n    parse: function(readSequence, recognizer) {\n        var start = this.scanner.tokenStart;\n        var name = this.scanner.consumeFunctionName();\n        var nameLowerCase = name.toLowerCase();\n        var children;\n\n        children = recognizer.hasOwnProperty(nameLowerCase)\n            ? recognizer[nameLowerCase].call(this, recognizer)\n            : readSequence.call(this, recognizer);\n\n        this.scanner.eat(RIGHTPARENTHESIS$2);\n\n        return {\n            type: 'Function',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.name);\n        processChunk('(');\n        this.each(processChunk, node);\n        processChunk(')');\n    },\n    walkContext: 'function'\n};\n\nvar isHex$1 = tokenizer$1.isHex;\nvar TYPE$22 = tokenizer$1.TYPE;\n\nvar IDENTIFIER$11 = TYPE$22.Identifier;\nvar NUMBER$6 = TYPE$22.Number;\nvar NUMBERSIGN$3 = TYPE$22.NumberSign;\n\nfunction consumeHexSequence(scanner, required) {\n    if (!isHex$1(scanner.source.charCodeAt(scanner.tokenStart))) {\n        if (required) {\n            scanner.error('Unexpected input', scanner.tokenStart);\n        } else {\n            return;\n        }\n    }\n\n    for (var pos = scanner.tokenStart + 1; pos < scanner.tokenEnd; pos++) {\n        var code = scanner.source.charCodeAt(pos);\n\n        // break on non-hex char\n        if (!isHex$1(code)) {\n            // break token, exclude symbol\n            scanner.tokenStart = pos;\n            return;\n        }\n    }\n\n    // token is full hex sequence, go to next token\n    scanner.next();\n}\n\n// # ident\nvar HexColor = {\n    name: 'HexColor',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        this.scanner.eat(NUMBERSIGN$3);\n\n        scan:\n        switch (this.scanner.tokenType) {\n            case NUMBER$6:\n                consumeHexSequence(this.scanner, true);\n\n                // if token is identifier then number consists of hex only,\n                // try to add identifier to result\n                if (this.scanner.tokenType === IDENTIFIER$11) {\n                    consumeHexSequence(this.scanner, false);\n                }\n\n                break;\n\n            case IDENTIFIER$11:\n                consumeHexSequence(this.scanner, true);\n                break;\n\n            default:\n                this.scanner.error('Number or identifier is expected');\n        }\n\n        return {\n            type: 'HexColor',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: this.scanner.substrToCursor(start + 1) // skip #\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('#');\n        processChunk(node.value);\n    }\n};\n\nvar TYPE$23 = tokenizer$1.TYPE;\nvar IDENTIFIER$12 = TYPE$23.Identifier;\n\nvar Identifier = {\n    name: 'Identifier',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        return {\n            type: 'Identifier',\n            loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),\n            name: this.scanner.consume(IDENTIFIER$12)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.name);\n    }\n};\n\nvar TYPE$24 = tokenizer$1.TYPE;\nvar IDENTIFIER$13 = TYPE$24.Identifier;\nvar NUMBERSIGN$4 = TYPE$24.NumberSign;\n\n// '#' ident\nvar IdSelector = {\n    name: 'IdSelector',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        this.scanner.eat(NUMBERSIGN$4);\n\n        return {\n            type: 'IdSelector',\n            loc: this.getLocation(this.scanner.tokenStart - 1, this.scanner.tokenEnd),\n            name: this.scanner.consume(IDENTIFIER$13)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('#');\n        processChunk(node.name);\n    }\n};\n\nvar TYPE$25 = tokenizer$1.TYPE;\n\nvar IDENTIFIER$14 = TYPE$25.Identifier;\nvar NUMBER$7 = TYPE$25.Number;\nvar LEFTPARENTHESIS$4 = TYPE$25.LeftParenthesis;\nvar RIGHTPARENTHESIS$3 = TYPE$25.RightParenthesis;\nvar COLON$4 = TYPE$25.Colon;\nvar SOLIDUS$5 = TYPE$25.Solidus;\n\nvar MediaFeature = {\n    name: 'MediaFeature',\n    structure: {\n        name: String,\n        value: ['Identifier', 'Number', 'Dimension', 'Ratio', null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var name;\n        var value = null;\n\n        this.scanner.eat(LEFTPARENTHESIS$4);\n        this.scanner.skipSC();\n\n        name = this.scanner.consume(IDENTIFIER$14);\n        this.scanner.skipSC();\n\n        if (this.scanner.tokenType !== RIGHTPARENTHESIS$3) {\n            this.scanner.eat(COLON$4);\n            this.scanner.skipSC();\n\n            switch (this.scanner.tokenType) {\n                case NUMBER$7:\n                    if (this.scanner.lookupType(1) === IDENTIFIER$14) {\n                        value = this.Dimension();\n                    } else if (this.scanner.lookupNonWSType(1) === SOLIDUS$5) {\n                        value = this.Ratio();\n                    } else {\n                        value = this.Number();\n                    }\n\n                    break;\n\n                case IDENTIFIER$14:\n                    value = this.Identifier();\n\n                    break;\n\n                default:\n                    this.scanner.error('Number, dimension, ratio or identifier is expected');\n            }\n\n            this.scanner.skipSC();\n        }\n\n        this.scanner.eat(RIGHTPARENTHESIS$3);\n\n        return {\n            type: 'MediaFeature',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            value: value\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('(');\n        processChunk(node.name);\n        if (node.value !== null) {\n            processChunk(':');\n            this.generate(processChunk, node.value);\n        }\n        processChunk(')');\n    }\n};\n\nvar TYPE$26 = tokenizer$1.TYPE;\n\nvar WHITESPACE$6 = TYPE$26.WhiteSpace;\nvar COMMENT$6 = TYPE$26.Comment;\nvar IDENTIFIER$15 = TYPE$26.Identifier;\nvar LEFTPARENTHESIS$5 = TYPE$26.LeftParenthesis;\n\nvar MediaQuery = {\n    name: 'MediaQuery',\n    structure: {\n        children: [['Identifier', 'MediaFeature', 'WhiteSpace']]\n    },\n    parse: function() {\n        this.scanner.skipSC();\n\n        var children = new list();\n        var child = null;\n        var space = null;\n\n        scan:\n        while (!this.scanner.eof) {\n            switch (this.scanner.tokenType) {\n                case COMMENT$6:\n                    this.scanner.next();\n                    continue;\n\n                case WHITESPACE$6:\n                    space = this.WhiteSpace();\n                    continue;\n\n                case IDENTIFIER$15:\n                    child = this.Identifier();\n                    break;\n\n                case LEFTPARENTHESIS$5:\n                    child = this.MediaFeature();\n                    break;\n\n                default:\n                    break scan;\n            }\n\n            if (space !== null) {\n                children.appendData(space);\n                space = null;\n            }\n\n            children.appendData(child);\n        }\n\n        if (child === null) {\n            this.scanner.error('Identifier or parenthesis is expected');\n        }\n\n        return {\n            type: 'MediaQuery',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        this.each(processChunk, node);\n    }\n};\n\nvar COMMA$2 = tokenizer$1.TYPE.Comma;\n\nvar MediaQueryList = {\n    name: 'MediaQueryList',\n    structure: {\n        children: [['MediaQuery']]\n    },\n    parse: function(relative) {\n        var children = new list();\n\n        this.scanner.skipSC();\n\n        while (!this.scanner.eof) {\n            children.appendData(this.MediaQuery(relative));\n\n            if (this.scanner.tokenType !== COMMA$2) {\n                break;\n            }\n\n            this.scanner.next();\n        }\n\n        return {\n            type: 'MediaQueryList',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        this.eachComma(processChunk, node);\n    }\n};\n\n// https://drafts.csswg.org/css-syntax-3/#the-anb-type\nvar Nth = {\n    name: 'Nth',\n    structure: {\n        nth: ['AnPlusB', 'Identifier'],\n        selector: ['SelectorList', null]\n    },\n    parse: function(allowOfClause) {\n        this.scanner.skipSC();\n\n        var start = this.scanner.tokenStart;\n        var end = start;\n        var selector = null;\n        var query;\n\n        if (this.scanner.lookupValue(0, 'odd') || this.scanner.lookupValue(0, 'even')) {\n            query = this.Identifier();\n        } else {\n            query = this.AnPlusB();\n        }\n\n        this.scanner.skipSC();\n\n        if (allowOfClause && this.scanner.lookupValue(0, 'of')) {\n            this.scanner.next();\n\n            selector = this.SelectorList();\n\n            if (this.needPositions) {\n                end = selector.children.last().loc.end.offset;\n            }\n        } else {\n            if (this.needPositions) {\n                end = query.loc.end.offset;\n            }\n        }\n\n        return {\n            type: 'Nth',\n            loc: this.getLocation(start, end),\n            nth: query,\n            selector: selector\n        };\n    },\n    generate: function(processChunk, node) {\n        this.generate(processChunk, node.nth);\n        if (node.selector !== null) {\n            processChunk(' of ');\n            this.generate(processChunk, node.selector);\n        }\n    }\n};\n\nvar NUMBER$8 = tokenizer$1.TYPE.Number;\n\nvar _Number = {\n    name: 'Number',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        return {\n            type: 'Number',\n            loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),\n            value: this.scanner.consume(NUMBER$8)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.value);\n    }\n};\n\n// '/' | '*' | ',' | ':' | '+' | '-'\nvar Operator = {\n    name: 'Operator',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        this.scanner.next();\n\n        return {\n            type: 'Operator',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: this.scanner.substrToCursor(start)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.value);\n    }\n};\n\nvar TYPE$27 = tokenizer$1.TYPE;\nvar LEFTPARENTHESIS$6 = TYPE$27.LeftParenthesis;\nvar RIGHTPARENTHESIS$4 = TYPE$27.RightParenthesis;\n\nvar Parentheses = {\n    name: 'Parentheses',\n    structure: {\n        children: [[]]\n    },\n    parse: function(readSequence, recognizer) {\n        var start = this.scanner.tokenStart;\n        var children = null;\n\n        this.scanner.eat(LEFTPARENTHESIS$6);\n        children = readSequence.call(this, recognizer);\n        this.scanner.eat(RIGHTPARENTHESIS$4);\n\n        return {\n            type: 'Parentheses',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('(');\n        this.each(processChunk, node);\n        processChunk(')');\n    }\n};\n\nvar TYPE$28 = tokenizer$1.TYPE;\n\nvar NUMBER$9 = TYPE$28.Number;\nvar PERCENTSIGN$1 = TYPE$28.PercentSign;\n\nvar Percentage = {\n    name: 'Percentage',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var number = this.scanner.consume(NUMBER$9);\n\n        this.scanner.eat(PERCENTSIGN$1);\n\n        return {\n            type: 'Percentage',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: number\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.value);\n        processChunk('%');\n    }\n};\n\nvar TYPE$29 = tokenizer$1.TYPE;\n\nvar IDENTIFIER$16 = TYPE$29.Identifier;\nvar FUNCTION$4 = TYPE$29.Function;\nvar COLON$5 = TYPE$29.Colon;\nvar RIGHTPARENTHESIS$5 = TYPE$29.RightParenthesis;\n\n// : ident [ '(' .. ')' ]?\nvar PseudoClassSelector = {\n    name: 'PseudoClassSelector',\n    structure: {\n        name: String,\n        children: [['Raw'], null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var children = null;\n        var name;\n        var nameLowerCase;\n\n        this.scanner.eat(COLON$5);\n\n        if (this.scanner.tokenType === FUNCTION$4) {\n            name = this.scanner.consumeFunctionName();\n            nameLowerCase = name.toLowerCase();\n\n            if (this.pseudo.hasOwnProperty(nameLowerCase)) {\n                this.scanner.skipSC();\n                children = this.pseudo[nameLowerCase].call(this);\n                this.scanner.skipSC();\n            } else {\n                children = new list().appendData(\n                    this.Raw(this.scanner.currentToken, 0, 0, false, false)\n                );\n            }\n\n            this.scanner.eat(RIGHTPARENTHESIS$5);\n        } else {\n            name = this.scanner.consume(IDENTIFIER$16);\n        }\n\n        return {\n            type: 'PseudoClassSelector',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(':');\n        processChunk(node.name);\n\n        if (node.children !== null) {\n            processChunk('(');\n            this.each(processChunk, node);\n            processChunk(')');\n        }\n    },\n    walkContext: 'function'\n};\n\nvar TYPE$30 = tokenizer$1.TYPE;\n\nvar IDENTIFIER$17 = TYPE$30.Identifier;\nvar FUNCTION$5 = TYPE$30.Function;\nvar COLON$6 = TYPE$30.Colon;\nvar RIGHTPARENTHESIS$6 = TYPE$30.RightParenthesis;\n\n// :: ident [ '(' .. ')' ]?\nvar PseudoElementSelector = {\n    name: 'PseudoElementSelector',\n    structure: {\n        name: String,\n        children: [['Raw'], null]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var children = null;\n        var name;\n        var nameLowerCase;\n\n        this.scanner.eat(COLON$6);\n        this.scanner.eat(COLON$6);\n\n        if (this.scanner.tokenType === FUNCTION$5) {\n            name = this.scanner.consumeFunctionName();\n            nameLowerCase = name.toLowerCase();\n\n            if (this.pseudo.hasOwnProperty(nameLowerCase)) {\n                this.scanner.skipSC();\n                children = this.pseudo[nameLowerCase].call(this);\n                this.scanner.skipSC();\n            } else {\n                children = new list().appendData(\n                    this.Raw(this.scanner.currentToken, 0, 0, false, false)\n                );\n            }\n\n            this.scanner.eat(RIGHTPARENTHESIS$6);\n        } else {\n            name = this.scanner.consume(IDENTIFIER$17);\n        }\n\n        return {\n            type: 'PseudoElementSelector',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: name,\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('::');\n        processChunk(node.name);\n\n        if (node.children !== null) {\n            processChunk('(');\n            this.each(processChunk, node);\n            processChunk(')');\n        }\n    },\n    walkContext: 'function'\n};\n\nvar isNumber$3 = tokenizer$1.isNumber;\nvar TYPE$31 = tokenizer$1.TYPE;\nvar NUMBER$10 = TYPE$31.Number;\nvar SOLIDUS$6 = TYPE$31.Solidus;\nvar FULLSTOP$4 = TYPE$31.FullStop;\n\n// Terms of <ratio> should to be a positive number (not zero or negative)\n// (see https://drafts.csswg.org/mediaqueries-3/#values)\n// However, -o-min-device-pixel-ratio takes fractional values as a ratio's term\n// and this is using by various sites. Therefore we relax checking on parse\n// to test a term is unsigned number without exponent part.\n// Additional checks may to be applied on lexer validation.\nfunction consumeNumber(scanner) {\n    var value = scanner.consumeNonWS(NUMBER$10);\n\n    for (var i = 0; i < value.length; i++) {\n        var code = value.charCodeAt(i);\n        if (!isNumber$3(code) && code !== FULLSTOP$4) {\n            scanner.error('Unsigned number is expected', scanner.tokenStart - value.length + i);\n        }\n    }\n\n    if (Number(value) === 0) {\n        scanner.error('Zero number is not allowed', scanner.tokenStart - value.length);\n    }\n\n    return value;\n}\n\n// <positive-integer> S* '/' S* <positive-integer>\nvar Ratio = {\n    name: 'Ratio',\n    structure: {\n        left: String,\n        right: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var left = consumeNumber(this.scanner);\n        var right;\n\n        this.scanner.eatNonWS(SOLIDUS$6);\n        right = consumeNumber(this.scanner);\n\n        return {\n            type: 'Ratio',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            left: left,\n            right: right\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.left);\n        processChunk('/');\n        processChunk(node.right);\n    }\n};\n\nvar Raw = {\n    name: 'Raw',\n    structure: {\n        value: String\n    },\n    parse: function(startToken, endTokenType1, endTokenType2, includeTokenType2, excludeWhiteSpace) {\n        var startOffset = this.scanner.getTokenStart(startToken);\n        var endOffset;\n\n        this.scanner.skip(\n            this.scanner.getRawLength(\n                startToken,\n                endTokenType1,\n                endTokenType2,\n                includeTokenType2\n            )\n        );\n\n        if (excludeWhiteSpace && this.scanner.tokenStart > startOffset) {\n            endOffset = this.scanner.getOffsetExcludeWS();\n        } else {\n            endOffset = this.scanner.tokenStart;\n        }\n\n        return {\n            type: 'Raw',\n            loc: this.getLocation(startOffset, endOffset),\n            value: this.scanner.source.substring(startOffset, endOffset)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.value);\n    }\n};\n\nvar TYPE$32 = tokenizer$1.TYPE;\n\nvar LEFTCURLYBRACKET$5 = TYPE$32.LeftCurlyBracket;\n\nfunction consumeRaw$4(startToken) {\n    return this.Raw(startToken, LEFTCURLYBRACKET$5, 0, false, true);\n}\n\nvar Rule = {\n    name: 'Rule',\n    structure: {\n        selector: ['SelectorList', 'Raw'],\n        block: ['Block']\n    },\n    parse: function() {\n        var startToken = this.scanner.currentToken;\n        var startOffset = this.scanner.tokenStart;\n        var selector = this.parseSelector\n            ? this.tolerantParse(this.SelectorList, consumeRaw$4)\n            : consumeRaw$4.call(this, startToken);\n        var block = this.Block(this.Declaration);\n\n        return {\n            type: 'Rule',\n            loc: this.getLocation(startOffset, this.scanner.tokenStart),\n            selector: selector,\n            block: block\n        };\n    },\n    generate: function(processChunk, node) {\n        this.generate(processChunk, node.selector);\n        this.generate(processChunk, node.block);\n    },\n    walkContext: 'rule'\n};\n\nvar Selector = {\n    name: 'Selector',\n    structure: {\n        children: [[\n            'TypeSelector',\n            'IdSelector',\n            'ClassSelector',\n            'AttributeSelector',\n            'PseudoClassSelector',\n            'PseudoElementSelector',\n            'Combinator',\n            'WhiteSpace'\n        ]]\n    },\n    parse: function() {\n        var children = this.readSequence(this.scope.Selector);\n\n        // nothing were consumed\n        if (children.isEmpty()) {\n            this.scanner.error('Selector is expected');\n        }\n\n        return {\n            type: 'Selector',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        this.each(processChunk, node);\n    }\n};\n\nvar TYPE$33 = tokenizer$1.TYPE;\n\nvar COMMA$3 = TYPE$33.Comma;\nvar LEFTCURLYBRACKET$6 = TYPE$33.LeftCurlyBracket;\n\nvar SelectorList = {\n    name: 'SelectorList',\n    structure: {\n        children: [['Selector', 'Raw']]\n    },\n    parse: function() {\n        var children = new list();\n\n        while (!this.scanner.eof) {\n            children.appendData(this.parseSelector\n                ? this.Selector()\n                : this.Raw(this.scanner.currentToken, COMMA$3, LEFTCURLYBRACKET$6, false, false)\n            );\n\n            if (this.scanner.tokenType === COMMA$3) {\n                this.scanner.next();\n                continue;\n            }\n\n            break;\n        }\n\n        return {\n            type: 'SelectorList',\n            loc: this.getLocationFromList(children),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        this.eachComma(processChunk, node);\n    },\n    walkContext: 'selector'\n};\n\nvar STRING$5 = tokenizer$1.TYPE.String;\n\nvar _String = {\n    name: 'String',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        return {\n            type: 'String',\n            loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),\n            value: this.scanner.consume(STRING$5)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.value);\n    }\n};\n\nvar TYPE$34 = tokenizer$1.TYPE;\n\nvar WHITESPACE$7 = TYPE$34.WhiteSpace;\nvar COMMENT$7 = TYPE$34.Comment;\nvar EXCLAMATIONMARK$3 = TYPE$34.ExclamationMark;\nvar ATRULE$4 = TYPE$34.Atrule;\nvar CDO$3 = TYPE$34.CDO;\nvar CDC$3 = TYPE$34.CDC;\n\nfunction consumeRaw$5(startToken) {\n    return this.Raw(startToken, 0, 0, false, false);\n}\n\nvar StyleSheet = {\n    name: 'StyleSheet',\n    structure: {\n        children: [['Comment', 'Atrule', 'Rule', 'Raw']]\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var children = new list();\n        var child;\n\n        scan:\n        while (!this.scanner.eof) {\n            switch (this.scanner.tokenType) {\n                case WHITESPACE$7:\n                    this.scanner.next();\n                    continue;\n\n                case COMMENT$7:\n                    // ignore comments except exclamation comments (i.e. /*! .. */) on top level\n                    if (this.scanner.source.charCodeAt(this.scanner.tokenStart + 2) !== EXCLAMATIONMARK$3) {\n                        this.scanner.next();\n                        continue;\n                    }\n\n                    child = this.Comment();\n                    break;\n\n                case CDO$3: // \x3c!--\n                    child = this.CDO();\n                    break;\n\n                case CDC$3: // --\x3e\n                    child = this.CDC();\n                    break;\n\n                // CSS Syntax Module Level 3\n                // §2.2 Error handling\n                // At the \"top level\" of a stylesheet, an <at-keyword-token> starts an at-rule.\n                case ATRULE$4:\n                    child = this.Atrule();\n                    break;\n\n                // Anything else starts a qualified rule ...\n                default:\n                    child = this.tolerantParse(this.Rule, consumeRaw$5);\n            }\n\n            children.appendData(child);\n        }\n\n        return {\n            type: 'StyleSheet',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        this.each(processChunk, node);\n    },\n    walkContext: 'stylesheet'\n};\n\nvar TYPE$35 = tokenizer$1.TYPE;\n\nvar IDENTIFIER$18 = TYPE$35.Identifier;\nvar ASTERISK$5 = TYPE$35.Asterisk;\nvar VERTICALLINE$2 = TYPE$35.VerticalLine;\n\nfunction eatIdentifierOrAsterisk() {\n    if (this.scanner.tokenType !== IDENTIFIER$18 &&\n        this.scanner.tokenType !== ASTERISK$5) {\n        this.scanner.error('Identifier or asterisk is expected');\n    }\n\n    this.scanner.next();\n}\n\n// ident\n// ident|ident\n// ident|*\n// *\n// *|ident\n// *|*\n// |ident\n// |*\nvar TypeSelector = {\n    name: 'TypeSelector',\n    structure: {\n        name: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        if (this.scanner.tokenType === VERTICALLINE$2) {\n            this.scanner.next();\n            eatIdentifierOrAsterisk.call(this);\n        } else {\n            eatIdentifierOrAsterisk.call(this);\n\n            if (this.scanner.tokenType === VERTICALLINE$2) {\n                this.scanner.next();\n                eatIdentifierOrAsterisk.call(this);\n            }\n        }\n\n        return {\n            type: 'TypeSelector',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            name: this.scanner.substrToCursor(start)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.name);\n    }\n};\n\nvar isHex$2 = tokenizer$1.isHex;\nvar TYPE$36 = tokenizer$1.TYPE;\n\nvar IDENTIFIER$19 = TYPE$36.Identifier;\nvar NUMBER$11 = TYPE$36.Number;\nvar PLUSSIGN$7 = TYPE$36.PlusSign;\nvar HYPHENMINUS$7 = TYPE$36.HyphenMinus;\nvar FULLSTOP$5 = TYPE$36.FullStop;\nvar QUESTIONMARK = TYPE$36.QuestionMark;\n\nfunction scanUnicodeNumber(scanner) {\n    for (var pos = scanner.tokenStart + 1; pos < scanner.tokenEnd; pos++) {\n        var code = scanner.source.charCodeAt(pos);\n\n        // break on fullstop or hyperminus/plussign after exponent\n        if (code === FULLSTOP$5 || code === PLUSSIGN$7) {\n            // break token, exclude symbol\n            scanner.tokenStart = pos;\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// https://drafts.csswg.org/css-syntax-3/#urange\nfunction scanUnicodeRange(scanner) {\n    var hexStart = scanner.tokenStart + 1; // skip +\n    var hexLength = 0;\n\n    scan: {\n        if (scanner.tokenType === NUMBER$11) {\n            if (scanner.source.charCodeAt(scanner.tokenStart) !== FULLSTOP$5 && scanUnicodeNumber(scanner)) {\n                scanner.next();\n            } else if (scanner.source.charCodeAt(scanner.tokenStart) !== HYPHENMINUS$7) {\n                break scan;\n            }\n        } else {\n            scanner.next(); // PLUSSIGN\n        }\n\n        if (scanner.tokenType === HYPHENMINUS$7) {\n            scanner.next();\n        }\n\n        if (scanner.tokenType === NUMBER$11) {\n            scanner.next();\n        }\n\n        if (scanner.tokenType === IDENTIFIER$19) {\n            scanner.next();\n        }\n\n        if (scanner.tokenStart === hexStart) {\n            scanner.error('Unexpected input', hexStart);\n        }\n    }\n\n    // validate for U+x{1,6} or U+x{1,6}-x{1,6}\n    // where x is [0-9a-fA-F]\n    for (var i = hexStart, wasHyphenMinus = false; i < scanner.tokenStart; i++) {\n        var code = scanner.source.charCodeAt(i);\n\n        if (isHex$2(code) === false && (code !== HYPHENMINUS$7 || wasHyphenMinus)) {\n            scanner.error('Unexpected input', i);\n        }\n\n        if (code === HYPHENMINUS$7) {\n            // hex sequence shouldn't be an empty\n            if (hexLength === 0) {\n                scanner.error('Unexpected input', i);\n            }\n\n            wasHyphenMinus = true;\n            hexLength = 0;\n        } else {\n            hexLength++;\n\n            // too long hex sequence\n            if (hexLength > 6) {\n                scanner.error('Too long hex sequence', i);\n            }\n        }\n\n    }\n\n    // check we have a non-zero sequence\n    if (hexLength === 0) {\n        scanner.error('Unexpected input', i - 1);\n    }\n\n    // U+abc???\n    if (!wasHyphenMinus) {\n        // consume as many U+003F QUESTION MARK (?) code points as possible\n        for (; hexLength < 6 && !scanner.eof; scanner.next()) {\n            if (scanner.tokenType !== QUESTIONMARK) {\n                break;\n            }\n\n            hexLength++;\n        }\n    }\n}\n\nvar UnicodeRange = {\n    name: 'UnicodeRange',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n\n        this.scanner.next(); // U or u\n        scanUnicodeRange(this.scanner);\n\n        return {\n            type: 'UnicodeRange',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: this.scanner.substrToCursor(start)\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.value);\n    }\n};\n\nvar TYPE$37 = tokenizer$1.TYPE;\n\nvar STRING$6 = TYPE$37.String;\nvar URL$4 = TYPE$37.Url;\nvar RAW$2 = TYPE$37.Raw;\nvar RIGHTPARENTHESIS$7 = TYPE$37.RightParenthesis;\n\n// url '(' S* (string | raw) S* ')'\nvar Url = {\n    name: 'Url',\n    structure: {\n        value: ['String', 'Raw']\n    },\n    parse: function() {\n        var start = this.scanner.tokenStart;\n        var value;\n\n        this.scanner.eat(URL$4);\n        this.scanner.skipSC();\n\n        switch (this.scanner.tokenType) {\n            case STRING$6:\n                value = this.String();\n                break;\n\n            case RAW$2:\n                value = this.Raw(this.scanner.currentToken, 0, RAW$2, true, false);\n                break;\n\n            default:\n                this.scanner.error('String or Raw is expected');\n        }\n\n        this.scanner.skipSC();\n        this.scanner.eat(RIGHTPARENTHESIS$7);\n\n        return {\n            type: 'Url',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            value: value\n        };\n    },\n    generate: function(processChunk, node) {\n        processChunk('url');\n        processChunk('(');\n        this.generate(processChunk, node.value);\n        processChunk(')');\n    }\n};\n\nvar endsWith$1 = tokenizer$1.endsWith;\nvar TYPE$38 = tokenizer$1.TYPE;\n\nvar WHITESPACE$8 = TYPE$38.WhiteSpace;\nvar COMMENT$8 = TYPE$38.Comment;\nvar FUNCTION$6 = TYPE$38.Function;\nvar COLON$7 = TYPE$38.Colon;\nvar SEMICOLON$6 = TYPE$38.Semicolon;\nvar EXCLAMATIONMARK$4 = TYPE$38.ExclamationMark;\n\n// 'progid:' ws* 'DXImageTransform.Microsoft.' ident ws* '(' .* ')'\nfunction checkProgid(scanner) {\n    var offset = 0;\n\n    for (var type; type = scanner.lookupType(offset); offset++) {\n        if (type !== WHITESPACE$8 && type !== COMMENT$8) {\n            break;\n        }\n    }\n\n    if (scanner.lookupValue(offset, 'alpha(') ||\n        scanner.lookupValue(offset, 'chroma(') ||\n        scanner.lookupValue(offset, 'dropshadow(')) {\n        if (scanner.lookupType(offset) !== FUNCTION$6) {\n            return false;\n        }\n    } else {\n        if (scanner.lookupValue(offset, 'progid') === false ||\n            scanner.lookupType(offset + 1) !== COLON$7) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nvar Value = {\n    name: 'Value',\n    structure: {\n        children: [[]]\n    },\n    parse: function(property) {\n        // special parser for filter property since it can contains non-standart syntax for old IE\n        if (property !== null && endsWith$1(property, 'filter') && checkProgid(this.scanner)) {\n            this.scanner.skipSC();\n            return this.Raw(this.scanner.currentToken, EXCLAMATIONMARK$4, SEMICOLON$6, false, false);\n        }\n\n        var start = this.scanner.tokenStart;\n        var children = this.readSequence(this.scope.Value);\n\n        return {\n            type: 'Value',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            children: children\n        };\n    },\n    generate: function(processChunk, node) {\n        this.each(processChunk, node);\n    }\n};\n\nvar WHITESPACE$9 = tokenizer$1.TYPE.WhiteSpace;\nvar SPACE$2 = Object.freeze({\n    type: 'WhiteSpace',\n    loc: null,\n    value: ' '\n});\n\nvar WhiteSpace = {\n    name: 'WhiteSpace',\n    structure: {\n        value: String\n    },\n    parse: function() {\n        this.scanner.eat(WHITESPACE$9);\n        return SPACE$2;\n\n        // return {\n        //     type: 'WhiteSpace',\n        //     loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),\n        //     value: this.scanner.consume(WHITESPACE)\n        // };\n    },\n    generate: function(processChunk, node) {\n        processChunk(node.value);\n    }\n};\n\nvar node = {\n    AnPlusB: AnPlusB,\n    Atrule: Atrule,\n    AtruleExpression: AtruleExpression,\n    AttributeSelector: AttributeSelector,\n    Block: Block,\n    Brackets: Brackets,\n    CDC: CDC_1,\n    CDO: CDO_1,\n    ClassSelector: ClassSelector,\n    Combinator: Combinator,\n    Comment: Comment,\n    Declaration: Declaration,\n    DeclarationList: DeclarationList,\n    Dimension: Dimension,\n    Function: _Function,\n    HexColor: HexColor,\n    Identifier: Identifier,\n    IdSelector: IdSelector,\n    MediaFeature: MediaFeature,\n    MediaQuery: MediaQuery,\n    MediaQueryList: MediaQueryList,\n    Nth: Nth,\n    Number: _Number,\n    Operator: Operator,\n    Parentheses: Parentheses,\n    Percentage: Percentage,\n    PseudoClassSelector: PseudoClassSelector,\n    PseudoElementSelector: PseudoElementSelector,\n    Ratio: Ratio,\n    Raw: Raw,\n    Rule: Rule,\n    Selector: Selector,\n    SelectorList: SelectorList,\n    String: _String,\n    StyleSheet: StyleSheet,\n    TypeSelector: TypeSelector,\n    UnicodeRange: UnicodeRange,\n    Url: Url,\n    Value: Value,\n    WhiteSpace: WhiteSpace\n};\n\nvar parser = {\n    parseContext: {\n        default: 'StyleSheet',\n        stylesheet: 'StyleSheet',\n        atrule: 'Atrule',\n        atruleExpression: function(options) {\n            return this.AtruleExpression(options.atrule ? String(options.atrule) : null);\n        },\n        mediaQueryList: 'MediaQueryList',\n        mediaQuery: 'MediaQuery',\n        rule: 'Rule',\n        selectorList: 'SelectorList',\n        selector: 'Selector',\n        block: function() {\n            return this.Block(this.Declaration);\n        },\n        declarationList: 'DeclarationList',\n        declaration: 'Declaration',\n        value: function(options) {\n            return this.Value(options.property ? String(options.property) : null);\n        }\n    },\n    scope: scope,\n    atrule: atrule,\n    pseudo: pseudo,\n    node: node\n};\n\nvar parser$1 = create(parser);\n\nfunction walk ( ast, ref) {\n\tvar enter = ref.enter;\n\tvar leave = ref.leave;\n\n\tvisit( ast, null, enter, leave );\n}\n\nvar shouldSkip = false;\nvar context = { skip: function () { return shouldSkip = true; } };\n\nvar childKeys = {};\n\nvar toString$1 = Object.prototype.toString;\n\nfunction isArray$1 ( thing ) {\n\treturn toString$1.call( thing ) === '[object Array]';\n}\n\nfunction visit ( node, parent, enter, leave, prop, index ) {\n\tif ( !node ) { return; }\n\n\tif ( enter ) {\n\t\tvar _shouldSkip = shouldSkip;\n\t\tshouldSkip = false;\n\t\tenter.call( context, node, parent, prop, index );\n\t\tvar skipped = shouldSkip;\n\t\tshouldSkip = _shouldSkip;\n\n\t\tif ( skipped ) { return; }\n\t}\n\n\tvar keys = childKeys[ node.type ] || (\n\t\tchildKeys[ node.type ] = Object.keys( node ).filter( function (key) { return typeof node[ key ] === 'object'; } )\n\t);\n\n\tfor ( var i = 0; i < keys.length; i += 1 ) {\n\t\tvar key = keys[i];\n\t\tvar value = node[ key ];\n\n\t\tif ( isArray$1( value ) ) {\n\t\t\tfor ( var j = 0; j < value.length; j += 1 ) {\n\t\t\t\tvisit( value[j], node, enter, leave, key, j );\n\t\t\t}\n\t\t}\n\n\t\telse if ( value && value.type ) {\n\t\t\tvisit( value, node, enter, leave, key, null );\n\t\t}\n\t}\n\n\tif ( leave ) {\n\t\tleave( node, parent, prop, index );\n\t}\n}\n\nfunction readStyle(parser, start, attributes) {\n    const contentStart = parser.index;\n    const styles = parser.readUntil(/<\\/style>/);\n    const contentEnd = parser.index;\n    let ast;\n    try {\n        ast = parser$1(styles, {\n            positions: true,\n            offset: contentStart,\n        });\n    }\n    catch (err) {\n        if (err.name === 'CssSyntaxError') {\n            parser.error({\n                code: `css-syntax-error`,\n                message: err.message\n            }, err.offset);\n        }\n        else {\n            throw err;\n        }\n    }\n    ast = JSON.parse(JSON.stringify(ast));\n    // tidy up AST\n    walk(ast, {\n        enter: (node) => {\n            // replace `ref:a` nodes\n            if (node.type === 'Selector') {\n                for (let i = 0; i < node.children.length; i += 1) {\n                    const a = node.children[i];\n                    const b = node.children[i + 1];\n                    if (isRefSelector(a, b)) {\n                        node.children.splice(i, 2, {\n                            type: 'RefSelector',\n                            start: a.loc.start.offset,\n                            end: b.loc.end.offset,\n                            name: b.name\n                        });\n                    }\n                }\n            }\n            if (node.loc) {\n                node.start = node.loc.start.offset;\n                node.end = node.loc.end.offset;\n                delete node.loc;\n            }\n        }\n    });\n    parser.eat('</style>', true);\n    const end = parser.index;\n    return {\n        start,\n        end,\n        attributes,\n        children: ast.children,\n        content: {\n            start: contentStart,\n            end: contentEnd,\n            styles,\n        },\n    };\n}\nfunction isRefSelector(a, b) {\n    if (!b)\n        return false;\n    return (a.type === 'TypeSelector' &&\n        a.name === 'ref' &&\n        b.type === 'PseudoClassSelector');\n}\n\nconst DIRECTIVES = {\n    Ref: {\n        names: ['ref'],\n        attribute(start, end, type, name) {\n            return { start, end, type, name };\n        },\n        allowedExpressionTypes: [],\n        error: 'ref directives cannot have a value'\n    },\n    EventHandler: {\n        names: ['on'],\n        attribute(start, end, type, name, expression) {\n            return { start, end, type, name, expression };\n        },\n        allowedExpressionTypes: ['CallExpression'],\n        error: 'Expected a method call'\n    },\n    Binding: {\n        names: ['bind'],\n        attribute(start, end, type, name, expression) {\n            return {\n                start, end, type, name,\n                value: expression || {\n                    type: 'Identifier',\n                    start: start + 5,\n                    end,\n                    name,\n                }\n            };\n        },\n        allowedExpressionTypes: ['Identifier', 'MemberExpression'],\n        error: 'Can only bind to an identifier (e.g. `foo`) or a member expression (e.g. `foo.bar` or `foo[baz]`)'\n    },\n    Transition: {\n        names: ['in', 'out', 'transition'],\n        attribute(start, end, type, name, expression, directiveName) {\n            return {\n                start, end, type, name, expression,\n                intro: directiveName === 'in' || directiveName === 'transition',\n                outro: directiveName === 'out' || directiveName === 'transition',\n            };\n        },\n        allowedExpressionTypes: ['ObjectExpression'],\n        error: 'Transition argument must be an object literal, e.g. `{ duration: 400 }`'\n    },\n    Action: {\n        names: ['use'],\n        attribute(start, end, type, name, expression) {\n            return { start, end, type, name, expression };\n        },\n        allowedExpressionTypes: ['Identifier', 'MemberExpression', 'ObjectExpression', 'Literal', 'CallExpression'],\n        error: 'Data passed to actions must be an identifier (e.g. `foo`), a member expression ' +\n            '(e.g. `foo.bar` or `foo[baz]`), a method call (e.g. `foo()`), or a literal (e.g. `true` or `\\'a string\\'`'\n    },\n};\nconst lookupByName = {};\nObject.keys(DIRECTIVES).forEach(name => {\n    const directive = DIRECTIVES[name];\n    directive.names.forEach(type => lookupByName[type] = name);\n});\nfunction readExpression$1(parser, start, quoteMark) {\n    let str = '';\n    let escaped = false;\n    for (let i = start; i < parser.template.length; i += 1) {\n        const char = parser.template[i];\n        if (quoteMark) {\n            if (char === quoteMark) {\n                if (escaped) {\n                    str += quoteMark;\n                }\n                else {\n                    break;\n                }\n            }\n            else if (escaped) {\n                str += '\\\\' + char;\n                escaped = false;\n            }\n            else if (char === '\\\\') {\n                escaped = true;\n            }\n            else {\n                str += char;\n            }\n        }\n        else if (/[\\s\\/>]/.test(char)) {\n            break;\n        }\n        else {\n            str += char;\n        }\n    }\n    const expression = parseExpressionAt(repeat(' ', start) + str, start, {\n        ecmaVersion: 9,\n    });\n    parser.index = expression.end;\n    parser.allowWhitespace();\n    if (quoteMark)\n        parser.eat(quoteMark, true);\n    return expression;\n}\nfunction readDirective(parser, start, attrName) {\n    const [directiveName, name] = attrName.split(':');\n    if (name === undefined)\n        return; // No colon in the name\n    if (directiveName === '') {\n        // not a directive — :foo is short for foo={{foo}}\n        return {\n            start: start,\n            end: start + name.length + 1,\n            type: 'Attribute',\n            name,\n            value: getShorthandValue(start + 1, name)\n        };\n    }\n    const type = lookupByName[directiveName];\n    if (!type)\n        return; // not a registered directive\n    const directive = DIRECTIVES[type];\n    let expression = null;\n    if (parser.eat('=')) {\n        const quoteMark = parser.eat(`'`) ? `'` : parser.eat(`\"`) ? `\"` : null;\n        const expressionStart = parser.index;\n        try {\n            expression = readExpression$1(parser, expressionStart, quoteMark);\n            if (directive.allowedExpressionTypes.indexOf(expression.type) === -1) {\n                parser.error({\n                    code: `invalid-directive-value`,\n                    message: directive.error\n                }, expressionStart);\n            }\n        }\n        catch (err) {\n            if (parser.template[expressionStart] === '{') {\n                // assume the mistake was wrapping the directive arguments.\n                // this could yield false positives! but hopefully not too many\n                let message = 'directive values should not be wrapped';\n                const expressionEnd = parser.template.indexOf((parser.v2 ? '}' : '}}'), expressionStart);\n                if (expressionEnd !== -1) {\n                    const value = parser.template.slice(expressionStart + (parser.v2 ? 1 : 2), expressionEnd);\n                    message += ` — use '${value}', not '${parser.v2 ? `{${value}}` : `{{${value}}}`}'`;\n                }\n                parser.error({\n                    code: `invalid-directive-value`,\n                    message\n                }, expressionStart);\n            }\n            throw err;\n        }\n    }\n    return directive.attribute(start, parser.index, type, name, expression, directiveName);\n}\nfunction getShorthandValue(start, name) {\n    const end = start + name.length;\n    return [\n        {\n            type: 'AttributeShorthand',\n            start,\n            end,\n            expression: {\n                type: 'Identifier',\n                start,\n                end,\n                name,\n            },\n        },\n    ];\n}\n\n// https://dev.w3.org/html5/html-author/charref\nvar htmlEntities = {\n    CounterClockwiseContourIntegral: 8755,\n    ClockwiseContourIntegral: 8754,\n    DoubleLongLeftRightArrow: 10234,\n    DiacriticalDoubleAcute: 733,\n    NotSquareSupersetEqual: 8931,\n    CloseCurlyDoubleQuote: 8221,\n    DoubleContourIntegral: 8751,\n    FilledVerySmallSquare: 9642,\n    NegativeVeryThinSpace: 8203,\n    NotPrecedesSlantEqual: 8928,\n    NotRightTriangleEqual: 8941,\n    NotSucceedsSlantEqual: 8929,\n    CapitalDifferentialD: 8517,\n    DoubleLeftRightArrow: 8660,\n    DoubleLongRightArrow: 10233,\n    EmptyVerySmallSquare: 9643,\n    NestedGreaterGreater: 8811,\n    NotDoubleVerticalBar: 8742,\n    NotLeftTriangleEqual: 8940,\n    NotSquareSubsetEqual: 8930,\n    OpenCurlyDoubleQuote: 8220,\n    ReverseUpEquilibrium: 10607,\n    DoubleLongLeftArrow: 10232,\n    DownLeftRightVector: 10576,\n    LeftArrowRightArrow: 8646,\n    NegativeMediumSpace: 8203,\n    RightArrowLeftArrow: 8644,\n    SquareSupersetEqual: 8850,\n    leftrightsquigarrow: 8621,\n    DownRightTeeVector: 10591,\n    DownRightVectorBar: 10583,\n    LongLeftRightArrow: 10231,\n    Longleftrightarrow: 10234,\n    NegativeThickSpace: 8203,\n    PrecedesSlantEqual: 8828,\n    ReverseEquilibrium: 8651,\n    RightDoubleBracket: 10215,\n    RightDownTeeVector: 10589,\n    RightDownVectorBar: 10581,\n    RightTriangleEqual: 8885,\n    SquareIntersection: 8851,\n    SucceedsSlantEqual: 8829,\n    blacktriangleright: 9656,\n    longleftrightarrow: 10231,\n    DoubleUpDownArrow: 8661,\n    DoubleVerticalBar: 8741,\n    DownLeftTeeVector: 10590,\n    DownLeftVectorBar: 10582,\n    FilledSmallSquare: 9724,\n    GreaterSlantEqual: 10878,\n    LeftDoubleBracket: 10214,\n    LeftDownTeeVector: 10593,\n    LeftDownVectorBar: 10585,\n    LeftTriangleEqual: 8884,\n    NegativeThinSpace: 8203,\n    NotReverseElement: 8716,\n    NotTildeFullEqual: 8775,\n    RightAngleBracket: 10217,\n    RightUpDownVector: 10575,\n    SquareSubsetEqual: 8849,\n    VerticalSeparator: 10072,\n    blacktriangledown: 9662,\n    blacktriangleleft: 9666,\n    leftrightharpoons: 8651,\n    rightleftharpoons: 8652,\n    twoheadrightarrow: 8608,\n    DiacriticalAcute: 180,\n    DiacriticalGrave: 96,\n    DiacriticalTilde: 732,\n    DoubleRightArrow: 8658,\n    DownArrowUpArrow: 8693,\n    EmptySmallSquare: 9723,\n    GreaterEqualLess: 8923,\n    GreaterFullEqual: 8807,\n    LeftAngleBracket: 10216,\n    LeftUpDownVector: 10577,\n    LessEqualGreater: 8922,\n    NonBreakingSpace: 160,\n    NotRightTriangle: 8939,\n    NotSupersetEqual: 8841,\n    RightTriangleBar: 10704,\n    RightUpTeeVector: 10588,\n    RightUpVectorBar: 10580,\n    UnderParenthesis: 9181,\n    UpArrowDownArrow: 8645,\n    circlearrowright: 8635,\n    downharpoonright: 8642,\n    ntrianglerighteq: 8941,\n    rightharpoondown: 8641,\n    rightrightarrows: 8649,\n    twoheadleftarrow: 8606,\n    vartriangleright: 8883,\n    CloseCurlyQuote: 8217,\n    ContourIntegral: 8750,\n    DoubleDownArrow: 8659,\n    DoubleLeftArrow: 8656,\n    DownRightVector: 8641,\n    LeftRightVector: 10574,\n    LeftTriangleBar: 10703,\n    LeftUpTeeVector: 10592,\n    LeftUpVectorBar: 10584,\n    LowerRightArrow: 8600,\n    NotGreaterEqual: 8817,\n    NotGreaterTilde: 8821,\n    NotLeftTriangle: 8938,\n    OverParenthesis: 9180,\n    RightDownVector: 8642,\n    ShortRightArrow: 8594,\n    UpperRightArrow: 8599,\n    bigtriangledown: 9661,\n    circlearrowleft: 8634,\n    curvearrowright: 8631,\n    downharpoonleft: 8643,\n    leftharpoondown: 8637,\n    leftrightarrows: 8646,\n    nLeftrightarrow: 8654,\n    nleftrightarrow: 8622,\n    ntrianglelefteq: 8940,\n    rightleftarrows: 8644,\n    rightsquigarrow: 8605,\n    rightthreetimes: 8908,\n    straightepsilon: 1013,\n    trianglerighteq: 8885,\n    vartriangleleft: 8882,\n    DiacriticalDot: 729,\n    DoubleRightTee: 8872,\n    DownLeftVector: 8637,\n    GreaterGreater: 10914,\n    HorizontalLine: 9472,\n    InvisibleComma: 8291,\n    InvisibleTimes: 8290,\n    LeftDownVector: 8643,\n    LeftRightArrow: 8596,\n    Leftrightarrow: 8660,\n    LessSlantEqual: 10877,\n    LongRightArrow: 10230,\n    Longrightarrow: 10233,\n    LowerLeftArrow: 8601,\n    NestedLessLess: 8810,\n    NotGreaterLess: 8825,\n    NotLessGreater: 8824,\n    NotSubsetEqual: 8840,\n    NotVerticalBar: 8740,\n    OpenCurlyQuote: 8216,\n    ReverseElement: 8715,\n    RightTeeVector: 10587,\n    RightVectorBar: 10579,\n    ShortDownArrow: 8595,\n    ShortLeftArrow: 8592,\n    SquareSuperset: 8848,\n    TildeFullEqual: 8773,\n    UpperLeftArrow: 8598,\n    ZeroWidthSpace: 8203,\n    curvearrowleft: 8630,\n    doublebarwedge: 8966,\n    downdownarrows: 8650,\n    hookrightarrow: 8618,\n    leftleftarrows: 8647,\n    leftrightarrow: 8596,\n    leftthreetimes: 8907,\n    longrightarrow: 10230,\n    looparrowright: 8620,\n    nshortparallel: 8742,\n    ntriangleright: 8939,\n    rightarrowtail: 8611,\n    rightharpoonup: 8640,\n    trianglelefteq: 8884,\n    upharpoonright: 8638,\n    ApplyFunction: 8289,\n    DifferentialD: 8518,\n    DoubleLeftTee: 10980,\n    DoubleUpArrow: 8657,\n    LeftTeeVector: 10586,\n    LeftVectorBar: 10578,\n    LessFullEqual: 8806,\n    LongLeftArrow: 10229,\n    Longleftarrow: 10232,\n    NotTildeEqual: 8772,\n    NotTildeTilde: 8777,\n    Poincareplane: 8460,\n    PrecedesEqual: 10927,\n    PrecedesTilde: 8830,\n    RightArrowBar: 8677,\n    RightTeeArrow: 8614,\n    RightTriangle: 8883,\n    RightUpVector: 8638,\n    SucceedsEqual: 10928,\n    SucceedsTilde: 8831,\n    SupersetEqual: 8839,\n    UpEquilibrium: 10606,\n    VerticalTilde: 8768,\n    VeryThinSpace: 8202,\n    bigtriangleup: 9651,\n    blacktriangle: 9652,\n    divideontimes: 8903,\n    fallingdotseq: 8786,\n    hookleftarrow: 8617,\n    leftarrowtail: 8610,\n    leftharpoonup: 8636,\n    longleftarrow: 10229,\n    looparrowleft: 8619,\n    measuredangle: 8737,\n    ntriangleleft: 8938,\n    shortparallel: 8741,\n    smallsetminus: 8726,\n    triangleright: 9657,\n    upharpoonleft: 8639,\n    DownArrowBar: 10515,\n    DownTeeArrow: 8615,\n    ExponentialE: 8519,\n    GreaterEqual: 8805,\n    GreaterTilde: 8819,\n    HilbertSpace: 8459,\n    HumpDownHump: 8782,\n    Intersection: 8898,\n    LeftArrowBar: 8676,\n    LeftTeeArrow: 8612,\n    LeftTriangle: 8882,\n    LeftUpVector: 8639,\n    NotCongruent: 8802,\n    NotLessEqual: 8816,\n    NotLessTilde: 8820,\n    Proportional: 8733,\n    RightCeiling: 8969,\n    RoundImplies: 10608,\n    ShortUpArrow: 8593,\n    SquareSubset: 8847,\n    UnderBracket: 9141,\n    VerticalLine: 124,\n    blacklozenge: 10731,\n    exponentiale: 8519,\n    risingdotseq: 8787,\n    triangledown: 9663,\n    triangleleft: 9667,\n    CircleMinus: 8854,\n    CircleTimes: 8855,\n    Equilibrium: 8652,\n    GreaterLess: 8823,\n    LeftCeiling: 8968,\n    LessGreater: 8822,\n    MediumSpace: 8287,\n    NotPrecedes: 8832,\n    NotSucceeds: 8833,\n    OverBracket: 9140,\n    RightVector: 8640,\n    Rrightarrow: 8667,\n    RuleDelayed: 10740,\n    SmallCircle: 8728,\n    SquareUnion: 8852,\n    SubsetEqual: 8838,\n    UpDownArrow: 8597,\n    Updownarrow: 8661,\n    VerticalBar: 8739,\n    backepsilon: 1014,\n    blacksquare: 9642,\n    circledcirc: 8858,\n    circleddash: 8861,\n    curlyeqprec: 8926,\n    curlyeqsucc: 8927,\n    diamondsuit: 9830,\n    eqslantless: 10901,\n    expectation: 8496,\n    nRightarrow: 8655,\n    nrightarrow: 8603,\n    preccurlyeq: 8828,\n    precnapprox: 10937,\n    quaternions: 8461,\n    straightphi: 981,\n    succcurlyeq: 8829,\n    succnapprox: 10938,\n    thickapprox: 8776,\n    updownarrow: 8597,\n    Bernoullis: 8492,\n    CirclePlus: 8853,\n    EqualTilde: 8770,\n    Fouriertrf: 8497,\n    ImaginaryI: 8520,\n    Laplacetrf: 8466,\n    LeftVector: 8636,\n    Lleftarrow: 8666,\n    NotElement: 8713,\n    NotGreater: 8815,\n    Proportion: 8759,\n    RightArrow: 8594,\n    RightFloor: 8971,\n    Rightarrow: 8658,\n    TildeEqual: 8771,\n    TildeTilde: 8776,\n    UnderBrace: 9183,\n    UpArrowBar: 10514,\n    UpTeeArrow: 8613,\n    circledast: 8859,\n    complement: 8705,\n    curlywedge: 8911,\n    eqslantgtr: 10902,\n    gtreqqless: 10892,\n    lessapprox: 10885,\n    lesseqqgtr: 10891,\n    lmoustache: 9136,\n    longmapsto: 10236,\n    mapstodown: 8615,\n    mapstoleft: 8612,\n    nLeftarrow: 8653,\n    nleftarrow: 8602,\n    precapprox: 10935,\n    rightarrow: 8594,\n    rmoustache: 9137,\n    sqsubseteq: 8849,\n    sqsupseteq: 8850,\n    subsetneqq: 10955,\n    succapprox: 10936,\n    supsetneqq: 10956,\n    upuparrows: 8648,\n    varepsilon: 949,\n    varnothing: 8709,\n    Backslash: 8726,\n    CenterDot: 183,\n    CircleDot: 8857,\n    Congruent: 8801,\n    Coproduct: 8720,\n    DoubleDot: 168,\n    DownArrow: 8595,\n    DownBreve: 785,\n    Downarrow: 8659,\n    HumpEqual: 8783,\n    LeftArrow: 8592,\n    LeftFloor: 8970,\n    Leftarrow: 8656,\n    LessTilde: 8818,\n    Mellintrf: 8499,\n    MinusPlus: 8723,\n    NotCupCap: 8813,\n    NotExists: 8708,\n    OverBrace: 9182,\n    PlusMinus: 177,\n    Therefore: 8756,\n    ThinSpace: 8201,\n    TripleDot: 8411,\n    UnionPlus: 8846,\n    backprime: 8245,\n    backsimeq: 8909,\n    bigotimes: 10754,\n    centerdot: 183,\n    checkmark: 10003,\n    complexes: 8450,\n    dotsquare: 8865,\n    downarrow: 8595,\n    gtrapprox: 10886,\n    gtreqless: 8923,\n    heartsuit: 9829,\n    leftarrow: 8592,\n    lesseqgtr: 8922,\n    nparallel: 8742,\n    nshortmid: 8740,\n    nsubseteq: 8840,\n    nsupseteq: 8841,\n    pitchfork: 8916,\n    rationals: 8474,\n    spadesuit: 9824,\n    subseteqq: 10949,\n    subsetneq: 8842,\n    supseteqq: 10950,\n    supsetneq: 8843,\n    therefore: 8756,\n    triangleq: 8796,\n    varpropto: 8733,\n    DDotrahd: 10513,\n    DotEqual: 8784,\n    Integral: 8747,\n    LessLess: 10913,\n    NotEqual: 8800,\n    NotTilde: 8769,\n    PartialD: 8706,\n    Precedes: 8826,\n    RightTee: 8866,\n    Succeeds: 8827,\n    SuchThat: 8715,\n    Superset: 8835,\n    Uarrocir: 10569,\n    UnderBar: 818,\n    andslope: 10840,\n    angmsdaa: 10664,\n    angmsdab: 10665,\n    angmsdac: 10666,\n    angmsdad: 10667,\n    angmsdae: 10668,\n    angmsdaf: 10669,\n    angmsdag: 10670,\n    angmsdah: 10671,\n    angrtvbd: 10653,\n    approxeq: 8778,\n    awconint: 8755,\n    backcong: 8780,\n    barwedge: 8965,\n    bbrktbrk: 9142,\n    bigoplus: 10753,\n    bigsqcup: 10758,\n    biguplus: 10756,\n    bigwedge: 8896,\n    boxminus: 8863,\n    boxtimes: 8864,\n    capbrcup: 10825,\n    circledR: 174,\n    circledS: 9416,\n    cirfnint: 10768,\n    clubsuit: 9827,\n    cupbrcap: 10824,\n    curlyvee: 8910,\n    cwconint: 8754,\n    doteqdot: 8785,\n    dotminus: 8760,\n    drbkarow: 10512,\n    dzigrarr: 10239,\n    elinters: 9191,\n    emptyset: 8709,\n    eqvparsl: 10725,\n    fpartint: 10765,\n    geqslant: 10878,\n    gesdotol: 10884,\n    gnapprox: 10890,\n    hksearow: 10533,\n    hkswarow: 10534,\n    imagline: 8464,\n    imagpart: 8465,\n    infintie: 10717,\n    integers: 8484,\n    intercal: 8890,\n    intlarhk: 10775,\n    laemptyv: 10676,\n    ldrushar: 10571,\n    leqslant: 10877,\n    lesdotor: 10883,\n    llcorner: 8990,\n    lnapprox: 10889,\n    lrcorner: 8991,\n    lurdshar: 10570,\n    mapstoup: 8613,\n    multimap: 8888,\n    naturals: 8469,\n    otimesas: 10806,\n    parallel: 8741,\n    plusacir: 10787,\n    pointint: 10773,\n    precneqq: 10933,\n    precnsim: 8936,\n    profalar: 9006,\n    profline: 8978,\n    profsurf: 8979,\n    raemptyv: 10675,\n    realpart: 8476,\n    rppolint: 10770,\n    rtriltri: 10702,\n    scpolint: 10771,\n    setminus: 8726,\n    shortmid: 8739,\n    smeparsl: 10724,\n    sqsubset: 8847,\n    sqsupset: 8848,\n    subseteq: 8838,\n    succneqq: 10934,\n    succnsim: 8937,\n    supseteq: 8839,\n    thetasym: 977,\n    thicksim: 8764,\n    timesbar: 10801,\n    triangle: 9653,\n    triminus: 10810,\n    trpezium: 9186,\n    ulcorner: 8988,\n    urcorner: 8989,\n    varkappa: 1008,\n    varsigma: 962,\n    vartheta: 977,\n    Because: 8757,\n    Cayleys: 8493,\n    Cconint: 8752,\n    Cedilla: 184,\n    Diamond: 8900,\n    DownTee: 8868,\n    Element: 8712,\n    Epsilon: 917,\n    Implies: 8658,\n    LeftTee: 8867,\n    NewLine: 10,\n    NoBreak: 8288,\n    NotLess: 8814,\n    Omicron: 927,\n    OverBar: 175,\n    Product: 8719,\n    UpArrow: 8593,\n    Uparrow: 8657,\n    Upsilon: 933,\n    alefsym: 8501,\n    angrtvb: 8894,\n    angzarr: 9084,\n    asympeq: 8781,\n    backsim: 8765,\n    because: 8757,\n    bemptyv: 10672,\n    between: 8812,\n    bigcirc: 9711,\n    bigodot: 10752,\n    bigstar: 9733,\n    boxplus: 8862,\n    ccupssm: 10832,\n    cemptyv: 10674,\n    cirscir: 10690,\n    coloneq: 8788,\n    congdot: 10861,\n    cudarrl: 10552,\n    cudarrr: 10549,\n    cularrp: 10557,\n    curarrm: 10556,\n    dbkarow: 10511,\n    ddagger: 8225,\n    ddotseq: 10871,\n    demptyv: 10673,\n    diamond: 8900,\n    digamma: 989,\n    dotplus: 8724,\n    dwangle: 10662,\n    epsilon: 949,\n    eqcolon: 8789,\n    equivDD: 10872,\n    gesdoto: 10882,\n    gtquest: 10876,\n    gtrless: 8823,\n    harrcir: 10568,\n    intprod: 10812,\n    isindot: 8949,\n    larrbfs: 10527,\n    larrsim: 10611,\n    lbrksld: 10639,\n    lbrkslu: 10637,\n    ldrdhar: 10599,\n    lesdoto: 10881,\n    lessdot: 8918,\n    lessgtr: 8822,\n    lesssim: 8818,\n    lotimes: 10804,\n    lozenge: 9674,\n    ltquest: 10875,\n    luruhar: 10598,\n    maltese: 10016,\n    minusdu: 10794,\n    napprox: 8777,\n    natural: 9838,\n    nearrow: 8599,\n    nexists: 8708,\n    notinva: 8713,\n    notinvb: 8951,\n    notinvc: 8950,\n    notniva: 8716,\n    notnivb: 8958,\n    notnivc: 8957,\n    npolint: 10772,\n    nsqsube: 8930,\n    nsqsupe: 8931,\n    nvinfin: 10718,\n    nwarrow: 8598,\n    olcross: 10683,\n    omicron: 959,\n    orderof: 8500,\n    orslope: 10839,\n    pertenk: 8241,\n    planckh: 8462,\n    pluscir: 10786,\n    plussim: 10790,\n    plustwo: 10791,\n    precsim: 8830,\n    quatint: 10774,\n    questeq: 8799,\n    rarrbfs: 10528,\n    rarrsim: 10612,\n    rbrksld: 10638,\n    rbrkslu: 10640,\n    rdldhar: 10601,\n    realine: 8475,\n    rotimes: 10805,\n    ruluhar: 10600,\n    searrow: 8600,\n    simplus: 10788,\n    simrarr: 10610,\n    subedot: 10947,\n    submult: 10945,\n    subplus: 10943,\n    subrarr: 10617,\n    succsim: 8831,\n    supdsub: 10968,\n    supedot: 10948,\n    suphsub: 10967,\n    suplarr: 10619,\n    supmult: 10946,\n    supplus: 10944,\n    swarrow: 8601,\n    topfork: 10970,\n    triplus: 10809,\n    tritime: 10811,\n    uparrow: 8593,\n    upsilon: 965,\n    uwangle: 10663,\n    vzigzag: 10650,\n    zigrarr: 8669,\n    Aacute: 193,\n    Abreve: 258,\n    Agrave: 192,\n    Assign: 8788,\n    Atilde: 195,\n    Barwed: 8966,\n    Bumpeq: 8782,\n    Cacute: 262,\n    Ccaron: 268,\n    Ccedil: 199,\n    Colone: 10868,\n    Conint: 8751,\n    CupCap: 8781,\n    Dagger: 8225,\n    Dcaron: 270,\n    DotDot: 8412,\n    Dstrok: 272,\n    Eacute: 201,\n    Ecaron: 282,\n    Egrave: 200,\n    Exists: 8707,\n    ForAll: 8704,\n    Gammad: 988,\n    Gbreve: 286,\n    Gcedil: 290,\n    HARDcy: 1066,\n    Hstrok: 294,\n    Iacute: 205,\n    Igrave: 204,\n    Itilde: 296,\n    Jsercy: 1032,\n    Kcedil: 310,\n    Lacute: 313,\n    Lambda: 923,\n    Lcaron: 317,\n    Lcedil: 315,\n    Lmidot: 319,\n    Lstrok: 321,\n    Nacute: 323,\n    Ncaron: 327,\n    Ncedil: 325,\n    Ntilde: 209,\n    Oacute: 211,\n    Odblac: 336,\n    Ograve: 210,\n    Oslash: 216,\n    Otilde: 213,\n    Otimes: 10807,\n    Racute: 340,\n    Rarrtl: 10518,\n    Rcaron: 344,\n    Rcedil: 342,\n    SHCHcy: 1065,\n    SOFTcy: 1068,\n    Sacute: 346,\n    Scaron: 352,\n    Scedil: 350,\n    Square: 9633,\n    Subset: 8912,\n    Supset: 8913,\n    Tcaron: 356,\n    Tcedil: 354,\n    Tstrok: 358,\n    Uacute: 218,\n    Ubreve: 364,\n    Udblac: 368,\n    Ugrave: 217,\n    Utilde: 360,\n    Vdashl: 10982,\n    Verbar: 8214,\n    Vvdash: 8874,\n    Yacute: 221,\n    Zacute: 377,\n    Zcaron: 381,\n    aacute: 225,\n    abreve: 259,\n    agrave: 224,\n    andand: 10837,\n    angmsd: 8737,\n    angsph: 8738,\n    apacir: 10863,\n    approx: 8776,\n    atilde: 227,\n    barvee: 8893,\n    barwed: 8965,\n    becaus: 8757,\n    bernou: 8492,\n    bigcap: 8898,\n    bigcup: 8899,\n    bigvee: 8897,\n    bkarow: 10509,\n    bottom: 8869,\n    bowtie: 8904,\n    boxbox: 10697,\n    bprime: 8245,\n    brvbar: 166,\n    bullet: 8226,\n    bumpeq: 8783,\n    cacute: 263,\n    capand: 10820,\n    capcap: 10827,\n    capcup: 10823,\n    capdot: 10816,\n    ccaron: 269,\n    ccedil: 231,\n    circeq: 8791,\n    cirmid: 10991,\n    colone: 8788,\n    commat: 64,\n    compfn: 8728,\n    conint: 8750,\n    coprod: 8720,\n    copysr: 8471,\n    cularr: 8630,\n    cupcap: 10822,\n    cupcup: 10826,\n    cupdot: 8845,\n    curarr: 8631,\n    curren: 164,\n    cylcty: 9005,\n    dagger: 8224,\n    daleth: 8504,\n    dcaron: 271,\n    dfisht: 10623,\n    divide: 247,\n    divonx: 8903,\n    dlcorn: 8990,\n    dlcrop: 8973,\n    dollar: 36,\n    drcorn: 8991,\n    drcrop: 8972,\n    dstrok: 273,\n    eacute: 233,\n    easter: 10862,\n    ecaron: 283,\n    ecolon: 8789,\n    egrave: 232,\n    egsdot: 10904,\n    elsdot: 10903,\n    emptyv: 8709,\n    emsp13: 8196,\n    emsp14: 8197,\n    eparsl: 10723,\n    eqcirc: 8790,\n    equals: 61,\n    equest: 8799,\n    female: 9792,\n    ffilig: 64259,\n    ffllig: 64260,\n    forall: 8704,\n    frac12: 189,\n    frac13: 8531,\n    frac14: 188,\n    frac15: 8533,\n    frac16: 8537,\n    frac18: 8539,\n    frac23: 8532,\n    frac25: 8534,\n    frac34: 190,\n    frac35: 8535,\n    frac38: 8540,\n    frac45: 8536,\n    frac56: 8538,\n    frac58: 8541,\n    frac78: 8542,\n    gacute: 501,\n    gammad: 989,\n    gbreve: 287,\n    gesdot: 10880,\n    gesles: 10900,\n    gtlPar: 10645,\n    gtrarr: 10616,\n    gtrdot: 8919,\n    gtrsim: 8819,\n    hairsp: 8202,\n    hamilt: 8459,\n    hardcy: 1098,\n    hearts: 9829,\n    hellip: 8230,\n    hercon: 8889,\n    homtht: 8763,\n    horbar: 8213,\n    hslash: 8463,\n    hstrok: 295,\n    hybull: 8259,\n    hyphen: 8208,\n    iacute: 237,\n    igrave: 236,\n    iiiint: 10764,\n    iinfin: 10716,\n    incare: 8453,\n    inodot: 305,\n    intcal: 8890,\n    iquest: 191,\n    isinsv: 8947,\n    itilde: 297,\n    jsercy: 1112,\n    kappav: 1008,\n    kcedil: 311,\n    kgreen: 312,\n    lAtail: 10523,\n    lacute: 314,\n    lagran: 8466,\n    lambda: 955,\n    langle: 10216,\n    larrfs: 10525,\n    larrhk: 8617,\n    larrlp: 8619,\n    larrpl: 10553,\n    larrtl: 8610,\n    latail: 10521,\n    lbrace: 123,\n    lbrack: 91,\n    lcaron: 318,\n    lcedil: 316,\n    ldquor: 8222,\n    lesdot: 10879,\n    lesges: 10899,\n    lfisht: 10620,\n    lfloor: 8970,\n    lharul: 10602,\n    llhard: 10603,\n    lmidot: 320,\n    lmoust: 9136,\n    loplus: 10797,\n    lowast: 8727,\n    lowbar: 95,\n    lparlt: 10643,\n    lrhard: 10605,\n    lsaquo: 8249,\n    lsquor: 8218,\n    lstrok: 322,\n    lthree: 8907,\n    ltimes: 8905,\n    ltlarr: 10614,\n    ltrPar: 10646,\n    mapsto: 8614,\n    marker: 9646,\n    mcomma: 10793,\n    midast: 42,\n    midcir: 10992,\n    middot: 183,\n    minusb: 8863,\n    minusd: 8760,\n    mnplus: 8723,\n    models: 8871,\n    mstpos: 8766,\n    nVDash: 8879,\n    nVdash: 8878,\n    nacute: 324,\n    ncaron: 328,\n    ncedil: 326,\n    nearhk: 10532,\n    nequiv: 8802,\n    nesear: 10536,\n    nexist: 8708,\n    nltrie: 8940,\n    nprcue: 8928,\n    nrtrie: 8941,\n    nsccue: 8929,\n    nsimeq: 8772,\n    ntilde: 241,\n    numero: 8470,\n    nvDash: 8877,\n    nvHarr: 10500,\n    nvdash: 8876,\n    nvlArr: 10498,\n    nvrArr: 10499,\n    nwarhk: 10531,\n    nwnear: 10535,\n    oacute: 243,\n    odblac: 337,\n    odsold: 10684,\n    ograve: 242,\n    ominus: 8854,\n    origof: 8886,\n    oslash: 248,\n    otilde: 245,\n    otimes: 8855,\n    parsim: 10995,\n    percnt: 37,\n    period: 46,\n    permil: 8240,\n    phmmat: 8499,\n    planck: 8463,\n    plankv: 8463,\n    plusdo: 8724,\n    plusdu: 10789,\n    plusmn: 177,\n    preceq: 10927,\n    primes: 8473,\n    prnsim: 8936,\n    propto: 8733,\n    prurel: 8880,\n    puncsp: 8200,\n    qprime: 8279,\n    rAtail: 10524,\n    racute: 341,\n    rangle: 10217,\n    rarrap: 10613,\n    rarrfs: 10526,\n    rarrhk: 8618,\n    rarrlp: 8620,\n    rarrpl: 10565,\n    rarrtl: 8611,\n    ratail: 10522,\n    rbrace: 125,\n    rbrack: 93,\n    rcaron: 345,\n    rcedil: 343,\n    rdquor: 8221,\n    rfisht: 10621,\n    rfloor: 8971,\n    rharul: 10604,\n    rmoust: 9137,\n    roplus: 10798,\n    rpargt: 10644,\n    rsaquo: 8250,\n    rsquor: 8217,\n    rthree: 8908,\n    rtimes: 8906,\n    sacute: 347,\n    scaron: 353,\n    scedil: 351,\n    scnsim: 8937,\n    searhk: 10533,\n    seswar: 10537,\n    sfrown: 8994,\n    shchcy: 1097,\n    sigmaf: 962,\n    sigmav: 962,\n    simdot: 10858,\n    smashp: 10803,\n    softcy: 1100,\n    solbar: 9023,\n    spades: 9824,\n    sqsube: 8849,\n    sqsupe: 8850,\n    square: 9633,\n    squarf: 9642,\n    ssetmn: 8726,\n    ssmile: 8995,\n    sstarf: 8902,\n    subdot: 10941,\n    subset: 8834,\n    subsim: 10951,\n    subsub: 10965,\n    subsup: 10963,\n    succeq: 10928,\n    supdot: 10942,\n    supset: 8835,\n    supsim: 10952,\n    supsub: 10964,\n    supsup: 10966,\n    swarhk: 10534,\n    swnwar: 10538,\n    target: 8982,\n    tcaron: 357,\n    tcedil: 355,\n    telrec: 8981,\n    there4: 8756,\n    thetav: 977,\n    thinsp: 8201,\n    thksim: 8764,\n    timesb: 8864,\n    timesd: 10800,\n    topbot: 9014,\n    topcir: 10993,\n    tprime: 8244,\n    tridot: 9708,\n    tstrok: 359,\n    uacute: 250,\n    ubreve: 365,\n    udblac: 369,\n    ufisht: 10622,\n    ugrave: 249,\n    ulcorn: 8988,\n    ulcrop: 8975,\n    urcorn: 8989,\n    urcrop: 8974,\n    utilde: 361,\n    vangrt: 10652,\n    varphi: 966,\n    varrho: 1009,\n    veebar: 8891,\n    vellip: 8942,\n    verbar: 124,\n    wedbar: 10847,\n    wedgeq: 8793,\n    weierp: 8472,\n    wreath: 8768,\n    xoplus: 10753,\n    xotime: 10754,\n    xsqcup: 10758,\n    xuplus: 10756,\n    xwedge: 8896,\n    yacute: 253,\n    zacute: 378,\n    zcaron: 382,\n    zeetrf: 8488,\n    AElig: 198,\n    Acirc: 194,\n    Alpha: 913,\n    Amacr: 256,\n    Aogon: 260,\n    Aring: 197,\n    Breve: 728,\n    Ccirc: 264,\n    Colon: 8759,\n    Cross: 10799,\n    Dashv: 10980,\n    Delta: 916,\n    Ecirc: 202,\n    Emacr: 274,\n    Eogon: 280,\n    Equal: 10869,\n    Gamma: 915,\n    Gcirc: 284,\n    Hacek: 711,\n    Hcirc: 292,\n    IJlig: 306,\n    Icirc: 206,\n    Imacr: 298,\n    Iogon: 302,\n    Iukcy: 1030,\n    Jcirc: 308,\n    Jukcy: 1028,\n    Kappa: 922,\n    OElig: 338,\n    Ocirc: 212,\n    Omacr: 332,\n    Omega: 937,\n    Prime: 8243,\n    RBarr: 10512,\n    Scirc: 348,\n    Sigma: 931,\n    THORN: 222,\n    TRADE: 8482,\n    TSHcy: 1035,\n    Theta: 920,\n    Tilde: 8764,\n    Ubrcy: 1038,\n    Ucirc: 219,\n    Umacr: 362,\n    Union: 8899,\n    Uogon: 370,\n    UpTee: 8869,\n    Uring: 366,\n    VDash: 8875,\n    Vdash: 8873,\n    Wcirc: 372,\n    Wedge: 8896,\n    Ycirc: 374,\n    acirc: 226,\n    acute: 180,\n    aelig: 230,\n    aleph: 8501,\n    alpha: 945,\n    amacr: 257,\n    amalg: 10815,\n    angle: 8736,\n    angrt: 8735,\n    angst: 8491,\n    aogon: 261,\n    aring: 229,\n    asymp: 8776,\n    awint: 10769,\n    bcong: 8780,\n    bdquo: 8222,\n    bepsi: 1014,\n    blank: 9251,\n    blk12: 9618,\n    blk14: 9617,\n    blk34: 9619,\n    block: 9608,\n    boxDL: 9559,\n    boxDR: 9556,\n    boxDl: 9558,\n    boxDr: 9555,\n    boxHD: 9574,\n    boxHU: 9577,\n    boxHd: 9572,\n    boxHu: 9575,\n    boxUL: 9565,\n    boxUR: 9562,\n    boxUl: 9564,\n    boxUr: 9561,\n    boxVH: 9580,\n    boxVL: 9571,\n    boxVR: 9568,\n    boxVh: 9579,\n    boxVl: 9570,\n    boxVr: 9567,\n    boxdL: 9557,\n    boxdR: 9554,\n    boxdl: 9488,\n    boxdr: 9484,\n    boxhD: 9573,\n    boxhU: 9576,\n    boxhd: 9516,\n    boxhu: 9524,\n    boxuL: 9563,\n    boxuR: 9560,\n    boxul: 9496,\n    boxur: 9492,\n    boxvH: 9578,\n    boxvL: 9569,\n    boxvR: 9566,\n    boxvh: 9532,\n    boxvl: 9508,\n    boxvr: 9500,\n    breve: 728,\n    bsemi: 8271,\n    bsime: 8909,\n    bsolb: 10693,\n    bumpE: 10926,\n    bumpe: 8783,\n    caret: 8257,\n    caron: 711,\n    ccaps: 10829,\n    ccirc: 265,\n    ccups: 10828,\n    cedil: 184,\n    check: 10003,\n    clubs: 9827,\n    colon: 58,\n    comma: 44,\n    crarr: 8629,\n    cross: 10007,\n    csube: 10961,\n    csupe: 10962,\n    ctdot: 8943,\n    cuepr: 8926,\n    cuesc: 8927,\n    cupor: 10821,\n    cuvee: 8910,\n    cuwed: 8911,\n    cwint: 8753,\n    dashv: 8867,\n    dblac: 733,\n    ddarr: 8650,\n    delta: 948,\n    dharl: 8643,\n    dharr: 8642,\n    diams: 9830,\n    disin: 8946,\n    doteq: 8784,\n    dtdot: 8945,\n    dtrif: 9662,\n    duarr: 8693,\n    duhar: 10607,\n    eDDot: 10871,\n    ecirc: 234,\n    efDot: 8786,\n    emacr: 275,\n    empty: 8709,\n    eogon: 281,\n    eplus: 10865,\n    epsiv: 949,\n    eqsim: 8770,\n    equiv: 8801,\n    erDot: 8787,\n    erarr: 10609,\n    esdot: 8784,\n    exist: 8707,\n    fflig: 64256,\n    filig: 64257,\n    fllig: 64258,\n    fltns: 9649,\n    forkv: 10969,\n    frasl: 8260,\n    frown: 8994,\n    gamma: 947,\n    gcirc: 285,\n    gescc: 10921,\n    gimel: 8503,\n    gneqq: 8809,\n    gnsim: 8935,\n    grave: 96,\n    gsime: 10894,\n    gsiml: 10896,\n    gtcir: 10874,\n    gtdot: 8919,\n    harrw: 8621,\n    hcirc: 293,\n    hoarr: 8703,\n    icirc: 238,\n    iexcl: 161,\n    iiint: 8749,\n    iiota: 8489,\n    ijlig: 307,\n    imacr: 299,\n    image: 8465,\n    imath: 305,\n    imped: 437,\n    infin: 8734,\n    iogon: 303,\n    iprod: 10812,\n    isinE: 8953,\n    isins: 8948,\n    isinv: 8712,\n    iukcy: 1110,\n    jcirc: 309,\n    jmath: 567,\n    jukcy: 1108,\n    kappa: 954,\n    lAarr: 8666,\n    lBarr: 10510,\n    langd: 10641,\n    laquo: 171,\n    larrb: 8676,\n    lbarr: 10508,\n    lbbrk: 10098,\n    lbrke: 10635,\n    lceil: 8968,\n    ldquo: 8220,\n    lescc: 10920,\n    lhard: 8637,\n    lharu: 8636,\n    lhblk: 9604,\n    llarr: 8647,\n    lltri: 9722,\n    lneqq: 8808,\n    lnsim: 8934,\n    loang: 10220,\n    loarr: 8701,\n    lobrk: 10214,\n    lopar: 10629,\n    lrarr: 8646,\n    lrhar: 8651,\n    lrtri: 8895,\n    lsime: 10893,\n    lsimg: 10895,\n    lsquo: 8216,\n    ltcir: 10873,\n    ltdot: 8918,\n    ltrie: 8884,\n    ltrif: 9666,\n    mDDot: 8762,\n    mdash: 8212,\n    micro: 181,\n    minus: 8722,\n    mumap: 8888,\n    nabla: 8711,\n    napos: 329,\n    natur: 9838,\n    ncong: 8775,\n    ndash: 8211,\n    neArr: 8663,\n    nearr: 8599,\n    ngsim: 8821,\n    nhArr: 8654,\n    nharr: 8622,\n    nhpar: 10994,\n    nlArr: 8653,\n    nlarr: 8602,\n    nless: 8814,\n    nlsim: 8820,\n    nltri: 8938,\n    notin: 8713,\n    notni: 8716,\n    nprec: 8832,\n    nrArr: 8655,\n    nrarr: 8603,\n    nrtri: 8939,\n    nsime: 8772,\n    nsmid: 8740,\n    nspar: 8742,\n    nsube: 8840,\n    nsucc: 8833,\n    nsupe: 8841,\n    numsp: 8199,\n    nwArr: 8662,\n    nwarr: 8598,\n    ocirc: 244,\n    odash: 8861,\n    oelig: 339,\n    ofcir: 10687,\n    ohbar: 10677,\n    olarr: 8634,\n    olcir: 10686,\n    oline: 8254,\n    omacr: 333,\n    omega: 969,\n    operp: 10681,\n    oplus: 8853,\n    orarr: 8635,\n    order: 8500,\n    ovbar: 9021,\n    parsl: 11005,\n    phone: 9742,\n    plusb: 8862,\n    pluse: 10866,\n    pound: 163,\n    prcue: 8828,\n    prime: 8242,\n    prnap: 10937,\n    prsim: 8830,\n    quest: 63,\n    rAarr: 8667,\n    rBarr: 10511,\n    radic: 8730,\n    rangd: 10642,\n    range: 10661,\n    raquo: 187,\n    rarrb: 8677,\n    rarrc: 10547,\n    rarrw: 8605,\n    ratio: 8758,\n    rbarr: 10509,\n    rbbrk: 10099,\n    rbrke: 10636,\n    rceil: 8969,\n    rdquo: 8221,\n    reals: 8477,\n    rhard: 8641,\n    rharu: 8640,\n    rlarr: 8644,\n    rlhar: 8652,\n    rnmid: 10990,\n    roang: 10221,\n    roarr: 8702,\n    robrk: 10215,\n    ropar: 10630,\n    rrarr: 8649,\n    rsquo: 8217,\n    rtrie: 8885,\n    rtrif: 9656,\n    sbquo: 8218,\n    sccue: 8829,\n    scirc: 349,\n    scnap: 10938,\n    scsim: 8831,\n    sdotb: 8865,\n    sdote: 10854,\n    seArr: 8664,\n    searr: 8600,\n    setmn: 8726,\n    sharp: 9839,\n    sigma: 963,\n    simeq: 8771,\n    simgE: 10912,\n    simlE: 10911,\n    simne: 8774,\n    slarr: 8592,\n    smile: 8995,\n    sqcap: 8851,\n    sqcup: 8852,\n    sqsub: 8847,\n    sqsup: 8848,\n    srarr: 8594,\n    starf: 9733,\n    strns: 175,\n    subnE: 10955,\n    subne: 8842,\n    supnE: 10956,\n    supne: 8843,\n    swArr: 8665,\n    swarr: 8601,\n    szlig: 223,\n    theta: 952,\n    thkap: 8776,\n    thorn: 254,\n    tilde: 732,\n    times: 215,\n    trade: 8482,\n    trisb: 10701,\n    tshcy: 1115,\n    twixt: 8812,\n    ubrcy: 1118,\n    ucirc: 251,\n    udarr: 8645,\n    udhar: 10606,\n    uharl: 8639,\n    uharr: 8638,\n    uhblk: 9600,\n    ultri: 9720,\n    umacr: 363,\n    uogon: 371,\n    uplus: 8846,\n    upsih: 978,\n    uring: 367,\n    urtri: 9721,\n    utdot: 8944,\n    utrif: 9652,\n    uuarr: 8648,\n    vBarv: 10985,\n    vDash: 8872,\n    varpi: 982,\n    vdash: 8866,\n    veeeq: 8794,\n    vltri: 8882,\n    vprop: 8733,\n    vrtri: 8883,\n    wcirc: 373,\n    wedge: 8743,\n    xcirc: 9711,\n    xdtri: 9661,\n    xhArr: 10234,\n    xharr: 10231,\n    xlArr: 10232,\n    xlarr: 10229,\n    xodot: 10752,\n    xrArr: 10233,\n    xrarr: 10230,\n    xutri: 9651,\n    ycirc: 375,\n    Aopf: 120120,\n    Ascr: 119964,\n    Auml: 196,\n    Barv: 10983,\n    Beta: 914,\n    Bopf: 120121,\n    Bscr: 8492,\n    CHcy: 1063,\n    COPY: 169,\n    Cdot: 266,\n    Copf: 8450,\n    Cscr: 119966,\n    DJcy: 1026,\n    DScy: 1029,\n    DZcy: 1039,\n    Darr: 8609,\n    Dopf: 120123,\n    Dscr: 119967,\n    Edot: 278,\n    Eopf: 120124,\n    Escr: 8496,\n    Esim: 10867,\n    Euml: 203,\n    Fopf: 120125,\n    Fscr: 8497,\n    GJcy: 1027,\n    Gdot: 288,\n    Gopf: 120126,\n    Gscr: 119970,\n    Hopf: 8461,\n    Hscr: 8459,\n    IEcy: 1045,\n    IOcy: 1025,\n    Idot: 304,\n    Iopf: 120128,\n    Iota: 921,\n    Iscr: 8464,\n    Iuml: 207,\n    Jopf: 120129,\n    Jscr: 119973,\n    KHcy: 1061,\n    KJcy: 1036,\n    Kopf: 120130,\n    Kscr: 119974,\n    LJcy: 1033,\n    Lang: 10218,\n    Larr: 8606,\n    Lopf: 120131,\n    Lscr: 8466,\n    Mopf: 120132,\n    Mscr: 8499,\n    NJcy: 1034,\n    Nopf: 8469,\n    Nscr: 119977,\n    Oopf: 120134,\n    Oscr: 119978,\n    Ouml: 214,\n    Popf: 8473,\n    Pscr: 119979,\n    QUOT: 34,\n    Qopf: 8474,\n    Qscr: 119980,\n    Rang: 10219,\n    Rarr: 8608,\n    Ropf: 8477,\n    Rscr: 8475,\n    SHcy: 1064,\n    Sopf: 120138,\n    Sqrt: 8730,\n    Sscr: 119982,\n    Star: 8902,\n    TScy: 1062,\n    Topf: 120139,\n    Tscr: 119983,\n    Uarr: 8607,\n    Uopf: 120140,\n    Upsi: 978,\n    Uscr: 119984,\n    Uuml: 220,\n    Vbar: 10987,\n    Vert: 8214,\n    Vopf: 120141,\n    Vscr: 119985,\n    Wopf: 120142,\n    Wscr: 119986,\n    Xopf: 120143,\n    Xscr: 119987,\n    YAcy: 1071,\n    YIcy: 1031,\n    YUcy: 1070,\n    Yopf: 120144,\n    Yscr: 119988,\n    Yuml: 376,\n    ZHcy: 1046,\n    Zdot: 379,\n    Zeta: 918,\n    Zopf: 8484,\n    Zscr: 119989,\n    andd: 10844,\n    andv: 10842,\n    ange: 10660,\n    aopf: 120146,\n    apid: 8779,\n    apos: 39,\n    ascr: 119990,\n    auml: 228,\n    bNot: 10989,\n    bbrk: 9141,\n    beta: 946,\n    beth: 8502,\n    bnot: 8976,\n    bopf: 120147,\n    boxH: 9552,\n    boxV: 9553,\n    boxh: 9472,\n    boxv: 9474,\n    bscr: 119991,\n    bsim: 8765,\n    bsol: 92,\n    bull: 8226,\n    bump: 8782,\n    cdot: 267,\n    cent: 162,\n    chcy: 1095,\n    cirE: 10691,\n    circ: 710,\n    cire: 8791,\n    comp: 8705,\n    cong: 8773,\n    copf: 120148,\n    copy: 169,\n    cscr: 119992,\n    csub: 10959,\n    csup: 10960,\n    dArr: 8659,\n    dHar: 10597,\n    darr: 8595,\n    dash: 8208,\n    diam: 8900,\n    djcy: 1106,\n    dopf: 120149,\n    dscr: 119993,\n    dscy: 1109,\n    dsol: 10742,\n    dtri: 9663,\n    dzcy: 1119,\n    eDot: 8785,\n    ecir: 8790,\n    edot: 279,\n    emsp: 8195,\n    ensp: 8194,\n    eopf: 120150,\n    epar: 8917,\n    epsi: 1013,\n    escr: 8495,\n    esim: 8770,\n    euml: 235,\n    euro: 8364,\n    excl: 33,\n    flat: 9837,\n    fnof: 402,\n    fopf: 120151,\n    fork: 8916,\n    fscr: 119995,\n    gdot: 289,\n    geqq: 8807,\n    gjcy: 1107,\n    gnap: 10890,\n    gneq: 10888,\n    gopf: 120152,\n    gscr: 8458,\n    gsim: 8819,\n    gtcc: 10919,\n    hArr: 8660,\n    half: 189,\n    harr: 8596,\n    hbar: 8463,\n    hopf: 120153,\n    hscr: 119997,\n    iecy: 1077,\n    imof: 8887,\n    iocy: 1105,\n    iopf: 120154,\n    iota: 953,\n    iscr: 119998,\n    isin: 8712,\n    iuml: 239,\n    jopf: 120155,\n    jscr: 119999,\n    khcy: 1093,\n    kjcy: 1116,\n    kopf: 120156,\n    kscr: 120000,\n    lArr: 8656,\n    lHar: 10594,\n    lang: 10216,\n    larr: 8592,\n    late: 10925,\n    lcub: 123,\n    ldca: 10550,\n    ldsh: 8626,\n    leqq: 8806,\n    ljcy: 1113,\n    lnap: 10889,\n    lneq: 10887,\n    lopf: 120157,\n    lozf: 10731,\n    lpar: 40,\n    lscr: 120001,\n    lsim: 8818,\n    lsqb: 91,\n    ltcc: 10918,\n    ltri: 9667,\n    macr: 175,\n    male: 9794,\n    malt: 10016,\n    mlcp: 10971,\n    mldr: 8230,\n    mopf: 120158,\n    mscr: 120002,\n    nbsp: 160,\n    ncap: 10819,\n    ncup: 10818,\n    ngeq: 8817,\n    ngtr: 8815,\n    nisd: 8954,\n    njcy: 1114,\n    nldr: 8229,\n    nleq: 8816,\n    nmid: 8740,\n    nopf: 120159,\n    npar: 8742,\n    nscr: 120003,\n    nsim: 8769,\n    nsub: 8836,\n    nsup: 8837,\n    ntgl: 8825,\n    ntlg: 8824,\n    oast: 8859,\n    ocir: 8858,\n    odiv: 10808,\n    odot: 8857,\n    ogon: 731,\n    oint: 8750,\n    omid: 10678,\n    oopf: 120160,\n    opar: 10679,\n    ordf: 170,\n    ordm: 186,\n    oror: 10838,\n    oscr: 8500,\n    osol: 8856,\n    ouml: 246,\n    para: 182,\n    part: 8706,\n    perp: 8869,\n    phiv: 966,\n    plus: 43,\n    popf: 120161,\n    prap: 10935,\n    prec: 8826,\n    prnE: 10933,\n    prod: 8719,\n    prop: 8733,\n    pscr: 120005,\n    qint: 10764,\n    qopf: 120162,\n    qscr: 120006,\n    quot: 34,\n    rArr: 8658,\n    rHar: 10596,\n    race: 10714,\n    rang: 10217,\n    rarr: 8594,\n    rcub: 125,\n    rdca: 10551,\n    rdsh: 8627,\n    real: 8476,\n    rect: 9645,\n    rhov: 1009,\n    ring: 730,\n    ropf: 120163,\n    rpar: 41,\n    rscr: 120007,\n    rsqb: 93,\n    rtri: 9657,\n    scap: 10936,\n    scnE: 10934,\n    sdot: 8901,\n    sect: 167,\n    semi: 59,\n    sext: 10038,\n    shcy: 1096,\n    sime: 8771,\n    simg: 10910,\n    siml: 10909,\n    smid: 8739,\n    smte: 10924,\n    solb: 10692,\n    sopf: 120164,\n    spar: 8741,\n    squf: 9642,\n    sscr: 120008,\n    star: 9734,\n    subE: 10949,\n    sube: 8838,\n    succ: 8827,\n    sung: 9834,\n    sup1: 185,\n    sup2: 178,\n    sup3: 179,\n    supE: 10950,\n    supe: 8839,\n    tbrk: 9140,\n    tdot: 8411,\n    tint: 8749,\n    toea: 10536,\n    topf: 120165,\n    tosa: 10537,\n    trie: 8796,\n    tscr: 120009,\n    tscy: 1094,\n    uArr: 8657,\n    uHar: 10595,\n    uarr: 8593,\n    uopf: 120166,\n    upsi: 965,\n    uscr: 120010,\n    utri: 9653,\n    uuml: 252,\n    vArr: 8661,\n    vBar: 10984,\n    varr: 8597,\n    vert: 124,\n    vopf: 120167,\n    vscr: 120011,\n    wopf: 120168,\n    wscr: 120012,\n    xcap: 8898,\n    xcup: 8899,\n    xmap: 10236,\n    xnis: 8955,\n    xopf: 120169,\n    xscr: 120013,\n    xvee: 8897,\n    yacy: 1103,\n    yicy: 1111,\n    yopf: 120170,\n    yscr: 120014,\n    yucy: 1102,\n    yuml: 255,\n    zdot: 380,\n    zeta: 950,\n    zhcy: 1078,\n    zopf: 120171,\n    zscr: 120015,\n    zwnj: 8204,\n    AMP: 38,\n    Acy: 1040,\n    Afr: 120068,\n    And: 10835,\n    Bcy: 1041,\n    Bfr: 120069,\n    Cap: 8914,\n    Cfr: 8493,\n    Chi: 935,\n    Cup: 8915,\n    Dcy: 1044,\n    Del: 8711,\n    Dfr: 120071,\n    Dot: 168,\n    ENG: 330,\n    ETH: 208,\n    Ecy: 1069,\n    Efr: 120072,\n    Eta: 919,\n    Fcy: 1060,\n    Ffr: 120073,\n    Gcy: 1043,\n    Gfr: 120074,\n    Hat: 94,\n    Hfr: 8460,\n    Icy: 1048,\n    Ifr: 8465,\n    Int: 8748,\n    Jcy: 1049,\n    Jfr: 120077,\n    Kcy: 1050,\n    Kfr: 120078,\n    Lcy: 1051,\n    Lfr: 120079,\n    Lsh: 8624,\n    Map: 10501,\n    Mcy: 1052,\n    Mfr: 120080,\n    Ncy: 1053,\n    Nfr: 120081,\n    Not: 10988,\n    Ocy: 1054,\n    Ofr: 120082,\n    Pcy: 1055,\n    Pfr: 120083,\n    Phi: 934,\n    Psi: 936,\n    Qfr: 120084,\n    REG: 174,\n    Rcy: 1056,\n    Rfr: 8476,\n    Rho: 929,\n    Rsh: 8625,\n    Scy: 1057,\n    Sfr: 120086,\n    Sub: 8912,\n    Sum: 8721,\n    Sup: 8913,\n    Tab: 9,\n    Tau: 932,\n    Tcy: 1058,\n    Tfr: 120087,\n    Ucy: 1059,\n    Ufr: 120088,\n    Vcy: 1042,\n    Vee: 8897,\n    Vfr: 120089,\n    Wfr: 120090,\n    Xfr: 120091,\n    Ycy: 1067,\n    Yfr: 120092,\n    Zcy: 1047,\n    Zfr: 8488,\n    acd: 8767,\n    acy: 1072,\n    afr: 120094,\n    amp: 38,\n    and: 8743,\n    ang: 8736,\n    apE: 10864,\n    ape: 8778,\n    ast: 42,\n    bcy: 1073,\n    bfr: 120095,\n    bot: 8869,\n    cap: 8745,\n    cfr: 120096,\n    chi: 967,\n    cir: 9675,\n    cup: 8746,\n    dcy: 1076,\n    deg: 176,\n    dfr: 120097,\n    die: 168,\n    div: 247,\n    dot: 729,\n    ecy: 1101,\n    efr: 120098,\n    egs: 10902,\n    ell: 8467,\n    els: 10901,\n    eng: 331,\n    eta: 951,\n    eth: 240,\n    fcy: 1092,\n    ffr: 120099,\n    gEl: 10892,\n    gap: 10886,\n    gcy: 1075,\n    gel: 8923,\n    geq: 8805,\n    ges: 10878,\n    gfr: 120100,\n    ggg: 8921,\n    glE: 10898,\n    gla: 10917,\n    glj: 10916,\n    gnE: 8809,\n    gne: 10888,\n    hfr: 120101,\n    icy: 1080,\n    iff: 8660,\n    ifr: 120102,\n    int: 8747,\n    jcy: 1081,\n    jfr: 120103,\n    kcy: 1082,\n    kfr: 120104,\n    lEg: 10891,\n    lap: 10885,\n    lat: 10923,\n    lcy: 1083,\n    leg: 8922,\n    leq: 8804,\n    les: 10877,\n    lfr: 120105,\n    lgE: 10897,\n    lnE: 8808,\n    lne: 10887,\n    loz: 9674,\n    lrm: 8206,\n    lsh: 8624,\n    map: 8614,\n    mcy: 1084,\n    mfr: 120106,\n    mho: 8487,\n    mid: 8739,\n    nap: 8777,\n    ncy: 1085,\n    nfr: 120107,\n    nge: 8817,\n    ngt: 8815,\n    nis: 8956,\n    niv: 8715,\n    nle: 8816,\n    nlt: 8814,\n    not: 172,\n    npr: 8832,\n    nsc: 8833,\n    num: 35,\n    ocy: 1086,\n    ofr: 120108,\n    ogt: 10689,\n    ohm: 8486,\n    olt: 10688,\n    ord: 10845,\n    orv: 10843,\n    par: 8741,\n    pcy: 1087,\n    pfr: 120109,\n    phi: 966,\n    piv: 982,\n    prE: 10931,\n    pre: 10927,\n    psi: 968,\n    qfr: 120110,\n    rcy: 1088,\n    reg: 174,\n    rfr: 120111,\n    rho: 961,\n    rlm: 8207,\n    rsh: 8625,\n    scE: 10932,\n    sce: 10928,\n    scy: 1089,\n    sfr: 120112,\n    shy: 173,\n    sim: 8764,\n    smt: 10922,\n    sol: 47,\n    squ: 9633,\n    sub: 8834,\n    sum: 8721,\n    sup: 8835,\n    tau: 964,\n    tcy: 1090,\n    tfr: 120113,\n    top: 8868,\n    ucy: 1091,\n    ufr: 120114,\n    uml: 168,\n    vcy: 1074,\n    vee: 8744,\n    vfr: 120115,\n    wfr: 120116,\n    xfr: 120117,\n    ycy: 1099,\n    yen: 165,\n    yfr: 120118,\n    zcy: 1079,\n    zfr: 120119,\n    zwj: 8205,\n    DD: 8517,\n    GT: 62,\n    Gg: 8921,\n    Gt: 8811,\n    Im: 8465,\n    LT: 60,\n    Ll: 8920,\n    Lt: 8810,\n    Mu: 924,\n    Nu: 925,\n    Or: 10836,\n    Pi: 928,\n    Pr: 10939,\n    Re: 8476,\n    Sc: 10940,\n    Xi: 926,\n    ac: 8766,\n    af: 8289,\n    ap: 8776,\n    dd: 8518,\n    ee: 8519,\n    eg: 10906,\n    el: 10905,\n    gE: 8807,\n    ge: 8805,\n    gg: 8811,\n    gl: 8823,\n    gt: 62,\n    ic: 8291,\n    ii: 8520,\n    in: 8712,\n    it: 8290,\n    lE: 8806,\n    le: 8804,\n    lg: 8822,\n    ll: 8810,\n    lt: 60,\n    mp: 8723,\n    mu: 956,\n    ne: 8800,\n    ni: 8715,\n    nu: 957,\n    oS: 9416,\n    or: 8744,\n    pi: 960,\n    pm: 177,\n    pr: 8826,\n    rx: 8478,\n    sc: 8827,\n    wp: 8472,\n    wr: 8768,\n    xi: 958,\n};\n\nconst windows1252 = [\n    8364,\n    129,\n    8218,\n    402,\n    8222,\n    8230,\n    8224,\n    8225,\n    710,\n    8240,\n    352,\n    8249,\n    338,\n    141,\n    381,\n    143,\n    144,\n    8216,\n    8217,\n    8220,\n    8221,\n    8226,\n    8211,\n    8212,\n    732,\n    8482,\n    353,\n    8250,\n    339,\n    157,\n    382,\n    376,\n];\nconst entityPattern = new RegExp(`&(#?(?:x[\\\\w\\\\d]+|\\\\d+|${Object.keys(htmlEntities).join('|')}));?`, 'g');\nfunction decodeCharacterReferences(html) {\n    return html.replace(entityPattern, (match, entity) => {\n        let code;\n        // Handle named entities\n        if (entity[0] !== '#') {\n            code = htmlEntities[entity];\n        }\n        else if (entity[1] === 'x') {\n            code = parseInt(entity.substring(2), 16);\n        }\n        else {\n            code = parseInt(entity.substring(1), 10);\n        }\n        if (!code) {\n            return match;\n        }\n        return String.fromCodePoint(validateCode(code));\n    });\n}\nconst NUL = 0;\n// some code points are verboten. If we were inserting HTML, the browser would replace the illegal\n// code points with alternatives in some cases - since we're bypassing that mechanism, we need\n// to replace them ourselves\n//\n// Source: http://en.wikipedia.org/wiki/Character_encodings_in_HTML#Illegal_characters\nfunction validateCode(code) {\n    // line feed becomes generic whitespace\n    if (code === 10) {\n        return 32;\n    }\n    // ASCII range. (Why someone would use HTML entities for ASCII characters I don't know, but...)\n    if (code < 128) {\n        return code;\n    }\n    // code points 128-159 are dealt with leniently by browsers, but they're incorrect. We need\n    // to correct the mistake or we'll end up with missing € signs and so on\n    if (code <= 159) {\n        return windows1252[code - 128];\n    }\n    // basic multilingual plane\n    if (code < 55296) {\n        return code;\n    }\n    // UTF-16 surrogate halves\n    if (code <= 57343) {\n        return NUL;\n    }\n    // rest of the basic multilingual plane\n    if (code <= 65535) {\n        return code;\n    }\n    // supplementary multilingual plane 0x10000 - 0x1ffff\n    if (code >= 65536 && code <= 131071) {\n        return code;\n    }\n    // supplementary ideographic plane 0x20000 - 0x2ffff\n    if (code >= 131072 && code <= 196607) {\n        return code;\n    }\n    return NUL;\n}\n\nconst voidElementNames = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction isVoidElementName(name) {\n    return voidElementNames.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst validTagName = /^\\!?[a-zA-Z]{1,}:?[a-zA-Z0-9\\-]*/;\nconst metaTags = new Map([\n    [':Window', 'Window'],\n    [':Head', 'Head'],\n    ['svelte:window', 'Window'],\n    ['svelte:head', 'Head']\n]);\nconst specials = new Map([\n    [\n        'script',\n        {\n            read: readScript,\n            property: 'js',\n        },\n    ],\n    [\n        'style',\n        {\n            read: readStyle,\n            property: 'css',\n        },\n    ],\n]);\n// based on http://developers.whatwg.org/syntax.html#syntax-tag-omission\nconst disallowedContents = new Map([\n    ['li', new Set(['li'])],\n    ['dt', new Set(['dt', 'dd'])],\n    ['dd', new Set(['dt', 'dd'])],\n    [\n        'p',\n        new Set('address article aside blockquote div dl fieldset footer form h1 h2 h3 h4 h5 h6 header hgroup hr main menu nav ol p pre section table ul'.split(' ')),\n    ],\n    ['rt', new Set(['rt', 'rp'])],\n    ['rp', new Set(['rt', 'rp'])],\n    ['optgroup', new Set(['optgroup'])],\n    ['option', new Set(['option', 'optgroup'])],\n    ['thead', new Set(['tbody', 'tfoot'])],\n    ['tbody', new Set(['tbody', 'tfoot'])],\n    ['tfoot', new Set(['tbody'])],\n    ['tr', new Set(['tr', 'tbody'])],\n    ['td', new Set(['td', 'th', 'tr'])],\n    ['th', new Set(['td', 'th', 'tr'])],\n]);\nfunction tag(parser) {\n    const start = parser.index++;\n    let parent = parser.current();\n    if (parser.eat('!--')) {\n        const data = parser.readUntil(/--\x3e/);\n        parser.eat('--\x3e', true, 'comment was left open, expected --\x3e');\n        parser.current().children.push({\n            start,\n            end: parser.index,\n            type: 'Comment',\n            data,\n        });\n        return;\n    }\n    const isClosingTag = parser.eat('/');\n    const name = readTagName(parser);\n    if (metaTags.has(name)) {\n        const slug = metaTags.get(name).toLowerCase();\n        if (isClosingTag) {\n            if ((name === ':Window' || name === 'svelte:window') && parser.current().children.length) {\n                parser.error({\n                    code: `invalid-window-content`,\n                    message: `<${name}> cannot have children`\n                }, parser.current().children[0].start);\n            }\n        }\n        else {\n            if (name in parser.metaTags) {\n                parser.error({\n                    code: `duplicate-${slug}`,\n                    message: `A component can only have one <${name}> tag`\n                }, start);\n            }\n            if (parser.stack.length > 1) {\n                parser.error({\n                    code: `invalid-${slug}-placement`,\n                    message: `<${name}> tags cannot be inside elements or blocks`\n                }, start);\n            }\n            parser.metaTags[name] = true;\n        }\n    }\n    const type = metaTags.has(name)\n        ? metaTags.get(name)\n        : 'Element'; // TODO in v2, capitalised name means 'Component'\n    const element = {\n        start,\n        end: null,\n        type,\n        name,\n        attributes: [],\n        children: [],\n    };\n    parser.allowWhitespace();\n    if (isClosingTag) {\n        if (isVoidElementName(name)) {\n            parser.error({\n                code: `invalid-void-content`,\n                message: `<${name}> is a void element and cannot have children, or a closing tag`\n            }, start);\n        }\n        parser.eat('>', true);\n        // close any elements that don't have their own closing tags, e.g. <div><p></div>\n        while (parent.name !== name) {\n            if (parent.type !== 'Element')\n                parser.error({\n                    code: `invalid-closing-tag`,\n                    message: `</${name}> attempted to close an element that was not open`\n                }, start);\n            parent.end = start;\n            parser.stack.pop();\n            parent = parser.current();\n        }\n        parent.end = parser.index;\n        parser.stack.pop();\n        return;\n    }\n    else if (disallowedContents.has(parent.name)) {\n        // can this be a child of the parent element, or does it implicitly\n        // close it, like `<li>one<li>two`?\n        if (disallowedContents.get(parent.name).has(name)) {\n            parent.end = start;\n            parser.stack.pop();\n        }\n    }\n    if (name === 'slot') {\n        let i = parser.stack.length;\n        while (i--) {\n            const item = parser.stack[i];\n            if (item.type === 'EachBlock') {\n                parser.error({\n                    code: `invalid-slot-placement`,\n                    message: `<slot> cannot be a child of an each-block`\n                }, start);\n            }\n        }\n    }\n    if (name === ':Component') {\n        parser.eat('{', true);\n        element.expression = readExpression(parser);\n        parser.allowWhitespace();\n        parser.eat('}', true);\n        parser.allowWhitespace();\n    }\n    const uniqueNames = new Set();\n    let attribute;\n    while ((attribute = readAttribute(parser, uniqueNames))) {\n        if (attribute.type === 'Binding' && !parser.allowBindings) {\n            parser.error({\n                code: `binding-disabled`,\n                message: `Two-way binding is disabled`\n            }, attribute.start);\n        }\n        element.attributes.push(attribute);\n        parser.allowWhitespace();\n    }\n    if (parser.v2 && name === 'svelte:component') {\n        // TODO post v2, treat this just as any other attribute\n        const index = element.attributes.findIndex(attr => attr.name === 'this');\n        if (!~index) {\n            parser.error({\n                code: `missing-component-definition`,\n                message: `<svelte:component> must have a 'this' attribute`\n            }, start);\n        }\n        const definition = element.attributes.splice(index, 1)[0];\n        if (definition.value === true || definition.value.length !== 1 || definition.value[0].type === 'Text') {\n            parser.error({\n                code: `invalid-component-definition`,\n                message: `invalid component definition`\n            }, definition.start);\n        }\n        element.expression = definition.value[0].expression;\n    }\n    // special cases – top-level <script> and <style>\n    if (specials.has(name) && parser.stack.length === 1) {\n        const special = specials.get(name);\n        if (parser[special.property]) {\n            parser.index = start;\n            parser.error({\n                code: `duplicate-${name}`,\n                message: `You can only have one top-level <${name}> tag per component`\n            });\n        }\n        parser.eat('>', true);\n        parser[special.property] = special.read(parser, start, element.attributes);\n        return;\n    }\n    parser.current().children.push(element);\n    const selfClosing = parser.eat('/') || isVoidElementName(name);\n    parser.eat('>', true);\n    if (selfClosing) {\n        // don't push self-closing elements onto the stack\n        element.end = parser.index;\n    }\n    else if (name === 'textarea') {\n        // special case\n        element.children = readSequence$1(parser, () => parser.template.slice(parser.index, parser.index + 11) === '</textarea>');\n        parser.read(/<\\/textarea>/);\n        element.end = parser.index;\n    }\n    else if (name === 'script') {\n        // special case\n        const start = parser.index;\n        const data = parser.readUntil(/<\\/script>/);\n        const end = parser.index;\n        element.children.push({ start, end, type: 'Text', data });\n        parser.eat('<\/script>', true);\n        element.end = parser.index;\n    }\n    else if (name === 'style') {\n        // special case\n        if (parser.v2) {\n            const start = parser.index;\n            const data = parser.readUntil(/<\\/style>/);\n            const end = parser.index;\n            element.children.push({ start, end, type: 'Text', data });\n            parser.eat('</style>', true);\n        }\n        else {\n            element.children = readSequence$1(parser, () => parser.template.slice(parser.index, parser.index + 8) === '</style>');\n            parser.read(/<\\/style>/);\n            element.end = parser.index;\n        }\n    }\n    else {\n        parser.stack.push(element);\n    }\n}\nfunction readTagName(parser) {\n    const start = parser.index;\n    // TODO hoist these back to the top, post-v2\n    const SELF = parser.v2 ? 'svelte:self' : ':Self';\n    const COMPONENT = parser.v2 ? 'svelte:component' : ':Component';\n    if (parser.eat(SELF)) {\n        // check we're inside a block, otherwise this\n        // will cause infinite recursion\n        let i = parser.stack.length;\n        let legal = false;\n        while (i--) {\n            const fragment = parser.stack[i];\n            if (fragment.type === 'IfBlock' || fragment.type === 'EachBlock') {\n                legal = true;\n                break;\n            }\n        }\n        if (!legal) {\n            parser.error({\n                code: `invalid-self-placement`,\n                message: `<${SELF}> components can only exist inside if-blocks or each-blocks`\n            }, start);\n        }\n        return SELF;\n    }\n    if (parser.eat(COMPONENT))\n        return COMPONENT;\n    const name = parser.readUntil(/(\\s|\\/|>)/);\n    if (metaTags.has(name))\n        return name;\n    if (!validTagName.test(name)) {\n        parser.error({\n            code: `invalid-tag-name`,\n            message: `Expected valid tag name`\n        }, start);\n    }\n    return name;\n}\nfunction readAttribute(parser, uniqueNames) {\n    const start = parser.index;\n    if (parser.eat(parser.v2 ? '{' : '{{')) {\n        parser.allowWhitespace();\n        if (parser.eat('...')) {\n            const expression = readExpression(parser);\n            parser.allowWhitespace();\n            parser.eat(parser.v2 ? '}' : '}}', true);\n            return {\n                start,\n                end: parser.index,\n                type: 'Spread',\n                expression\n            };\n        }\n        else {\n            if (!parser.v2) {\n                parser.error({\n                    code: `expected-spread`,\n                    message: 'Expected spread operator (...)'\n                });\n            }\n            const valueStart = parser.index;\n            const name = parser.readIdentifier();\n            parser.allowWhitespace();\n            parser.eat('}', true);\n            return {\n                start,\n                end: parser.index,\n                type: 'Attribute',\n                name,\n                value: [{\n                        start: valueStart,\n                        end: valueStart + name.length,\n                        type: 'AttributeShorthand',\n                        expression: {\n                            start: valueStart,\n                            end: valueStart + name.length,\n                            type: 'Identifier',\n                            name\n                        }\n                    }]\n            };\n        }\n    }\n    let name = parser.readUntil(/(\\s|=|\\/|>)/);\n    if (!name)\n        return null;\n    if (uniqueNames.has(name)) {\n        parser.error({\n            code: `duplicate-attribute`,\n            message: 'Attributes need to be unique'\n        }, start);\n    }\n    uniqueNames.add(name);\n    parser.allowWhitespace();\n    const directive = readDirective(parser, start, name);\n    if (directive)\n        return directive;\n    let value = parser.eat('=') ? readAttributeValue(parser) : true;\n    return {\n        start,\n        end: parser.index,\n        type: 'Attribute',\n        name,\n        value,\n    };\n}\nfunction readAttributeValue(parser) {\n    const quoteMark = parser.eat(`'`) ? `'` : parser.eat(`\"`) ? `\"` : null;\n    const regex = quoteMark === `'`\n        ? /'/\n        : quoteMark === `\"` ? /\"/ : /[\\s\"'=<>\\/`]/;\n    const value = readSequence$1(parser, () => regex.test(parser.template[parser.index]));\n    if (quoteMark)\n        parser.index += 1;\n    return value;\n}\nfunction readSequence$1(parser, done) {\n    let currentChunk = {\n        start: parser.index,\n        end: null,\n        type: 'Text',\n        data: '',\n    };\n    const chunks = [];\n    while (parser.index < parser.template.length) {\n        const index = parser.index;\n        if (done()) {\n            currentChunk.end = parser.index;\n            if (currentChunk.data)\n                chunks.push(currentChunk);\n            chunks.forEach(chunk => {\n                if (chunk.type === 'Text')\n                    chunk.data = decodeCharacterReferences(chunk.data);\n            });\n            return chunks;\n        }\n        else if (parser.eat(parser.v2 ? '{' : '{{')) {\n            if (currentChunk.data) {\n                currentChunk.end = index;\n                chunks.push(currentChunk);\n            }\n            const expression = readExpression(parser);\n            parser.allowWhitespace();\n            parser.eat(parser.v2 ? '}' : '}}', true);\n            chunks.push({\n                start: index,\n                end: parser.index,\n                type: 'MustacheTag',\n                expression,\n            });\n            currentChunk = {\n                start: parser.index,\n                end: null,\n                type: 'Text',\n                data: '',\n            };\n        }\n        else {\n            currentChunk.data += parser.template[parser.index++];\n        }\n    }\n    parser.error({\n        code: `unexpected-eof`,\n        message: `Unexpected end of input`\n    });\n}\n\nconst whitespace = /[ \\t\\r\\n]/;\n\nfunction trimStart(str) {\n    let i = 0;\n    while (whitespace.test(str[i]))\n        i += 1;\n    return str.slice(i);\n}\nfunction trimEnd(str) {\n    let i = str.length;\n    while (whitespace.test(str[i - 1]))\n        i -= 1;\n    return str.slice(0, i);\n}\n\nfunction trimWhitespace(block, trimBefore, trimAfter) {\n    if (!block.children || block.children.length === 0)\n        return; // AwaitBlock\n    const firstChild = block.children[0];\n    const lastChild = block.children[block.children.length - 1];\n    if (firstChild.type === 'Text' && trimBefore) {\n        firstChild.data = trimStart(firstChild.data);\n        if (!firstChild.data)\n            block.children.shift();\n    }\n    if (lastChild.type === 'Text' && trimAfter) {\n        lastChild.data = trimEnd(lastChild.data);\n        if (!lastChild.data)\n            block.children.pop();\n    }\n    if (block.else) {\n        trimWhitespace(block.else, trimBefore, trimAfter);\n    }\n    if (firstChild.elseif) {\n        trimWhitespace(firstChild, trimBefore, trimAfter);\n    }\n}\nfunction mustache(parser) {\n    const start = parser.index;\n    parser.index += parser.v2 ? 1 : 2;\n    parser.allowWhitespace();\n    // {{/if}} or {{/each}}\n    if (parser.eat('/')) {\n        let block = parser.current();\n        let expected;\n        if (block.type === 'ElseBlock' || block.type === 'PendingBlock' || block.type === 'ThenBlock' || block.type === 'CatchBlock') {\n            block.end = start;\n            parser.stack.pop();\n            block = parser.current();\n            expected = 'await';\n        }\n        if (block.type === 'IfBlock') {\n            expected = 'if';\n        }\n        else if (block.type === 'EachBlock') {\n            expected = 'each';\n        }\n        else if (block.type === 'AwaitBlock') {\n            expected = 'await';\n        }\n        else {\n            parser.error({\n                code: `unexpected-block-close`,\n                message: `Unexpected block closing tag`\n            });\n        }\n        parser.eat(expected, true);\n        parser.allowWhitespace();\n        parser.eat(parser.v2 ? '}' : '}}', true);\n        while (block.elseif) {\n            block.end = parser.index;\n            parser.stack.pop();\n            block = parser.current();\n            if (block.else) {\n                block.else.end = start;\n            }\n        }\n        // strip leading/trailing whitespace as necessary\n        const charBefore = parser.template[block.start - 1];\n        const charAfter = parser.template[parser.index];\n        const trimBefore = !charBefore || whitespace.test(charBefore);\n        const trimAfter = !charAfter || whitespace.test(charAfter);\n        trimWhitespace(block, trimBefore, trimAfter);\n        block.end = parser.index;\n        parser.stack.pop();\n    }\n    else if (parser.eat(parser.v2 ? ':elseif' : 'elseif')) {\n        const block = parser.current();\n        if (block.type !== 'IfBlock')\n            parser.error({\n                code: `invalid-elseif-placement`,\n                message: 'Cannot have an {{elseif ...}} block outside an {{#if ...}} block'\n            });\n        parser.requireWhitespace();\n        const expression = readExpression(parser);\n        parser.allowWhitespace();\n        parser.eat(parser.v2 ? '}' : '}}', true);\n        block.else = {\n            start: parser.index,\n            end: null,\n            type: 'ElseBlock',\n            children: [\n                {\n                    start: parser.index,\n                    end: null,\n                    type: 'IfBlock',\n                    elseif: true,\n                    expression,\n                    children: [],\n                },\n            ],\n        };\n        parser.stack.push(block.else.children[0]);\n    }\n    else if (parser.eat(parser.v2 ? ':else' : 'else')) {\n        const block = parser.current();\n        if (block.type !== 'IfBlock' && block.type !== 'EachBlock') {\n            parser.error({\n                code: `invalid-else-placement`,\n                message: 'Cannot have an {{else}} block outside an {{#if ...}} or {{#each ...}} block'\n            });\n        }\n        parser.allowWhitespace();\n        parser.eat(parser.v2 ? '}' : '}}', true);\n        block.else = {\n            start: parser.index,\n            end: null,\n            type: 'ElseBlock',\n            children: [],\n        };\n        parser.stack.push(block.else);\n    }\n    else if (parser.eat(parser.v2 ? ':then' : 'then')) {\n        // TODO DRY out this and the next section\n        const pendingBlock = parser.current();\n        if (pendingBlock.type === 'PendingBlock') {\n            pendingBlock.end = start;\n            parser.stack.pop();\n            const awaitBlock = parser.current();\n            parser.requireWhitespace();\n            awaitBlock.value = parser.readIdentifier();\n            parser.allowWhitespace();\n            parser.eat(parser.v2 ? '}' : '}}', true);\n            const thenBlock = {\n                start,\n                end: null,\n                type: 'ThenBlock',\n                children: []\n            };\n            awaitBlock.then = thenBlock;\n            parser.stack.push(thenBlock);\n        }\n    }\n    else if (parser.eat(parser.v2 ? ':catch' : 'catch')) {\n        const thenBlock = parser.current();\n        if (thenBlock.type === 'ThenBlock') {\n            thenBlock.end = start;\n            parser.stack.pop();\n            const awaitBlock = parser.current();\n            parser.requireWhitespace();\n            awaitBlock.error = parser.readIdentifier();\n            parser.allowWhitespace();\n            parser.eat(parser.v2 ? '}' : '}}', true);\n            const catchBlock = {\n                start,\n                end: null,\n                type: 'CatchBlock',\n                children: []\n            };\n            awaitBlock.catch = catchBlock;\n            parser.stack.push(catchBlock);\n        }\n    }\n    else if (parser.eat('#')) {\n        // {{#if foo}} or {{#each foo}}\n        let type;\n        if (parser.eat('if')) {\n            type = 'IfBlock';\n        }\n        else if (parser.eat('each')) {\n            type = 'EachBlock';\n        }\n        else if (parser.eat('await')) {\n            type = 'AwaitBlock';\n        }\n        else {\n            parser.error({\n                code: `expected-block-type`,\n                message: `Expected if, each or await`\n            });\n        }\n        parser.requireWhitespace();\n        const expression = readExpression(parser);\n        const block = type === 'AwaitBlock' ?\n            {\n                start,\n                end: null,\n                type,\n                expression,\n                value: null,\n                error: null,\n                pending: {\n                    start: null,\n                    end: null,\n                    type: 'PendingBlock',\n                    children: []\n                },\n                then: {\n                    start: null,\n                    end: null,\n                    type: 'ThenBlock',\n                    children: []\n                },\n                catch: {\n                    start: null,\n                    end: null,\n                    type: 'CatchBlock',\n                    children: []\n                },\n            } :\n            {\n                start,\n                end: null,\n                type,\n                expression,\n                children: [],\n            };\n        parser.allowWhitespace();\n        // {{#each}} blocks must declare a context – {{#each list as item}}\n        if (type === 'EachBlock') {\n            parser.eat('as', true);\n            parser.requireWhitespace();\n            if (parser.eat('[')) {\n                parser.allowWhitespace();\n                block.destructuredContexts = [];\n                do {\n                    parser.allowWhitespace();\n                    const destructuredContext = parser.readIdentifier();\n                    if (!destructuredContext)\n                        parser.error({\n                            code: `expected-name`,\n                            message: `Expected name`\n                        });\n                    block.destructuredContexts.push(destructuredContext);\n                    parser.allowWhitespace();\n                } while (parser.eat(','));\n                if (!block.destructuredContexts.length)\n                    parser.error({\n                        code: `expected-name`,\n                        message: `Expected name`\n                    });\n                block.context = block.destructuredContexts.join('_');\n                parser.allowWhitespace();\n                parser.eat(']', true);\n            }\n            else {\n                block.context = parser.readIdentifier();\n                if (!block.context)\n                    parser.error({\n                        code: `expected-name`,\n                        message: `Expected name`\n                    });\n            }\n            parser.allowWhitespace();\n            if (parser.eat(',')) {\n                parser.allowWhitespace();\n                block.index = parser.readIdentifier();\n                if (!block.index)\n                    parser.error({\n                        code: `expected-name`,\n                        message: `Expected name`\n                    });\n                parser.allowWhitespace();\n            }\n            if (parser.eat('(')) {\n                parser.allowWhitespace();\n                const expression = readExpression(parser);\n                // TODO eventually, we should accept any expression, and turn\n                // it into a function. For now, assume that every expression\n                // follows the `foo.id` pattern, and equates to `@id`\n                if (expression.type !== 'MemberExpression' ||\n                    expression.property.computed ||\n                    expression.property.type !== 'Identifier') {\n                    parser.error({\n                        code: `invalid-key`,\n                        message: 'invalid key'\n                    }, expression.start);\n                }\n                block.key = expression.property.name;\n                parser.allowWhitespace();\n                parser.eat(')', true);\n                parser.allowWhitespace();\n            }\n            else if (parser.eat('@')) {\n                block.key = parser.readIdentifier();\n                if (!block.key)\n                    parser.error({\n                        code: `expected-name`,\n                        message: `Expected name`\n                    });\n                parser.allowWhitespace();\n            }\n        }\n        let awaitBlockShorthand = type === 'AwaitBlock' && parser.eat('then');\n        if (awaitBlockShorthand) {\n            parser.requireWhitespace();\n            block.value = parser.readIdentifier();\n            parser.allowWhitespace();\n        }\n        parser.eat(parser.v2 ? '}' : '}}', true);\n        parser.current().children.push(block);\n        parser.stack.push(block);\n        if (type === 'AwaitBlock') {\n            const childBlock = awaitBlockShorthand ? block.then : block.pending;\n            childBlock.start = parser.index;\n            parser.stack.push(childBlock);\n        }\n    }\n    else if (parser.eat('yield')) {\n        // {{yield}}\n        // TODO deprecate\n        parser.allowWhitespace();\n        if (parser.v2) {\n            const expressionEnd = parser.index;\n            parser.eat('}', true);\n            parser.current().children.push({\n                start,\n                end: parser.index,\n                type: 'MustacheTag',\n                expression: {\n                    start: expressionEnd - 5,\n                    end: expressionEnd,\n                    type: 'Identifier',\n                    name: 'yield'\n                }\n            });\n        }\n        else {\n            parser.eat('}}', true);\n            parser.current().children.push({\n                start,\n                end: parser.index,\n                type: 'Element',\n                name: 'slot',\n                attributes: [],\n                children: []\n            });\n        }\n    }\n    else if (parser.eat(parser.v2 ? '@html' : '{')) {\n        // {{{raw}}} mustache\n        const expression = readExpression(parser);\n        parser.allowWhitespace();\n        parser.eat(parser.v2 ? '}' : '}}}', true);\n        parser.current().children.push({\n            start,\n            end: parser.index,\n            type: 'RawMustacheTag',\n            expression,\n        });\n    }\n    else {\n        const expression = readExpression(parser);\n        parser.allowWhitespace();\n        parser.eat(parser.v2 ? '}' : '}}', true);\n        parser.current().children.push({\n            start,\n            end: parser.index,\n            type: 'MustacheTag',\n            expression,\n        });\n    }\n}\n\nfunction text(parser) {\n    const start = parser.index;\n    let data = '';\n    while (parser.index < parser.template.length &&\n        !parser.match('<') &&\n        !parser.match(parser.v2 ? '{' : '{{')) {\n        data += parser.template[parser.index++];\n    }\n    parser.current().children.push({\n        start,\n        end: parser.index,\n        type: 'Text',\n        data: decodeCharacterReferences(data),\n    });\n}\n\nfunction fragment(parser) {\n    if (parser.match('<')) {\n        return tag;\n    }\n    if (parser.match(parser.v2 ? '{' : '{{')) {\n        return mustache;\n    }\n    return text;\n}\n\nconst reservedNames = new Set([\n    'arguments',\n    'await',\n    'break',\n    'case',\n    'catch',\n    'class',\n    'const',\n    'continue',\n    'debugger',\n    'default',\n    'delete',\n    'do',\n    'else',\n    'enum',\n    'eval',\n    'export',\n    'extends',\n    'false',\n    'finally',\n    'for',\n    'function',\n    'if',\n    'implements',\n    'import',\n    'in',\n    'instanceof',\n    'interface',\n    'let',\n    'new',\n    'null',\n    'package',\n    'private',\n    'protected',\n    'public',\n    'return',\n    'static',\n    'super',\n    'switch',\n    'this',\n    'throw',\n    'true',\n    'try',\n    'typeof',\n    'var',\n    'void',\n    'while',\n    'with',\n    'yield',\n]);\n\n// Adapted from https://github.com/acornjs/acorn/blob/6584815dca7440e00de841d1dad152302fdd7ca5/src/tokenize.js\n// Reproduced under MIT License https://github.com/acornjs/acorn/blob/master/LICENSE\nfunction fullCharCodeAt(str, i) {\n    let code = str.charCodeAt(i);\n    if (code <= 0xd7ff || code >= 0xe000)\n        return code;\n    let next = str.charCodeAt(i + 1);\n    return (code << 10) + next - 0x35fdc00;\n}\n\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return (hash >>> 0).toString(36);\n}\n\nfunction getLocator(source, options) {\n    if (options === void 0) { options = {}; }\n    var offsetLine = options.offsetLine || 0;\n    var offsetColumn = options.offsetColumn || 0;\n    var originalLines = source.split('\\n');\n    var start = 0;\n    var lineRanges = originalLines.map(function (line, i) {\n        var end = start + line.length + 1;\n        var range = { start: start, end: end, line: i };\n        start = end;\n        return range;\n    });\n    var i = 0;\n    function rangeContains(range, index) {\n        return range.start <= index && index < range.end;\n    }\n    function getLocation(range, index) {\n        return { line: offsetLine + range.line, column: offsetColumn + index - range.start, character: index };\n    }\n    function locate(search, startIndex) {\n        if (typeof search === 'string') {\n            search = source.indexOf(search, startIndex || 0);\n        }\n        var range = lineRanges[i];\n        var d = search >= range.end ? 1 : -1;\n        while (range) {\n            if (rangeContains(range, search))\n                return getLocation(range, search);\n            i += d;\n            range = lineRanges[i];\n        }\n    }\n    return locate;\n}\nfunction locate(source, search, options) {\n    if (typeof options === 'number') {\n        throw new Error('locate takes a { startIndex, offsetLine, offsetColumn } object as the third argument');\n    }\n    return getLocator(source, options)(search, options && options.startIndex);\n}\n\nfunction tabsToSpaces(str) {\n    return str.replace(/^\\t+/, match => match.split('\\t').join('  '));\n}\nfunction getCodeFrame(source, line, column) {\n    const lines = source.split('\\n');\n    const frameStart = Math.max(0, line - 2);\n    const frameEnd = Math.min(line + 3, lines.length);\n    const digits = String(frameEnd + 1).length;\n    return lines\n        .slice(frameStart, frameEnd)\n        .map((str, i) => {\n        const isErrorLine = frameStart + i === line;\n        let lineNum = String(i + frameStart + 1);\n        while (lineNum.length < digits)\n            lineNum = ` ${lineNum}`;\n        if (isErrorLine) {\n            const indicator = repeat(' ', digits + 2 + tabsToSpaces(str.slice(0, column)).length) + '^';\n            return `${lineNum}: ${tabsToSpaces(str)}\\n${indicator}`;\n        }\n        return `${lineNum}: ${tabsToSpaces(str)}`;\n    })\n        .join('\\n');\n}\n\nclass CompileError extends Error {\n    toString() {\n        return `${this.message} (${this.loc.line}:${this.loc.column})\\n${this.frame}`;\n    }\n}\nfunction error$1(message, props) {\n    const error = new CompileError(message);\n    error.name = props.name;\n    const start = locate(props.source, props.start);\n    const end = locate(props.source, props.end || props.start);\n    error.code = props.code;\n    error.loc = { line: start.line + 1, column: start.column };\n    error.end = { line: end.line + 1, column: end.column };\n    error.pos = props.start;\n    error.filename = props.filename;\n    error.frame = getCodeFrame(props.source, start.line, start.column);\n    throw error;\n}\n\nlet Parser$1 = class Parser {\n    constructor(template, options) {\n        this.v2 = options.parser === 'v2';\n        if (typeof template !== 'string') {\n            throw new TypeError('Template must be a string');\n        }\n        this.template = template.replace(/\\s+$/, '');\n        this.filename = options.filename;\n        this.allowBindings = options.bind !== false;\n        this.index = 0;\n        this.stack = [];\n        this.metaTags = {};\n        this.html = {\n            start: null,\n            end: null,\n            type: 'Fragment',\n            children: [],\n        };\n        this.css = null;\n        this.js = null;\n        this.stack.push(this.html);\n        let state = fragment;\n        while (this.index < this.template.length) {\n            state = state(this) || fragment;\n        }\n        if (this.stack.length > 1) {\n            const current = this.current();\n            const type = current.type === 'Element' ? `<${current.name}>` : 'Block';\n            const slug = current.type === 'Element' ? 'element' : 'block';\n            this.error({\n                code: `unclosed-${slug}`,\n                message: `${type} was left open`\n            }, current.start);\n        }\n        if (state !== fragment) {\n            this.error({\n                code: `unexpected-eof`,\n                message: 'Unexpected end of input'\n            });\n        }\n        if (this.html.children.length) {\n            let start = this.html.children[0] && this.html.children[0].start;\n            while (/\\s/.test(template[start]))\n                start += 1;\n            let end = this.html.children[this.html.children.length - 1] && this.html.children[this.html.children.length - 1].end;\n            while (/\\s/.test(template[end - 1]))\n                end -= 1;\n            this.html.start = start;\n            this.html.end = end;\n        }\n        else {\n            this.html.start = this.html.end = null;\n        }\n    }\n    current() {\n        return this.stack[this.stack.length - 1];\n    }\n    acornError(err) {\n        this.error({\n            code: `parse-error`,\n            message: err.message.replace(/ \\(\\d+:\\d+\\)$/, '')\n        }, err.pos);\n    }\n    error({ code, message }, index = this.index) {\n        error$1(message, {\n            name: 'ParseError',\n            code,\n            source: this.template,\n            start: index,\n            filename: this.filename\n        });\n    }\n    eat(str, required, message) {\n        if (this.match(str)) {\n            this.index += str.length;\n            return true;\n        }\n        if (required) {\n            this.error({\n                code: `unexpected-${this.index === this.template.length ? 'eof' : 'token'}`,\n                message: message || `Expected ${str}`\n            });\n        }\n        return false;\n    }\n    match(str) {\n        return this.template.slice(this.index, this.index + str.length) === str;\n    }\n    allowWhitespace() {\n        while (this.index < this.template.length &&\n            whitespace.test(this.template[this.index])) {\n            this.index++;\n        }\n    }\n    read(pattern) {\n        const match = pattern.exec(this.template.slice(this.index));\n        if (!match || match.index !== 0)\n            return null;\n        this.index += match[0].length;\n        return match[0];\n    }\n    readIdentifier() {\n        const start = this.index;\n        let i = this.index;\n        const code = fullCharCodeAt(this.template, i);\n        if (!isIdentifierStart(code, true))\n            return null;\n        i += code <= 0xffff ? 1 : 2;\n        while (i < this.template.length) {\n            const code = fullCharCodeAt(this.template, i);\n            if (!isIdentifierChar(code, true))\n                break;\n            i += code <= 0xffff ? 1 : 2;\n        }\n        const identifier = this.template.slice(this.index, this.index = i);\n        if (reservedNames.has(identifier)) {\n            this.error({\n                code: `unexpected-reserved-word`,\n                message: `'${identifier}' is a reserved word in JavaScript and cannot be used here`\n            }, start);\n        }\n        return identifier;\n    }\n    readUntil(pattern) {\n        if (this.index >= this.template.length)\n            this.error({\n                code: `unexpected-eof`,\n                message: 'Unexpected end of input'\n            });\n        const start = this.index;\n        const match = pattern.exec(this.template.slice(start));\n        if (match) {\n            this.index = start + match.index;\n            return this.template.slice(start, this.index);\n        }\n        this.index = this.template.length;\n        return this.template.slice(start);\n    }\n    remaining() {\n        return this.template.slice(this.index);\n    }\n    requireWhitespace() {\n        if (!whitespace.test(this.template[this.index])) {\n            this.error({\n                code: `missing-whitespace`,\n                message: `Expected whitespace`\n            });\n        }\n        this.allowWhitespace();\n    }\n};\nfunction parse$1(template, options = {}) {\n    const parser = new Parser$1(template, options);\n    return {\n        hash: hash(parser.template),\n        html: parser.html,\n        css: parser.css,\n        js: parser.js,\n    };\n}\n\nconst disallowed = new Set(['Literal', 'ObjectExpression', 'ArrayExpression']);\nfunction data$1(validator, prop) {\n    while (prop.type === 'ParenthesizedExpression')\n        prop = prop.expression;\n    if (disallowed.has(prop.value.type)) {\n        validator.error(prop.value, {\n            code: `invalid-data-property`,\n            message: `'data' must be a function`\n        });\n    }\n}\n\nfunction getMethodName(node) {\n    if (node.type === 'Identifier')\n        return node.name;\n    if (node.type === 'Literal')\n        return String(node.value);\n}\n\nfunction checkForDupes(validator, properties) {\n    const seen = new Set();\n    properties.forEach(prop => {\n        const name = getMethodName(prop.key);\n        if (seen.has(name)) {\n            validator.error(prop, {\n                code: `duplicate-property`,\n                message: `Duplicate property '${name}'`\n            });\n        }\n        seen.add(name);\n    });\n}\n\nfunction checkForComputedKeys(validator, properties) {\n    properties.forEach(prop => {\n        if (prop.key.computed) {\n            validator.error(prop, {\n                code: `computed-key`,\n                message: `Cannot use computed keys`\n            });\n        }\n    });\n}\n\nfunction actions(validator, prop) {\n    if (prop.value.type !== 'ObjectExpression') {\n        validator.error(prop, {\n            code: `invalid-actions`,\n            message: `The 'actions' property must be an object literal`\n        });\n    }\n    checkForDupes(validator, prop.value.properties);\n    checkForComputedKeys(validator, prop.value.properties);\n}\n\nfunction isValidIdentifier(str) {\n    let i = 0;\n    while (i < str.length) {\n        const code = fullCharCodeAt(str, i);\n        if (!(i === 0 ? isIdentifierStart : isIdentifierChar)(code, true))\n            return false;\n        i += code <= 0xffff ? 1 : 2;\n    }\n    return true;\n}\n\nfunction walkThroughTopFunctionScope(body, callback) {\n    let lexicalDepth = 0;\n    walk(body, {\n        enter(node) {\n            if (/^Function/.test(node.type)) {\n                lexicalDepth += 1;\n            }\n            else if (lexicalDepth === 0) {\n                callback(node);\n            }\n        },\n        leave(node) {\n            if (/^Function/.test(node.type)) {\n                lexicalDepth -= 1;\n            }\n        },\n    });\n}\n\nfunction isThisGetCallExpression(node) {\n    return node.type === 'CallExpression' &&\n        node.callee.type === 'MemberExpression' &&\n        node.callee.object.type === 'ThisExpression' &&\n        node.callee.property.name === 'get';\n}\n\nconst isFunctionExpression = new Set([\n    'FunctionExpression',\n    'ArrowFunctionExpression',\n]);\nfunction computed(validator, prop) {\n    if (prop.value.type !== 'ObjectExpression') {\n        validator.error(prop, {\n            code: `invalid-computed-property`,\n            message: `The 'computed' property must be an object literal`\n        });\n    }\n    checkForDupes(validator, prop.value.properties);\n    checkForComputedKeys(validator, prop.value.properties);\n    prop.value.properties.forEach((computation) => {\n        const name = getMethodName(computation.key);\n        if (!isValidIdentifier(name)) {\n            const suggestion = name.replace(/[^_$a-z0-9]/ig, '_').replace(/^\\d/, '_$&');\n            validator.error(computation, {\n                code: `invalid-computed-name`,\n                message: `Computed property name '${name}' is invalid — must be a valid identifier such as ${suggestion}`\n            });\n        }\n        if (reservedNames.has(name)) {\n            validator.error(computation, {\n                code: `invalid-computed-name`,\n                message: `Computed property name '${name}' is invalid — cannot be a JavaScript reserved word`\n            });\n        }\n        if (!isFunctionExpression.has(computation.value.type)) {\n            validator.error(computation.value, {\n                code: `invalid-computed-value`,\n                message: `Computed properties can be function expressions or arrow function expressions`\n            });\n        }\n        const { body, params } = computation.value;\n        walkThroughTopFunctionScope(body, (node) => {\n            if (isThisGetCallExpression(node) && !node.callee.property.computed) {\n                validator.error(node, {\n                    code: `impure-computed`,\n                    message: `Cannot use this.get(...) — values must be passed into the function as arguments`\n                });\n            }\n            if (node.type === 'ThisExpression') {\n                validator.error(node, {\n                    code: `impure-computed`,\n                    message: `Computed properties should be pure functions — they do not have access to the component instance and cannot use 'this'. Did you mean to put this in 'methods'?`\n                });\n            }\n        });\n        if (params.length === 0) {\n            validator.error(computation.value, {\n                code: `impure-computed`,\n                message: `A computed value must depend on at least one property`\n            });\n        }\n        if (validator.v2) {\n            if (params.length > 1) {\n                validator.error(computation.value, {\n                    code: `invalid-computed-arguments`,\n                    message: `Computed properties must take a single argument`\n                });\n            }\n            const param = params[0];\n            if (param.type !== 'ObjectPattern') {\n                // TODO in v2, allow the entire object to be passed in\n                validator.error(computation.value, {\n                    code: `invalid-computed-argument`,\n                    message: `Computed property argument must be a destructured object pattern`\n                });\n            }\n        }\n        else {\n            params.forEach((param) => {\n                const valid = param.type === 'Identifier' ||\n                    (param.type === 'AssignmentPattern' &&\n                        param.left.type === 'Identifier');\n                if (!valid) {\n                    // TODO change this for v2\n                    validator.error(param, {\n                        code: `invalid-computed-arguments`,\n                        message: `Computed properties cannot use destructuring in function parameters`\n                    });\n                }\n            });\n        }\n    });\n}\n\nfunction isReference(node, parent) {\n    if (node.type === 'MemberExpression') {\n        return !node.computed && isReference(node.object, node);\n    }\n    if (node.type === 'Identifier') {\n        // the only time we could have an identifier node without a parent is\n        // if it's the entire body of a function without a block statement –\n        // i.e. an arrow function expression like `a => a`\n        if (!parent)\n            return true;\n        // TODO is this right?\n        if (parent.type === 'MemberExpression' || parent.type === 'MethodDefinition') {\n            return parent.computed || node === parent.object;\n        }\n        // disregard the `bar` in `{ bar: foo }`, but keep it in `{ [bar]: foo }`\n        if (parent.type === 'Property')\n            return parent.computed || node === parent.value;\n        // disregard the `bar` in `export { foo as bar }`\n        if (parent.type === 'ExportSpecifier' && node !== parent.local)\n            return false;\n        return true;\n    }\n    return false;\n}\n\nfunction usesThisOrArguments(node) {\n    let result = false;\n    walk(node, {\n        enter(node, parent) {\n            if (result ||\n                node.type === 'FunctionExpression' ||\n                node.type === 'FunctionDeclaration') {\n                return this.skip();\n            }\n            if (node.type === 'ThisExpression') {\n                result = true;\n            }\n            if (node.type === 'Identifier' &&\n                isReference(node, parent) &&\n                node.name === 'arguments') {\n                result = true;\n            }\n        },\n    });\n    return result;\n}\n\nfunction oncreate(validator, prop) {\n    if (prop.value.type === 'ArrowFunctionExpression') {\n        if (usesThisOrArguments(prop.value.body)) {\n            validator.error(prop, {\n                code: `invalid-oncreate-property`,\n                message: `'oncreate' should be a function expression, not an arrow function expression`\n            });\n        }\n    }\n}\n\nfunction ondestroy(validator, prop) {\n    if (prop.value.type === 'ArrowFunctionExpression') {\n        if (usesThisOrArguments(prop.value.body)) {\n            validator.error(prop, {\n                code: `invalid-ondestroy-property`,\n                message: `'ondestroy' should be a function expression, not an arrow function expression`\n            });\n        }\n    }\n}\n\nfunction onstate(validator, prop) {\n    if (prop.value.type === 'ArrowFunctionExpression') {\n        if (usesThisOrArguments(prop.value.body)) {\n            validator.error(prop, {\n                code: `invalid-onstate-property`,\n                message: `'onstate' should be a function expression, not an arrow function expression`\n            });\n        }\n    }\n}\n\nfunction onupdate(validator, prop) {\n    if (prop.value.type === 'ArrowFunctionExpression') {\n        if (usesThisOrArguments(prop.value.body)) {\n            validator.error(prop, {\n                code: `invalid-onupdate-property`,\n                message: `'onupdate' should be a function expression, not an arrow function expression`\n            });\n        }\n    }\n}\n\nfunction onrender(validator, prop) {\n    validator.warn(prop, {\n        code: `deprecated-onrender`,\n        message: `'onrender' has been deprecated in favour of 'oncreate', and will cause an error in Svelte 2.x`\n    });\n    oncreate(validator, prop);\n}\n\nfunction onteardown(validator, prop) {\n    validator.warn(prop, {\n        code: `deprecated-onteardown`,\n        message: `'onteardown' has been deprecated in favour of 'ondestroy', and will cause an error in Svelte 2.x`\n    });\n    ondestroy(validator, prop);\n}\n\nfunction helpers(validator, prop) {\n    if (prop.value.type !== 'ObjectExpression') {\n        validator.error(prop, {\n            code: `invalid-helpers-property`,\n            message: `The 'helpers' property must be an object literal`\n        });\n    }\n    checkForDupes(validator, prop.value.properties);\n    checkForComputedKeys(validator, prop.value.properties);\n    prop.value.properties.forEach((prop) => {\n        if (!/FunctionExpression/.test(prop.value.type))\n            return;\n        let usesArguments = false;\n        walkThroughTopFunctionScope(prop.value.body, (node) => {\n            if (isThisGetCallExpression(node) && !node.callee.property.computed) {\n                validator.error(node, {\n                    code: `impure-helper`,\n                    message: `Cannot use this.get(...) — values must be passed into the helper function as arguments`\n                });\n            }\n            if (node.type === 'ThisExpression') {\n                validator.error(node, {\n                    code: `impure-helper`,\n                    message: `Helpers should be pure functions — they do not have access to the component instance and cannot use 'this'. Did you mean to put this in 'methods'?`\n                });\n            }\n            else if (node.type === 'Identifier' && node.name === 'arguments') {\n                usesArguments = true;\n            }\n        });\n        if (prop.value.params.length === 0 && !usesArguments) {\n            validator.warn(prop, {\n                code: `impure-helper`,\n                message: `Helpers should be pure functions, with at least one argument`\n            });\n        }\n    });\n}\n\nfunction checkForAccessors(validator, properties, label) {\n    properties.forEach(prop => {\n        if (prop.kind !== 'init') {\n            validator.error(prop, {\n                code: `illegal-accessor`,\n                message: `${label} cannot use getters and setters`\n            });\n        }\n    });\n}\n\nconst builtin = new Set(['set', 'get', 'on', 'fire', 'destroy']);\nfunction methods(validator, prop) {\n    if (prop.value.type !== 'ObjectExpression') {\n        validator.error(prop, {\n            code: `invalid-methods-property`,\n            message: `The 'methods' property must be an object literal`\n        });\n    }\n    checkForAccessors(validator, prop.value.properties, 'Methods');\n    checkForDupes(validator, prop.value.properties);\n    checkForComputedKeys(validator, prop.value.properties);\n    prop.value.properties.forEach((prop) => {\n        const name = getMethodName(prop.key);\n        if (builtin.has(name)) {\n            validator.error(prop, {\n                code: `invalid-method-name`,\n                message: `Cannot overwrite built-in method '${name}'`\n            });\n        }\n        if (prop.value.type === 'ArrowFunctionExpression') {\n            if (usesThisOrArguments(prop.value.body)) {\n                validator.error(prop, {\n                    code: `invalid-method-value`,\n                    message: `Method '${prop.key.name}' should be a function expression, not an arrow function expression`\n                });\n            }\n        }\n    });\n}\n\nfunction components(validator, prop) {\n    if (prop.value.type !== 'ObjectExpression') {\n        validator.error(prop, {\n            code: `invalid-components-property`,\n            message: `The 'components' property must be an object literal`\n        });\n    }\n    checkForDupes(validator, prop.value.properties);\n    checkForComputedKeys(validator, prop.value.properties);\n    prop.value.properties.forEach((component) => {\n        const name = getMethodName(component.key);\n        if (name === 'state') {\n            // TODO is this still true?\n            validator.error(component, {\n                code: `invalid-name`,\n                message: `Component constructors cannot be called 'state' due to technical limitations`\n            });\n        }\n        if (!/^[A-Z]/.test(name)) {\n            validator.warn(component, {\n                code: `component-lowercase`,\n                message: `Component names should be capitalised`\n            });\n        }\n    });\n}\n\nfunction events(validator, prop) {\n    if (prop.value.type !== 'ObjectExpression') {\n        validator.error(prop, {\n            code: `invalid-events-property`,\n            message: `The 'events' property must be an object literal`\n        });\n    }\n    checkForDupes(validator, prop.value.properties);\n    checkForComputedKeys(validator, prop.value.properties);\n}\n\nconst html = 'http://www.w3.org/1999/xhtml';\nconst mathml = 'http://www.w3.org/1998/Math/MathML';\nconst svg = 'http://www.w3.org/2000/svg';\nconst xlink = 'http://www.w3.org/1999/xlink';\nconst xml = 'http://www.w3.org/XML/1998/namespace';\nconst xmlns = 'http://www.w3.org/2000/xmlns';\nconst validNamespaces = [\n    'html',\n    'mathml',\n    'svg',\n    'xlink',\n    'xml',\n    'xmlns',\n    html,\n    mathml,\n    svg,\n    xlink,\n    xml,\n    xmlns,\n];\nconst namespaces = { html, mathml, svg, xlink, xml, xmlns };\n\nfunction nodeToString(node) {\n    if (node.type === 'Literal' && typeof node.value === 'string') {\n        return node.value;\n    }\n    else if (node.type === 'TemplateLiteral'\n        && node.quasis.length === 1\n        && node.expressions.length === 0) {\n        return node.quasis[0].value.raw;\n    }\n}\n\n// adapted from https://github.com/Glench/fuzzyset.js/blob/master/lib/fuzzyset.js\n// BSD Licensed\nconst GRAM_SIZE_LOWER = 2;\nconst GRAM_SIZE_UPPER = 3;\n// return an edit distance from 0 to 1\nfunction _distance(str1, str2) {\n    if (str1 === null && str2 === null)\n        throw 'Trying to compare two null values';\n    if (str1 === null || str2 === null)\n        return 0;\n    str1 = String(str1);\n    str2 = String(str2);\n    const distance = levenshtein(str1, str2);\n    if (str1.length > str2.length) {\n        return 1 - distance / str1.length;\n    }\n    else {\n        return 1 - distance / str2.length;\n    }\n}\n// helper functions\nfunction levenshtein(str1, str2) {\n    const current = [];\n    let prev;\n    let value;\n    for (let i = 0; i <= str2.length; i++) {\n        for (let j = 0; j <= str1.length; j++) {\n            if (i && j) {\n                if (str1.charAt(j - 1) === str2.charAt(i - 1)) {\n                    value = prev;\n                }\n                else {\n                    value = Math.min(current[j], current[j - 1], prev) + 1;\n                }\n            }\n            else {\n                value = i + j;\n            }\n            prev = current[j];\n            current[j] = value;\n        }\n    }\n    return current.pop();\n}\nconst _nonWordRe = /[^\\w, ]+/;\nfunction _iterateGrams(value, gramSize) {\n    gramSize = gramSize || 2;\n    const simplified = '-' + value.toLowerCase().replace(_nonWordRe, '') + '-';\n    const lenDiff = gramSize - simplified.length;\n    const results = [];\n    if (lenDiff > 0) {\n        for (let i = 0; i < lenDiff; ++i) {\n            value += '-';\n        }\n    }\n    for (let i = 0; i < simplified.length - gramSize + 1; ++i) {\n        results.push(simplified.slice(i, i + gramSize));\n    }\n    return results;\n}\nfunction _gramCounter(value, gramSize) {\n    // return an object where key=gram, value=number of occurrences\n    gramSize = gramSize || 2;\n    const result = {};\n    const grams = _iterateGrams(value, gramSize);\n    let i = 0;\n    for (i; i < grams.length; ++i) {\n        if (grams[i] in result) {\n            result[grams[i]] += 1;\n        }\n        else {\n            result[grams[i]] = 1;\n        }\n    }\n    return result;\n}\nfunction sortDescending(a, b) {\n    return b[0] - a[0];\n}\nclass FuzzySet {\n    constructor(arr) {\n        // define all the object functions and attributes\n        this.exactSet = {};\n        this.matchDict = {};\n        this.items = {};\n        // initialization\n        for (let i = GRAM_SIZE_LOWER; i < GRAM_SIZE_UPPER + 1; ++i) {\n            this.items[i] = [];\n        }\n        // add all the items to the set\n        for (let i = 0; i < arr.length; ++i) {\n            this.add(arr[i]);\n        }\n    }\n    add(value) {\n        const normalizedValue = value.toLowerCase();\n        if (normalizedValue in this.exactSet) {\n            return false;\n        }\n        let i = GRAM_SIZE_LOWER;\n        for (i; i < GRAM_SIZE_UPPER + 1; ++i) {\n            this._add(value, i);\n        }\n    }\n    _add(value, gramSize) {\n        const normalizedValue = value.toLowerCase();\n        const items = this.items[gramSize] || [];\n        const index = items.length;\n        items.push(0);\n        const gramCounts = _gramCounter(normalizedValue, gramSize);\n        let sumOfSquareGramCounts = 0;\n        let gram;\n        let gramCount;\n        for (gram in gramCounts) {\n            gramCount = gramCounts[gram];\n            sumOfSquareGramCounts += Math.pow(gramCount, 2);\n            if (gram in this.matchDict) {\n                this.matchDict[gram].push([index, gramCount]);\n            }\n            else {\n                this.matchDict[gram] = [[index, gramCount]];\n            }\n        }\n        const vectorNormal = Math.sqrt(sumOfSquareGramCounts);\n        items[index] = [vectorNormal, normalizedValue];\n        this.items[gramSize] = items;\n        this.exactSet[normalizedValue] = value;\n    }\n    ;\n    get(value) {\n        const normalizedValue = value.toLowerCase();\n        const result = this.exactSet[normalizedValue];\n        if (result) {\n            return [[1, result]];\n        }\n        let results = [];\n        // start with high gram size and if there are no results, go to lower gram sizes\n        for (let gramSize = GRAM_SIZE_UPPER; gramSize >= GRAM_SIZE_LOWER; --gramSize) {\n            results = this.__get(value, gramSize);\n            if (results) {\n                return results;\n            }\n        }\n        return null;\n    }\n    __get(value, gramSize) {\n        const normalizedValue = value.toLowerCase();\n        const matches = {};\n        const gramCounts = _gramCounter(normalizedValue, gramSize);\n        const items = this.items[gramSize];\n        let sumOfSquareGramCounts = 0;\n        let gram;\n        let gramCount;\n        let i;\n        let index;\n        let otherGramCount;\n        for (gram in gramCounts) {\n            gramCount = gramCounts[gram];\n            sumOfSquareGramCounts += Math.pow(gramCount, 2);\n            if (gram in this.matchDict) {\n                for (i = 0; i < this.matchDict[gram].length; ++i) {\n                    index = this.matchDict[gram][i][0];\n                    otherGramCount = this.matchDict[gram][i][1];\n                    if (index in matches) {\n                        matches[index] += gramCount * otherGramCount;\n                    }\n                    else {\n                        matches[index] = gramCount * otherGramCount;\n                    }\n                }\n            }\n        }\n        const vectorNormal = Math.sqrt(sumOfSquareGramCounts);\n        let results = [];\n        let matchScore;\n        // build a results list of [score, str]\n        for (const matchIndex in matches) {\n            matchScore = matches[matchIndex];\n            results.push([\n                matchScore / (vectorNormal * items[matchIndex][0]),\n                items[matchIndex][1],\n            ]);\n        }\n        results.sort(sortDescending);\n        let newResults = [];\n        const endIndex = Math.min(50, results.length);\n        // truncate somewhat arbitrarily to 50\n        for (let i = 0; i < endIndex; ++i) {\n            newResults.push([\n                _distance(results[i][1], normalizedValue),\n                results[i][1],\n            ]);\n        }\n        results = newResults;\n        results.sort(sortDescending);\n        newResults = [];\n        for (let i = 0; i < results.length; ++i) {\n            if (results[i][0] == results[0][0]) {\n                newResults.push([results[i][0], this.exactSet[results[i][1]]]);\n            }\n        }\n        return newResults;\n    }\n    ;\n}\n\nfunction fuzzymatch(name, names) {\n    const set = new FuzzySet(names);\n    const matches = set.get(name);\n    return matches && matches[0] && matches[0][0] > 0.7 ? matches[0][1] : null;\n}\n\nconst valid = new Set(validNamespaces);\nfunction namespace(validator, prop) {\n    const ns = nodeToString(prop.value);\n    if (typeof ns !== 'string') {\n        validator.error(prop, {\n            code: `invalid-namespace-property`,\n            message: `The 'namespace' property must be a string literal representing a valid namespace`\n        });\n    }\n    if (!valid.has(ns)) {\n        const match = fuzzymatch(ns, validNamespaces);\n        if (match) {\n            validator.error(prop, {\n                code: `invalid-namespace-property`,\n                message: `Invalid namespace '${ns}' (did you mean '${match}'?)`\n            });\n        }\n        else {\n            validator.error(prop, {\n                code: `invalid-namespace-property`,\n                message: `Invalid namespace '${ns}'`\n            });\n        }\n    }\n}\n\nfunction preload(validator, prop) {\n    // not sure there's anything we need to check here...\n}\n\nfunction props(validator, prop) {\n    if (prop.value.type !== 'ArrayExpression') {\n        validator.error(prop.value, {\n            code: `invalid-props-property`,\n            message: `'props' must be an array expression, if specified`\n        });\n    }\n    prop.value.elements.forEach((element) => {\n        if (typeof nodeToString(element) !== 'string') {\n            validator.error(element, {\n                code: `invalid-props-property`,\n                message: `'props' must be an array of string literals`\n            });\n        }\n    });\n}\n\nfunction tag$1(validator, prop) {\n    const tag = nodeToString(prop.value);\n    if (typeof tag !== 'string') {\n        validator.error(prop.value, {\n            code: `invalid-tag-property`,\n            message: `'tag' must be a string literal`\n        });\n    }\n    if (!/^[a-zA-Z][a-zA-Z0-9]*-[a-zA-Z0-9-]+$/.test(tag)) {\n        validator.error(prop.value, {\n            code: `invalid-tag-property`,\n            message: `tag name must be two or more words joined by the '-' character`\n        });\n    }\n}\n\nfunction transitions(validator, prop) {\n    if (prop.value.type !== 'ObjectExpression') {\n        validator.error(prop, {\n            code: `invalid-transitions-property`,\n            message: `The 'transitions' property must be an object literal`\n        });\n    }\n    checkForDupes(validator, prop.value.properties);\n    checkForComputedKeys(validator, prop.value.properties);\n    prop.value.properties.forEach(() => {\n        // TODO probably some validation that can happen here...\n        // checking for use of `this` etc?\n    });\n}\n\nconst disallowed$1 = new Set(['Literal', 'ObjectExpression', 'ArrayExpression']);\nfunction setup(validator, prop) {\n    while (prop.type === 'ParenthesizedExpression')\n        prop = prop.expression;\n    if (disallowed$1.has(prop.value.type)) {\n        validator.error(prop.value, {\n            code: `invalid-setup-property`,\n            message: `'setup' must be a function`\n        });\n    }\n}\n\nfunction store(validator, prop) {\n    // not sure there's anything we need to check here...\n}\n\nfunction immutable(validator, prop) {\n    if (prop.value.type !== 'Literal' || typeof prop.value.value !== 'boolean') {\n        validator.error(prop.value, {\n            code: `invalid-immutable-property`,\n            message: `'immutable' must be a boolean literal`\n        });\n    }\n}\n\nvar propValidators = {\n    data: data$1,\n    actions,\n    computed,\n    oncreate,\n    ondestroy,\n    onstate,\n    onupdate,\n    onrender,\n    onteardown,\n    helpers,\n    methods,\n    components,\n    events,\n    namespace,\n    preload,\n    props,\n    tag: tag$1,\n    transitions,\n    setup,\n    store,\n    immutable,\n};\n\nconst validPropList = Object.keys(propValidators);\nfunction validateJs(validator, js) {\n    js.content.body.forEach((node) => {\n        // check there are no named exports\n        if (node.type === 'ExportNamedDeclaration') {\n            validator.error(node, {\n                code: `named-export`,\n                message: `A component can only have a default export`\n            });\n        }\n        if (node.type === 'ExportDefaultDeclaration') {\n            if (node.declaration.type !== 'ObjectExpression') {\n                validator.error(node.declaration, {\n                    code: `invalid-default-export`,\n                    message: `Default export must be an object literal`\n                });\n            }\n            checkForComputedKeys(validator, node.declaration.properties);\n            checkForDupes(validator, node.declaration.properties);\n            const props = validator.properties;\n            node.declaration.properties.forEach((prop) => {\n                props.set(getMethodName(prop.key), prop);\n            });\n            // Remove these checks in version 2\n            if (props.has('oncreate') && props.has('onrender')) {\n                validator.error(props.get('onrender'), {\n                    code: `duplicate-oncreate`,\n                    message: 'Cannot have both oncreate and onrender'\n                });\n            }\n            if (props.has('ondestroy') && props.has('onteardown')) {\n                validator.error(props.get('onteardown'), {\n                    code: `duplicate-ondestroy`,\n                    message: 'Cannot have both ondestroy and onteardown'\n                });\n            }\n            // ensure all exported props are valid\n            node.declaration.properties.forEach((prop) => {\n                const name = getMethodName(prop.key);\n                const propValidator = propValidators[name];\n                if (propValidator) {\n                    propValidator(validator, prop);\n                }\n                else {\n                    const match = fuzzymatch(name, validPropList);\n                    if (match) {\n                        validator.error(prop, {\n                            code: `unexpected-property`,\n                            message: `Unexpected property '${name}' (did you mean '${match}'?)`\n                        });\n                    }\n                    else if (/FunctionExpression/.test(prop.value.type)) {\n                        validator.error(prop, {\n                            code: `unexpected-property`,\n                            message: `Unexpected property '${name}' (did you mean to include it in 'methods'?)`\n                        });\n                    }\n                    else {\n                        validator.error(prop, {\n                            code: `unexpected-property`,\n                            message: `Unexpected property '${name}'`\n                        });\n                    }\n                }\n            });\n            if (props.has('namespace')) {\n                const ns = nodeToString(props.get('namespace').value);\n                validator.namespace = namespaces[ns] || ns;\n            }\n            validator.defaultExport = node;\n        }\n    });\n    ['components', 'methods', 'helpers', 'transitions', 'actions'].forEach(key => {\n        if (validator.properties.has(key)) {\n            validator.properties.get(key).value.properties.forEach((prop) => {\n                validator[key].set(getMethodName(prop.key), prop.value);\n            });\n        }\n    });\n}\n\nfunction flatten(node) {\n    const parts = [];\n    const propEnd = node.end;\n    while (node.type === 'MemberExpression') {\n        if (node.computed)\n            return null;\n        parts.unshift(node.property.name);\n        node = node.object;\n    }\n    const propStart = node.end;\n    const name = node.type === 'Identifier'\n        ? node.name\n        : node.type === 'ThisExpression' ? 'this' : null;\n    if (!name)\n        return null;\n    parts.unshift(name);\n    return { name, parts, keypath: `${name}[✂${propStart}-${propEnd}✂]` };\n}\n\nfunction list$1(items, conjunction = 'or') {\n    if (items.length === 1)\n        return items[0];\n    return `${items.slice(0, -1).join(', ')} ${conjunction} ${items[items.length - 1]}`;\n}\n\nconst validCalleeObjects = new Set(['this', 'event', 'console']);\n\nconst validBuiltins = new Set(['set', 'fire', 'destroy']);\nfunction validateEventHandlerCallee(validator, attribute, refCallees) {\n    if (!attribute.expression)\n        return;\n    const { callee, type } = attribute.expression;\n    if (type !== 'CallExpression') {\n        validator.error(attribute.expression, {\n            code: `invalid-event-handler`,\n            message: `Expected a call expression`\n        });\n    }\n    const { name } = flatten(callee);\n    if (validCalleeObjects.has(name) || name === 'options')\n        return;\n    if (name === 'refs') {\n        refCallees.push(callee);\n        return;\n    }\n    if (name === 'store' && attribute.expression.callee.type === 'MemberExpression') {\n        if (!validator.options.store) {\n            validator.warn(attribute.expression, {\n                code: `options-missing-store`,\n                message: 'compile with `store: true` in order to call store methods'\n            });\n        }\n        return;\n    }\n    if ((callee.type === 'Identifier' && validBuiltins.has(callee.name)) ||\n        validator.methods.has(callee.name))\n        return;\n    const validCallees = ['this.*', 'event.*', 'options.*', 'console.*'].concat(validator.options.store ? 'store.*' : [], Array.from(validBuiltins), Array.from(validator.methods.keys()));\n    let message = `'${validator.source.slice(callee.start, callee.end)}' is an invalid callee (should be one of ${list$1(validCallees)})`;\n    if (callee.type === 'Identifier' && validator.helpers.has(callee.name)) {\n        message += `. '${callee.name}' exists on 'helpers', did you put it in the wrong place?`;\n    }\n    validator.warn(attribute.expression, {\n        code: `invalid-callee`,\n        message\n    });\n}\n\nconst svg$1 = /^(?:altGlyph|altGlyphDef|altGlyphItem|animate|animateColor|animateMotion|animateTransform|circle|clipPath|color-profile|cursor|defs|desc|discard|ellipse|feBlend|feColorMatrix|feComponentTransfer|feComposite|feConvolveMatrix|feDiffuseLighting|feDisplacementMap|feDistantLight|feDropShadow|feFlood|feFuncA|feFuncB|feFuncG|feFuncR|feGaussianBlur|feImage|feMerge|feMergeNode|feMorphology|feOffset|fePointLight|feSpecularLighting|feSpotLight|feTile|feTurbulence|filter|font|font-face|font-face-format|font-face-name|font-face-src|font-face-uri|foreignObject|g|glyph|glyphRef|hatch|hatchpath|hkern|image|line|linearGradient|marker|mask|mesh|meshgradient|meshpatch|meshrow|metadata|missing-glyph|mpath|path|pattern|polygon|polyline|radialGradient|rect|set|solidcolor|stop|switch|symbol|text|textPath|tref|tspan|unknown|use|view|vkern)$/;\nfunction validateElement(validator, node, refs, refCallees, stack, elementStack, isComponent) {\n    if (isComponent) {\n        validator.used.components.add(node.name);\n    }\n    if (!isComponent && /^[A-Z]/.test(node.name[0])) {\n        // TODO upgrade to validator.error in v2\n        validator.warn(node, {\n            code: `missing-component`,\n            message: `${node.name} component is not defined`\n        });\n    }\n    if (elementStack.length === 0 && validator.namespace !== svg && svg$1.test(node.name)) {\n        validator.warn(node, {\n            code: `missing-namespace`,\n            message: `<${node.name}> is an SVG element – did you forget to add { namespace: 'svg' } ?`\n        });\n    }\n    if (node.name === 'slot') {\n        const nameAttribute = node.attributes.find((attribute) => attribute.name === 'name');\n        if (nameAttribute) {\n            if (nameAttribute.value.length !== 1 || nameAttribute.value[0].type !== 'Text') {\n                validator.error(nameAttribute, {\n                    code: `dynamic-slot-name`,\n                    message: `<slot> name cannot be dynamic`\n                });\n            }\n            const slotName = nameAttribute.value[0].data;\n            if (slotName === 'default') {\n                validator.error(nameAttribute, {\n                    code: `invalid-slot-name`,\n                    message: `default is a reserved word — it cannot be used as a slot name`\n                });\n            }\n            // TODO should duplicate slots be disallowed? Feels like it's more likely to be a\n            // bug than anything. Perhaps it should be a warning\n            // if (validator.slots.has(slotName)) {\n            // \tvalidator.error(`duplicate '${slotName}' <slot> element`, nameAttribute.start);\n            // }\n            // validator.slots.add(slotName);\n        }\n        else {\n            // if (validator.slots.has('default')) {\n            // \tvalidator.error(`duplicate default <slot> element`, node.start);\n            // }\n            // validator.slots.add('default');\n        }\n    }\n    if (node.name === 'title') {\n        if (node.attributes.length > 0) {\n            validator.error(node.attributes[0], {\n                code: `illegal-attribute`,\n                message: `<title> cannot have attributes`\n            });\n        }\n        node.children.forEach(child => {\n            if (child.type !== 'Text' && child.type !== 'MustacheTag') {\n                validator.error(child, {\n                    code: 'illegal-structure',\n                    message: `<title> can only contain text and {{tags}}`\n                });\n            }\n        });\n    }\n    let hasIntro;\n    let hasOutro;\n    let hasTransition;\n    node.attributes.forEach((attribute) => {\n        if (attribute.type === 'Ref') {\n            if (!refs.has(attribute.name))\n                refs.set(attribute.name, []);\n            refs.get(attribute.name).push(node);\n        }\n        if (!isComponent && attribute.type === 'Binding') {\n            const { name } = attribute;\n            if (name === 'value') {\n                if (node.name !== 'input' &&\n                    node.name !== 'textarea' &&\n                    node.name !== 'select') {\n                    validator.error(attribute, {\n                        code: `invalid-binding`,\n                        message: `'value' is not a valid binding on <${node.name}> elements`\n                    });\n                }\n                if (node.name === 'select') {\n                    const attribute = node.attributes.find((attribute) => attribute.name === 'multiple');\n                    if (attribute && isDynamic(attribute)) {\n                        validator.error(attribute, {\n                            code: `dynamic-multiple-attribute`,\n                            message: `'multiple' attribute cannot be dynamic if select uses two-way binding`\n                        });\n                    }\n                }\n                else {\n                    checkTypeAttribute(validator, node);\n                }\n            }\n            else if (name === 'checked' || name === 'indeterminate') {\n                if (node.name !== 'input') {\n                    validator.error(attribute, {\n                        code: `invalid-binding`,\n                        message: `'${name}' is not a valid binding on <${node.name}> elements`\n                    });\n                }\n                if (checkTypeAttribute(validator, node) !== 'checkbox') {\n                    validator.error(attribute, {\n                        code: `invalid-binding`,\n                        message: `'${name}' binding can only be used with <input type=\"checkbox\">`\n                    });\n                }\n            }\n            else if (name === 'group') {\n                if (node.name !== 'input') {\n                    validator.error(attribute, {\n                        code: `invalid-binding`,\n                        message: `'group' is not a valid binding on <${node.name}> elements`\n                    });\n                }\n                const type = checkTypeAttribute(validator, node);\n                if (type !== 'checkbox' && type !== 'radio') {\n                    validator.error(attribute, {\n                        code: `invalid-binding`,\n                        message: `'checked' binding can only be used with <input type=\"checkbox\"> or <input type=\"radio\">`\n                    });\n                }\n            }\n            else if (name === 'currentTime' ||\n                name === 'duration' ||\n                name === 'paused' ||\n                name === 'buffered' ||\n                name === 'seekable' ||\n                name === 'played' ||\n                name === 'volume') {\n                if (node.name !== 'audio' && node.name !== 'video') {\n                    validator.error(attribute, {\n                        code: `invalid-binding`,\n                        message: `'${name}' binding can only be used with <audio> or <video>`\n                    });\n                }\n            }\n            else {\n                validator.error(attribute, {\n                    code: `invalid-binding`,\n                    message: `'${attribute.name}' is not a valid binding`\n                });\n            }\n        }\n        else if (attribute.type === 'EventHandler') {\n            validator.used.events.add(attribute.name);\n            validateEventHandlerCallee(validator, attribute, refCallees);\n        }\n        else if (attribute.type === 'Transition') {\n            if (isComponent) {\n                validator.error(attribute, {\n                    code: `invalid-transition`,\n                    message: `Transitions can only be applied to DOM elements, not components`\n                });\n            }\n            validator.used.transitions.add(attribute.name);\n            const bidi = attribute.intro && attribute.outro;\n            if (hasTransition) {\n                if (bidi) {\n                    validator.error(attribute, {\n                        code: `duplicate-transition`,\n                        message: `An element can only have one 'transition' directive`\n                    });\n                }\n                validator.error(attribute, {\n                    code: `duplicate-transition`,\n                    message: `An element cannot have both a 'transition' directive and an '${attribute.intro ? 'in' : 'out'}' directive`\n                });\n            }\n            if ((hasIntro && attribute.intro) || (hasOutro && attribute.outro)) {\n                if (bidi) {\n                    validator.error(attribute, {\n                        code: `duplicate-transition`,\n                        message: `An element cannot have both an '${hasIntro ? 'in' : 'out'}' directive and a 'transition' directive`\n                    });\n                }\n                validator.error(attribute, {\n                    code: `duplicate-transition`,\n                    message: `An element can only have one '${hasIntro ? 'in' : 'out'}' directive`\n                });\n            }\n            if (attribute.intro)\n                hasIntro = true;\n            if (attribute.outro)\n                hasOutro = true;\n            if (bidi)\n                hasTransition = true;\n            if (!validator.transitions.has(attribute.name)) {\n                validator.error(attribute, {\n                    code: `missing-transition`,\n                    message: `Missing transition '${attribute.name}'`\n                });\n            }\n        }\n        else if (attribute.type === 'Attribute') {\n            if (attribute.name === 'value' && node.name === 'textarea') {\n                if (node.children.length) {\n                    validator.error(attribute, {\n                        code: `textarea-duplicate-value`,\n                        message: `A <textarea> can have either a value attribute or (equivalently) child content, but not both`\n                    });\n                }\n            }\n            if (attribute.name === 'slot' && !isComponent) {\n                checkSlotAttribute(validator, node, attribute, stack);\n            }\n        }\n        else if (attribute.type === 'Action') {\n            if (isComponent) {\n                validator.error(attribute, {\n                    code: `invalid-action`,\n                    message: `Actions can only be applied to DOM elements, not components`\n                });\n            }\n            validator.used.actions.add(attribute.name);\n            if (!validator.actions.has(attribute.name)) {\n                validator.error(attribute, {\n                    code: `missing-action`,\n                    message: `Missing action '${attribute.name}'`\n                });\n            }\n        }\n    });\n}\nfunction checkTypeAttribute(validator, node) {\n    const attribute = node.attributes.find((attribute) => attribute.name === 'type');\n    if (!attribute)\n        return null;\n    if (attribute.value === true) {\n        validator.error(attribute, {\n            code: `missing-type`,\n            message: `'type' attribute must be specified`\n        });\n    }\n    if (isDynamic(attribute)) {\n        validator.error(attribute, {\n            code: `invalid-type`,\n            message: `'type' attribute cannot be dynamic if input uses two-way binding`\n        });\n    }\n    return attribute.value[0].data;\n}\nfunction checkSlotAttribute(validator, node, attribute, stack) {\n    if (isDynamic(attribute)) {\n        validator.error(attribute, {\n            code: `invalid-slot-attribute`,\n            message: `slot attribute cannot have a dynamic value`\n        });\n    }\n    let i = stack.length;\n    while (i--) {\n        const parent = stack[i];\n        if (parent.type === 'Element') {\n            // if we're inside a component or a custom element, gravy\n            if (parent.name === ':Self' || parent.name === ':Component' || parent.name === 'svelte:self' || parent.name === 'svelte:component' || validator.components.has(parent.name))\n                return;\n            if (/-/.test(parent.name))\n                return;\n        }\n        if (parent.type === 'IfBlock' || parent.type === 'EachBlock') {\n            const message = `Cannot place slotted elements inside an ${parent.type === 'IfBlock' ? 'if' : 'each'}-block`;\n            validator.error(attribute, {\n                code: `invalid-slotted-content`,\n                message\n            });\n        }\n    }\n    validator.error(attribute, {\n        code: `invalid-slotted-content`,\n        message: `Element with a slot='...' attribute must be a descendant of a component or custom element`\n    });\n}\nfunction isDynamic(attribute) {\n    if (attribute.value === true)\n        return false;\n    return attribute.value.length > 1 || attribute.value[0].type !== 'Text';\n}\n\nconst validBindings = [\n    'innerWidth',\n    'innerHeight',\n    'outerWidth',\n    'outerHeight',\n    'scrollX',\n    'scrollY',\n    'online'\n];\nfunction validateWindow(validator, node, refs, refCallees) {\n    node.attributes.forEach((attribute) => {\n        if (attribute.type === 'Binding') {\n            if (attribute.value.type !== 'Identifier') {\n                const { parts } = flatten(attribute.value);\n                validator.error(attribute.value, {\n                    code: `invalid-binding`,\n                    message: `Bindings on <:Window/> must be to top-level properties, e.g. '${parts[parts.length - 1]}' rather than '${parts.join('.')}'`\n                });\n            }\n            if (!~validBindings.indexOf(attribute.name)) {\n                const match = attribute.name === 'width'\n                    ? 'innerWidth'\n                    : attribute.name === 'height'\n                        ? 'innerHeight'\n                        : fuzzymatch(attribute.name, validBindings);\n                const message = `'${attribute.name}' is not a valid binding on <:Window>`;\n                if (match) {\n                    validator.error(attribute, {\n                        code: `invalid-binding`,\n                        message: `${message} (did you mean '${match}'?)`\n                    });\n                }\n                else {\n                    validator.error(attribute, {\n                        code: `invalid-binding`,\n                        message: `${message} — valid bindings are ${list$1(validBindings)}`\n                    });\n                }\n            }\n        }\n        else if (attribute.type === 'EventHandler') {\n            validator.used.events.add(attribute.name);\n            validateEventHandlerCallee(validator, attribute, refCallees);\n        }\n    });\n}\n\nfunction validateHead(validator, node, refs, refCallees) {\n    if (node.attributes.length) {\n        validator.error(node.attributes[0], {\n            code: `invalid-attribute`,\n            message: `<:Head> should not have any attributes or directives`\n        });\n    }\n    // TODO ensure only valid elements are included here\n    node.children.forEach(node => {\n        if (node.type !== 'Element')\n            return; // TODO handle {{#if}} and friends?\n        validateElement(validator, node, refs, refCallees, [], [], false);\n    });\n}\n\nfunction getStaticAttributeValue(node, name) {\n    const attribute = node.attributes.find((attr) => attr.name.toLowerCase() === name);\n    if (!attribute)\n        return null;\n    if (attribute.value === true)\n        return true;\n    if (attribute.value.length === 0)\n        return '';\n    if (attribute.value.length === 1 && attribute.value[0].type === 'Text') {\n        return attribute.value[0].data;\n    }\n    return null;\n}\n\nconst ariaAttributes = 'activedescendant atomic autocomplete busy checked controls current describedby disabled dropeffect expanded flowto grabbed haspopup hidden invalid label labelledby level live multiline multiselectable orientation owns posinset pressed readonly relevant required selected setsize sort valuemax valuemin valuenow valuetext'.split(' ');\nconst ariaAttributeSet = new Set(ariaAttributes);\nconst ariaRoles = 'alert alertdialog application article banner button checkbox columnheader combobox command complementary composite contentinfo definition dialog directory document feed form grid gridcell group heading img input landmark link list listbox listitem log main marquee math menu menubar menuitem menuitemcheckbox menuitemradio navigation note option presentation progressbar radio radiogroup range region roletype row rowgroup rowheader scrollbar search section sectionhead select separator slider spinbutton status structure tab tablist tabpanel textbox timer toolbar tooltip tree treegrid treeitem widget window'.split(' ');\nconst ariaRoleSet = new Set(ariaRoles);\nconst invisibleElements = new Set(['meta', 'html', 'script', 'style']);\nfunction a11y(validator, node, elementStack) {\n    if (node.type === 'Text') {\n        // accessible-emoji\n        return;\n    }\n    if (node.type !== 'Element')\n        return;\n    const attributeMap = new Map();\n    node.attributes.forEach((attribute) => {\n        if (attribute.type === 'Spread')\n            return;\n        const name = attribute.name.toLowerCase();\n        // aria-props\n        if (name.startsWith('aria-')) {\n            if (invisibleElements.has(node.name)) {\n                // aria-unsupported-elements\n                validator.warn(attribute, {\n                    code: `a11y-aria-attributes`,\n                    message: `A11y: <${node.name}> should not have aria-* attributes`\n                });\n            }\n            const type = name.slice(5);\n            if (!ariaAttributeSet.has(type)) {\n                const match = fuzzymatch(type, ariaAttributes);\n                let message = `A11y: Unknown aria attribute 'aria-${type}'`;\n                if (match)\n                    message += ` (did you mean '${match}'?)`;\n                validator.warn(attribute, {\n                    code: `a11y-unknown-aria-attribute`,\n                    message\n                });\n            }\n        }\n        // aria-role\n        if (name === 'role') {\n            if (invisibleElements.has(node.name)) {\n                // aria-unsupported-elements\n                validator.warn(attribute, {\n                    code: `a11y-misplaced-role`,\n                    message: `A11y: <${node.name}> should not have role attribute`\n                });\n            }\n            const value = getStaticAttributeValue(node, 'role');\n            if (value && !ariaRoleSet.has(value)) {\n                const match = fuzzymatch(value, ariaRoles);\n                let message = `A11y: Unknown role '${value}'`;\n                if (match)\n                    message += ` (did you mean '${match}'?)`;\n                validator.warn(attribute, {\n                    code: `a11y-unknown-role`,\n                    message\n                });\n            }\n        }\n        // no-access-key\n        if (name === 'accesskey') {\n            validator.warn(attribute, {\n                code: `a11y-accesskey`,\n                message: `A11y: Avoid using accesskey`\n            });\n        }\n        // no-autofocus\n        if (name === 'autofocus') {\n            validator.warn(attribute, {\n                code: `a11y-autofocus`,\n                message: `A11y: Avoid using autofocus`\n            });\n        }\n        // scope\n        if (name === 'scope' && node.name !== 'th') {\n            validator.warn(attribute, {\n                code: `a11y-misplaced-scope`,\n                message: `A11y: The scope attribute should only be used with <th> elements`\n            });\n        }\n        // tabindex-no-positive\n        if (name === 'tabindex') {\n            const value = getStaticAttributeValue(node, 'tabindex');\n            if (!isNaN(value) && +value > 0) {\n                validator.warn(attribute, {\n                    code: `a11y-positive-tabindex`,\n                    message: `A11y: avoid tabindex values above zero`\n                });\n            }\n        }\n        attributeMap.set(attribute.name, attribute);\n    });\n    function shouldHaveAttribute(attributes, name = node.name) {\n        if (attributes.length === 0 || !attributes.some((name) => attributeMap.has(name))) {\n            const article = /^[aeiou]/.test(attributes[0]) ? 'an' : 'a';\n            const sequence = attributes.length > 1 ?\n                attributes.slice(0, -1).join(', ') + ` or ${attributes[attributes.length - 1]}` :\n                attributes[0];\n            validator.warn(node, {\n                code: `a11y-missing-attribute`,\n                message: `A11y: <${name}> element should have ${article} ${sequence} attribute`\n            });\n        }\n    }\n    function shouldHaveContent() {\n        if (node.children.length === 0) {\n            validator.warn(node, {\n                code: `a11y-missing-content`,\n                message: `A11y: <${node.name}> element should have child content`\n            });\n        }\n    }\n    function shouldHaveValidHref(attribute) {\n        const href = attributeMap.get(attribute);\n        const value = getStaticAttributeValue(node, attribute);\n        if (value === '' || value === '#') {\n            validator.warn(href, {\n                code: `a11y-invalid-attribute`,\n                message: `A11y: '${value}' is not a valid ${attribute} attribute`\n            });\n        }\n    }\n    if (node.name === 'a') {\n        if (attributeMap.has('href')) {\n            // anchor-is-valid\n            shouldHaveValidHref('href');\n        }\n        else if (attributeMap.has('xlink:href')) {\n            // anchor-in-svg-is-valid\n            shouldHaveValidHref('xlink:href');\n        }\n        else {\n            validator.warn(node, {\n                code: `a11y-missing-attribute`,\n                message: `A11y: <a> element should have an href attribute`\n            });\n        }\n        // anchor-has-content\n        shouldHaveContent();\n    }\n    if (node.name === 'img')\n        shouldHaveAttribute(['alt']);\n    if (node.name === 'area')\n        shouldHaveAttribute(['alt', 'aria-label', 'aria-labelledby']);\n    if (node.name === 'object')\n        shouldHaveAttribute(['title', 'aria-label', 'aria-labelledby']);\n    if (node.name === 'input' && getStaticAttributeValue(node, 'type') === 'image') {\n        shouldHaveAttribute(['alt', 'aria-label', 'aria-labelledby'], 'input type=\"image\"');\n    }\n    // heading-has-content\n    if (/^h[1-6]$/.test(node.name)) {\n        shouldHaveContent();\n        if (attributeMap.has('aria-hidden')) {\n            validator.warn(attributeMap.get('aria-hidden'), {\n                code: `a11y-hidden`,\n                message: `A11y: <${node.name}> element should not be hidden`\n            });\n        }\n    }\n    // iframe-has-title\n    if (node.name === 'iframe') {\n        shouldHaveAttribute(['title']);\n    }\n    // html-has-lang\n    if (node.name === 'html') {\n        shouldHaveAttribute(['lang']);\n    }\n    // no-distracting-elements\n    if (node.name === 'marquee' || node.name === 'blink') {\n        validator.warn(node, {\n            code: `a11y-distracting-elements`,\n            message: `A11y: Avoid <${node.name}> elements`\n        });\n    }\n    if (node.name === 'figcaption') {\n        const parent = elementStack[elementStack.length - 1];\n        if (parent) {\n            if (parent.name !== 'figure') {\n                validator.warn(node, {\n                    code: `a11y-structure`,\n                    message: `A11y: <figcaption> must be an immediate child of <figure>`\n                });\n            }\n            else {\n                const children = parent.children.filter(node => {\n                    if (node.type === 'Comment')\n                        return false;\n                    if (node.type === 'Text')\n                        return /\\S/.test(node.data);\n                    return true;\n                });\n                const index = children.indexOf(node);\n                if (index !== 0 && index !== children.length - 1) {\n                    validator.warn(node, {\n                        code: `a11y-structure`,\n                        message: `A11y: <figcaption> must be first or last child of <figure>`\n                    });\n                }\n            }\n        }\n    }\n}\n\nfunction isEmptyBlock(node) {\n    if (!/Block$/.test(node.type) || !node.children)\n        return false;\n    if (node.children.length > 1)\n        return false;\n    const child = node.children[0];\n    return !child || (child.type === 'Text' && !/\\S/.test(child.data));\n}\nfunction validateHtml(validator, html) {\n    const refs = new Map();\n    const refCallees = [];\n    const stack = [];\n    const elementStack = [];\n    function visit(node) {\n        if (node.type === 'Window') {\n            validateWindow(validator, node, refs, refCallees);\n        }\n        else if (node.type === 'Head') {\n            validateHead(validator, node, refs, refCallees);\n        }\n        else if (node.type === 'Element') {\n            const isComponent = node.name === ':Self' ||\n                node.name === ':Component' ||\n                node.name === 'svelte:self' ||\n                node.name === 'svelte:component' ||\n                validator.components.has(node.name);\n            validateElement(validator, node, refs, refCallees, stack, elementStack, isComponent);\n            if (!isComponent) {\n                a11y(validator, node, elementStack);\n            }\n        }\n        else if (node.type === 'EachBlock') {\n            if (validator.helpers.has(node.context)) {\n                let c = node.expression.end;\n                // find start of context\n                while (/\\s/.test(validator.source[c]))\n                    c += 1;\n                c += 2;\n                while (/\\s/.test(validator.source[c]))\n                    c += 1;\n                validator.warn({ start: c, end: c + node.context.length }, {\n                    code: `each-context-clash`,\n                    message: `Context clashes with a helper. Rename one or the other to eliminate any ambiguity`\n                });\n            }\n        }\n        if (validator.options.dev && isEmptyBlock(node)) {\n            validator.warn(node, {\n                code: `empty-block`,\n                message: 'Empty block'\n            });\n        }\n        if (node.children) {\n            if (node.type === 'Element')\n                elementStack.push(node);\n            stack.push(node);\n            node.children.forEach(visit);\n            stack.pop();\n            if (node.type === 'Element')\n                elementStack.pop();\n        }\n        if (node.else) {\n            visit(node.else);\n        }\n        if (node.type === 'AwaitBlock') {\n            visit(node.pending);\n            visit(node.then);\n            visit(node.catch);\n        }\n    }\n    html.children.forEach(visit);\n    refCallees.forEach(callee => {\n        const { parts } = flatten(callee);\n        const ref = parts[1];\n        if (refs.has(ref)) {\n            // TODO check method is valid, e.g. `audio.stop()` should be `audio.pause()`\n        }\n        else {\n            const match = fuzzymatch(ref, Array.from(refs.keys()));\n            let message = `'refs.${ref}' does not exist`;\n            if (match)\n                message += ` (did you mean 'refs.${match}'?)`;\n            validator.error(callee, {\n                code: `missing-ref`,\n                message\n            });\n        }\n    });\n}\n\nclass Validator {\n    constructor(parsed, source, options) {\n        this.source = source;\n        this.filename = options.filename;\n        this.onwarn = options.onwarn;\n        this.options = options;\n        this.v2 = options.parser === 'v2';\n        this.namespace = null;\n        this.defaultExport = null;\n        this.properties = new Map();\n        this.components = new Map();\n        this.methods = new Map();\n        this.helpers = new Map();\n        this.transitions = new Map();\n        this.actions = new Map();\n        this.slots = new Set();\n        this.used = {\n            components: new Set(),\n            helpers: new Set(),\n            events: new Set(),\n            transitions: new Set(),\n            actions: new Set(),\n        };\n    }\n    error(pos, { code, message }) {\n        error$1(message, {\n            name: 'ValidationError',\n            code,\n            source: this.source,\n            start: pos.start,\n            end: pos.end,\n            filename: this.filename\n        });\n    }\n    warn(pos, { code, message }) {\n        if (!this.locator)\n            this.locator = getLocator(this.source);\n        const start = this.locator(pos.start);\n        const end = this.locator(pos.end);\n        const frame = getCodeFrame(this.source, start.line, start.column);\n        this.onwarn({\n            code,\n            message,\n            frame,\n            loc: { line: start.line + 1, column: start.column },\n            end: { line: end.line + 1, column: end.column },\n            pos: pos.start,\n            filename: this.filename,\n            toString: () => `${message} (${start.line + 1}:${start.column})\\n${frame}`,\n        });\n    }\n}\nfunction validate(parsed, source, stylesheet, options) {\n    const { onwarn, onerror, name, filename, store, dev, parser } = options;\n    try {\n        if (name && !/^[a-zA-Z_$][a-zA-Z_$0-9]*$/.test(name)) {\n            const error = new Error(`options.name must be a valid identifier (got '${name}')`);\n            throw error;\n        }\n        if (name && /^[a-z]/.test(name)) {\n            const message = `options.name should be capitalised`;\n            onwarn({\n                code: `options-lowercase-name`,\n                message,\n                filename,\n                toString: () => message,\n            });\n        }\n        const validator = new Validator(parsed, source, {\n            onwarn,\n            name,\n            filename,\n            store,\n            dev,\n            parser\n        });\n        if (parsed.js) {\n            validateJs(validator, parsed.js);\n        }\n        if (parsed.css) {\n            stylesheet.validate(validator);\n        }\n        if (parsed.html) {\n            validateHtml(validator, parsed.html);\n        }\n        // need to do a second pass of the JS, now that we've analysed the markup\n        if (parsed.js && validator.defaultExport) {\n            const categories = {\n                components: 'component',\n                // TODO helpers require a bit more work — need to analyse all expressions\n                // helpers: 'helper',\n                events: 'event definition',\n                transitions: 'transition',\n                actions: 'actions',\n            };\n            Object.keys(categories).forEach(category => {\n                const definitions = validator.defaultExport.declaration.properties.find(prop => prop.key.name === category);\n                if (definitions) {\n                    definitions.value.properties.forEach(prop => {\n                        const { name } = prop.key;\n                        if (!validator.used[category].has(name)) {\n                            validator.warn(prop, {\n                                code: `unused-${category.slice(0, -1)}`,\n                                message: `The '${name}' ${categories[category]} is unused`\n                            });\n                        }\n                    });\n                }\n            });\n        }\n    }\n    catch (err) {\n        if (onerror) {\n            onerror(err);\n        }\n        else {\n            throw err;\n        }\n    }\n}\n\nvar integerToChar = {};\n\n'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='.split( '' ).forEach( function ( char, i ) {\n\tintegerToChar[ i ] = char;\n});\n\nfunction encode ( value ) {\n\tvar result;\n\n\tif ( typeof value === 'number' ) {\n\t\tresult = encodeInteger( value );\n\t} else {\n\t\tresult = '';\n\t\tfor ( var i = 0; i < value.length; i += 1 ) {\n\t\t\tresult += encodeInteger( value[i] );\n\t\t}\n\t}\n\n\treturn result;\n}\n\nfunction encodeInteger ( num ) {\n\tvar result = '';\n\n\tif ( num < 0 ) {\n\t\tnum = ( -num << 1 ) | 1;\n\t} else {\n\t\tnum <<= 1;\n\t}\n\n\tdo {\n\t\tvar clamped = num & 31;\n\t\tnum >>= 5;\n\n\t\tif ( num > 0 ) {\n\t\t\tclamped |= 32;\n\t\t}\n\n\t\tresult += integerToChar[ clamped ];\n\t} while ( num > 0 );\n\n\treturn result;\n}\n\nfunction Chunk ( start, end, content ) {\n\tthis.start = start;\n\tthis.end = end;\n\tthis.original = content;\n\n\tthis.intro = '';\n\tthis.outro = '';\n\n\tthis.content = content;\n\tthis.storeName = false;\n\tthis.edited = false;\n\n\t// we make these non-enumerable, for sanity while debugging\n\tObject.defineProperties( this, {\n\t\tprevious: { writable: true, value: null },\n\t\tnext: { writable: true, value: null }\n\t});\n}\n\nChunk.prototype = {\n\tappendLeft: function appendLeft ( content ) {\n\t\tthis.outro += content;\n\t},\n\n\tappendRight: function appendRight ( content ) {\n\t\tthis.intro = this.intro + content;\n\t},\n\n\tclone: function clone () {\n\t\tvar chunk = new Chunk( this.start, this.end, this.original );\n\n\t\tchunk.intro = this.intro;\n\t\tchunk.outro = this.outro;\n\t\tchunk.content = this.content;\n\t\tchunk.storeName = this.storeName;\n\t\tchunk.edited = this.edited;\n\n\t\treturn chunk;\n\t},\n\n\tcontains: function contains ( index ) {\n\t\treturn this.start < index && index < this.end;\n\t},\n\n\teachNext: function eachNext ( fn ) {\n\t\tvar chunk = this;\n\t\twhile ( chunk ) {\n\t\t\tfn( chunk );\n\t\t\tchunk = chunk.next;\n\t\t}\n\t},\n\n\teachPrevious: function eachPrevious ( fn ) {\n\t\tvar chunk = this;\n\t\twhile ( chunk ) {\n\t\t\tfn( chunk );\n\t\t\tchunk = chunk.previous;\n\t\t}\n\t},\n\n\tedit: function edit ( content, storeName, contentOnly ) {\n\t\tthis.content = content;\n\t\tif ( !contentOnly ) {\n\t\t\tthis.intro = '';\n\t\t\tthis.outro = '';\n\t\t}\n\t\tthis.storeName = storeName;\n\n\t\tthis.edited = true;\n\n\t\treturn this;\n\t},\n\n\tprependLeft: function prependLeft ( content ) {\n\t\tthis.outro = content + this.outro;\n\t},\n\n\tprependRight: function prependRight ( content ) {\n\t\tthis.intro = content + this.intro;\n\t},\n\n\tsplit: function split ( index ) {\n\t\tvar sliceIndex = index - this.start;\n\n\t\tvar originalBefore = this.original.slice( 0, sliceIndex );\n\t\tvar originalAfter = this.original.slice( sliceIndex );\n\n\t\tthis.original = originalBefore;\n\n\t\tvar newChunk = new Chunk( index, this.end, originalAfter );\n\t\tnewChunk.outro = this.outro;\n\t\tthis.outro = '';\n\n\t\tthis.end = index;\n\n\t\tif ( this.edited ) {\n\t\t\t// TODO is this block necessary?...\n\t\t\tnewChunk.edit( '', false );\n\t\t\tthis.content = '';\n\t\t} else {\n\t\t\tthis.content = originalBefore;\n\t\t}\n\n\t\tnewChunk.next = this.next;\n\t\tif ( newChunk.next ) { newChunk.next.previous = newChunk; }\n\t\tnewChunk.previous = this;\n\t\tthis.next = newChunk;\n\n\t\treturn newChunk;\n\t},\n\n\ttoString: function toString () {\n\t\treturn this.intro + this.content + this.outro;\n\t},\n\n\ttrimEnd: function trimEnd ( rx ) {\n\t\tthis.outro = this.outro.replace( rx, '' );\n\t\tif ( this.outro.length ) { return true; }\n\n\t\tvar trimmed = this.content.replace( rx, '' );\n\n\t\tif ( trimmed.length ) {\n\t\t\tif ( trimmed !== this.content ) {\n\t\t\t\tthis.split( this.start + trimmed.length ).edit( '', false );\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthis.edit( '', false );\n\n\t\t\tthis.intro = this.intro.replace( rx, '' );\n\t\t\tif ( this.intro.length ) { return true; }\n\t\t}\n\t},\n\n\ttrimStart: function trimStart ( rx ) {\n\t\tthis.intro = this.intro.replace( rx, '' );\n\t\tif ( this.intro.length ) { return true; }\n\n\t\tvar trimmed = this.content.replace( rx, '' );\n\n\t\tif ( trimmed.length ) {\n\t\t\tif ( trimmed !== this.content ) {\n\t\t\t\tthis.split( this.end - trimmed.length );\n\t\t\t\tthis.edit( '', false );\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthis.edit( '', false );\n\n\t\t\tthis.outro = this.outro.replace( rx, '' );\n\t\t\tif ( this.outro.length ) { return true; }\n\t\t}\n\t}\n};\n\nvar _btoa;\n\nif ( typeof window !== 'undefined' && typeof window.btoa === 'function' ) {\n\t_btoa = window.btoa;\n} else if ( typeof Buffer === 'function' ) {\n\t_btoa = function (str) { return new Buffer( str ).toString( 'base64' ); };\n} else {\n\t_btoa = function () {\n\t\tthrow new Error( 'Unsupported environment: `window.btoa` or `Buffer` should be supported.' );\n\t};\n}\n\nvar btoa = _btoa;\n\nfunction SourceMap ( properties ) {\n\tthis.version = 3;\n\n\tthis.file           = properties.file;\n\tthis.sources        = properties.sources;\n\tthis.sourcesContent = properties.sourcesContent;\n\tthis.names          = properties.names;\n\tthis.mappings       = properties.mappings;\n}\n\nSourceMap.prototype = {\n\ttoString: function toString () {\n\t\treturn JSON.stringify( this );\n\t},\n\n\ttoUrl: function toUrl () {\n\t\treturn 'data:application/json;charset=utf-8;base64,' + btoa( this.toString() );\n\t}\n};\n\nfunction guessIndent ( code ) {\n\tvar lines = code.split( '\\n' );\n\n\tvar tabbed = lines.filter( function (line) { return /^\\t+/.test( line ); } );\n\tvar spaced = lines.filter( function (line) { return /^ {2,}/.test( line ); } );\n\n\tif ( tabbed.length === 0 && spaced.length === 0 ) {\n\t\treturn null;\n\t}\n\n\t// More lines tabbed than spaced? Assume tabs, and\n\t// default to tabs in the case of a tie (or nothing\n\t// to go on)\n\tif ( tabbed.length >= spaced.length ) {\n\t\treturn '\\t';\n\t}\n\n\t// Otherwise, we need to guess the multiple\n\tvar min = spaced.reduce( function ( previous, current ) {\n\t\tvar numSpaces = /^ +/.exec( current )[0].length;\n\t\treturn Math.min( numSpaces, previous );\n\t}, Infinity );\n\n\treturn new Array( min + 1 ).join( ' ' );\n}\n\nfunction getRelativePath ( from, to ) {\n\tvar fromParts = from.split( /[\\/\\\\]/ );\n\tvar toParts = to.split( /[\\/\\\\]/ );\n\n\tfromParts.pop(); // get dirname\n\n\twhile ( fromParts[0] === toParts[0] ) {\n\t\tfromParts.shift();\n\t\ttoParts.shift();\n\t}\n\n\tif ( fromParts.length ) {\n\t\tvar i = fromParts.length;\n\t\twhile ( i-- ) { fromParts[i] = '..'; }\n\t}\n\n\treturn fromParts.concat( toParts ).join( '/' );\n}\n\nvar toString$1$1 = Object.prototype.toString;\n\nfunction isObject ( thing ) {\n\treturn toString$1$1.call( thing ) === '[object Object]';\n}\n\nfunction getLocator$1 ( source ) {\n\tvar originalLines = source.split( '\\n' );\n\n\tvar start = 0;\n\tvar lineRanges = originalLines.map( function ( line, i ) {\n\t\tvar end = start + line.length + 1;\n\t\tvar range = { start: start, end: end, line: i };\n\n\t\tstart = end;\n\t\treturn range;\n\t});\n\n\tvar i = 0;\n\n\tfunction rangeContains ( range, index ) {\n\t\treturn range.start <= index && index < range.end;\n\t}\n\n\tfunction getLocation ( range, index ) {\n\t\treturn { line: range.line, column: index - range.start };\n\t}\n\n\treturn function locate ( index ) {\n\t\tvar range = lineRanges[i];\n\n\t\tvar d = index >= range.end ? 1 : -1;\n\n\t\twhile ( range ) {\n\t\t\tif ( rangeContains( range, index ) ) { return getLocation( range, index ); }\n\n\t\t\ti += d;\n\t\t\trange = lineRanges[i];\n\t\t}\n\t};\n}\n\nfunction Mappings ( hires ) {\n\tvar this$1 = this;\n\n\tvar offsets = {\n\t\tgeneratedCodeColumn: 0,\n\t\tsourceIndex: 0,\n\t\tsourceCodeLine: 0,\n\t\tsourceCodeColumn: 0,\n\t\tsourceCodeName: 0\n\t};\n\n\tvar generatedCodeLine = 0;\n\tvar generatedCodeColumn = 0;\n\n\tthis.raw = [];\n\tvar rawSegments = this.raw[ generatedCodeLine ] = [];\n\n\tvar pending = null;\n\n\tthis.addEdit = function ( sourceIndex, content, original, loc, nameIndex ) {\n\t\tif ( content.length ) {\n\t\t\trawSegments.push([\n\t\t\t\tgeneratedCodeColumn,\n\t\t\t\tsourceIndex,\n\t\t\t\tloc.line,\n\t\t\t\tloc.column,\n\t\t\t\tnameIndex ]);\n\t\t} else if ( pending ) {\n\t\t\trawSegments.push( pending );\n\t\t}\n\n\t\tthis$1.advance( content );\n\t\tpending = null;\n\t};\n\n\tthis.addUneditedChunk = function ( sourceIndex, chunk, original, loc, sourcemapLocations ) {\n\t\tvar originalCharIndex = chunk.start;\n\t\tvar first = true;\n\n\t\twhile ( originalCharIndex < chunk.end ) {\n\t\t\tif ( hires || first || sourcemapLocations[ originalCharIndex ] ) {\n\t\t\t\trawSegments.push([\n\t\t\t\t\tgeneratedCodeColumn,\n\t\t\t\t\tsourceIndex,\n\t\t\t\t\tloc.line,\n\t\t\t\t\tloc.column,\n\t\t\t\t\t-1\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\tif ( original[ originalCharIndex ] === '\\n' ) {\n\t\t\t\tloc.line += 1;\n\t\t\t\tloc.column = 0;\n\t\t\t\tgeneratedCodeLine += 1;\n\t\t\t\tthis$1.raw[ generatedCodeLine ] = rawSegments = [];\n\t\t\t\tgeneratedCodeColumn = 0;\n\t\t\t} else {\n\t\t\t\tloc.column += 1;\n\t\t\t\tgeneratedCodeColumn += 1;\n\t\t\t}\n\n\t\t\toriginalCharIndex += 1;\n\t\t\tfirst = false;\n\t\t}\n\n\t\tpending = [\n\t\t\tgeneratedCodeColumn,\n\t\t\tsourceIndex,\n\t\t\tloc.line,\n\t\t\tloc.column,\n\t\t\t-1 ];\n\t};\n\n\tthis.advance = function (str) {\n\t\tif ( !str ) { return; }\n\n\t\tvar lines = str.split( '\\n' );\n\t\tvar lastLine = lines.pop();\n\n\t\tif ( lines.length ) {\n\t\t\tgeneratedCodeLine += lines.length;\n\t\t\tthis$1.raw[ generatedCodeLine ] = rawSegments = [];\n\t\t\tgeneratedCodeColumn = lastLine.length;\n\t\t} else {\n\t\t\tgeneratedCodeColumn += lastLine.length;\n\t\t}\n\t};\n\n\tthis.encode = function () {\n\t\treturn this$1.raw.map( function (segments) {\n\t\t\tvar generatedCodeColumn = 0;\n\n\t\t\treturn segments.map( function (segment) {\n\t\t\t\tvar arr = [\n\t\t\t\t\tsegment[0] - generatedCodeColumn,\n\t\t\t\t\tsegment[1] - offsets.sourceIndex,\n\t\t\t\t\tsegment[2] - offsets.sourceCodeLine,\n\t\t\t\t\tsegment[3] - offsets.sourceCodeColumn\n\t\t\t\t];\n\n\t\t\t\tgeneratedCodeColumn = segment[0];\n\t\t\t\toffsets.sourceIndex = segment[1];\n\t\t\t\toffsets.sourceCodeLine = segment[2];\n\t\t\t\toffsets.sourceCodeColumn = segment[3];\n\n\t\t\t\tif ( ~segment[4] ) {\n\t\t\t\t\tarr.push( segment[4] - offsets.sourceCodeName );\n\t\t\t\t\toffsets.sourceCodeName = segment[4];\n\t\t\t\t}\n\n\t\t\t\treturn encode( arr );\n\t\t\t}).join( ',' );\n\t\t}).join( ';' );\n\t};\n}\n\nvar warned = {\n\tinsertLeft: false,\n\tinsertRight: false,\n\tstoreName: false\n};\n\nfunction MagicString$1 ( string, options ) {\n\tif ( options === void 0 ) options = {};\n\n\tvar chunk = new Chunk( 0, string.length, string );\n\n\tObject.defineProperties( this, {\n\t\toriginal:              { writable: true, value: string },\n\t\toutro:                 { writable: true, value: '' },\n\t\tintro:                 { writable: true, value: '' },\n\t\tfirstChunk:            { writable: true, value: chunk },\n\t\tlastChunk:             { writable: true, value: chunk },\n\t\tlastSearchedChunk:     { writable: true, value: chunk },\n\t\tbyStart:               { writable: true, value: {} },\n\t\tbyEnd:                 { writable: true, value: {} },\n\t\tfilename:              { writable: true, value: options.filename },\n\t\tindentExclusionRanges: { writable: true, value: options.indentExclusionRanges },\n\t\tsourcemapLocations:    { writable: true, value: {} },\n\t\tstoredNames:           { writable: true, value: {} },\n\t\tindentStr:             { writable: true, value: guessIndent( string ) }\n\t});\n\n\tthis.byStart[ 0 ] = chunk;\n\tthis.byEnd[ string.length ] = chunk;\n}\n\nMagicString$1.prototype = {\n\taddSourcemapLocation: function addSourcemapLocation ( char ) {\n\t\tthis.sourcemapLocations[ char ] = true;\n\t},\n\n\tappend: function append ( content ) {\n\t\tif ( typeof content !== 'string' ) { throw new TypeError( 'outro content must be a string' ); }\n\n\t\tthis.outro += content;\n\t\treturn this;\n\t},\n\n\tappendLeft: function appendLeft ( index, content ) {\n\t\tif ( typeof content !== 'string' ) { throw new TypeError( 'inserted content must be a string' ); }\n\n\t\tthis._split( index );\n\n\t\tvar chunk = this.byEnd[ index ];\n\n\t\tif ( chunk ) {\n\t\t\tchunk.appendLeft( content );\n\t\t} else {\n\t\t\tthis.intro += content;\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tappendRight: function appendRight ( index, content ) {\n\t\tif ( typeof content !== 'string' ) { throw new TypeError( 'inserted content must be a string' ); }\n\n\t\tthis._split( index );\n\n\t\tvar chunk = this.byStart[ index ];\n\n\t\tif ( chunk ) {\n\t\t\tchunk.appendRight( content );\n\t\t} else {\n\t\t\tthis.outro += content;\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function clone () {\n\t\tvar cloned = new MagicString$1( this.original, { filename: this.filename });\n\n\t\tvar originalChunk = this.firstChunk;\n\t\tvar clonedChunk = cloned.firstChunk = cloned.lastSearchedChunk = originalChunk.clone();\n\n\t\twhile ( originalChunk ) {\n\t\t\tcloned.byStart[ clonedChunk.start ] = clonedChunk;\n\t\t\tcloned.byEnd[ clonedChunk.end ] = clonedChunk;\n\n\t\t\tvar nextOriginalChunk = originalChunk.next;\n\t\t\tvar nextClonedChunk = nextOriginalChunk && nextOriginalChunk.clone();\n\n\t\t\tif ( nextClonedChunk ) {\n\t\t\t\tclonedChunk.next = nextClonedChunk;\n\t\t\t\tnextClonedChunk.previous = clonedChunk;\n\n\t\t\t\tclonedChunk = nextClonedChunk;\n\t\t\t}\n\n\t\t\toriginalChunk = nextOriginalChunk;\n\t\t}\n\n\t\tcloned.lastChunk = clonedChunk;\n\n\t\tif ( this.indentExclusionRanges ) {\n\t\t\tcloned.indentExclusionRanges = this.indentExclusionRanges.slice();\n\t\t}\n\n\t\tObject.keys( this.sourcemapLocations ).forEach( function (loc) {\n\t\t\tcloned.sourcemapLocations[ loc ] = true;\n\t\t});\n\n\t\treturn cloned;\n\t},\n\n\tgenerateMap: function generateMap ( options ) {\n\t\tvar this$1 = this;\n\n\t\toptions = options || {};\n\n\t\tvar sourceIndex = 0;\n\t\tvar names = Object.keys( this.storedNames );\n\t\tvar mappings = new Mappings( options.hires );\n\n\t\tvar locate = getLocator$1( this.original );\n\n\t\tif ( this.intro ) {\n\t\t\tmappings.advance( this.intro );\n\t\t}\n\n\t\tthis.firstChunk.eachNext( function (chunk) {\n\t\t\tvar loc = locate( chunk.start );\n\n\t\t\tif ( chunk.intro.length ) { mappings.advance( chunk.intro ); }\n\n\t\t\tif ( chunk.edited ) {\n\t\t\t\tmappings.addEdit( sourceIndex, chunk.content, chunk.original, loc, chunk.storeName ? names.indexOf( chunk.original ) : -1 );\n\t\t\t} else {\n\t\t\t\tmappings.addUneditedChunk( sourceIndex, chunk, this$1.original, loc, this$1.sourcemapLocations );\n\t\t\t}\n\n\t\t\tif ( chunk.outro.length ) { mappings.advance( chunk.outro ); }\n\t\t});\n\n\t\tvar map = new SourceMap({\n\t\t\tfile: ( options.file ? options.file.split( /[\\/\\\\]/ ).pop() : null ),\n\t\t\tsources: [ options.source ? getRelativePath( options.file || '', options.source ) : null ],\n\t\t\tsourcesContent: options.includeContent ? [ this.original ] : [ null ],\n\t\t\tnames: names,\n\t\t\tmappings: mappings.encode()\n\t\t});\n\t\treturn map;\n\t},\n\n\tgetIndentString: function getIndentString () {\n\t\treturn this.indentStr === null ? '\\t' : this.indentStr;\n\t},\n\n\tindent: function indent ( indentStr, options ) {\n\t\tvar this$1 = this;\n\n\t\tvar pattern = /^[^\\r\\n]/gm;\n\n\t\tif ( isObject( indentStr ) ) {\n\t\t\toptions = indentStr;\n\t\t\tindentStr = undefined;\n\t\t}\n\n\t\tindentStr = indentStr !== undefined ? indentStr : ( this.indentStr || '\\t' );\n\n\t\tif ( indentStr === '' ) { return this; } // noop\n\n\t\toptions = options || {};\n\n\t\t// Process exclusion ranges\n\t\tvar isExcluded = {};\n\n\t\tif ( options.exclude ) {\n\t\t\tvar exclusions = typeof options.exclude[0] === 'number' ? [ options.exclude ] : options.exclude;\n\t\t\texclusions.forEach( function (exclusion) {\n\t\t\t\tfor ( var i = exclusion[0]; i < exclusion[1]; i += 1 ) {\n\t\t\t\t\tisExcluded[i] = true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tvar shouldIndentNextCharacter = options.indentStart !== false;\n\t\tvar replacer = function (match) {\n\t\t\tif ( shouldIndentNextCharacter ) { return (\"\" + indentStr + match); }\n\t\t\tshouldIndentNextCharacter = true;\n\t\t\treturn match;\n\t\t};\n\n\t\tthis.intro = this.intro.replace( pattern, replacer );\n\n\t\tvar charIndex = 0;\n\n\t\tvar chunk = this.firstChunk;\n\n\t\twhile ( chunk ) {\n\t\t\tvar end = chunk.end;\n\n\t\t\tif ( chunk.edited ) {\n\t\t\t\tif ( !isExcluded[ charIndex ] ) {\n\t\t\t\t\tchunk.content = chunk.content.replace( pattern, replacer );\n\n\t\t\t\t\tif ( chunk.content.length ) {\n\t\t\t\t\t\tshouldIndentNextCharacter = chunk.content[ chunk.content.length - 1 ] === '\\n';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcharIndex = chunk.start;\n\n\t\t\t\twhile ( charIndex < end ) {\n\t\t\t\t\tif ( !isExcluded[ charIndex ] ) {\n\t\t\t\t\t\tvar char = this$1.original[ charIndex ];\n\n\t\t\t\t\t\tif ( char === '\\n' ) {\n\t\t\t\t\t\t\tshouldIndentNextCharacter = true;\n\t\t\t\t\t\t} else if ( char !== '\\r' && shouldIndentNextCharacter ) {\n\t\t\t\t\t\t\tshouldIndentNextCharacter = false;\n\n\t\t\t\t\t\t\tif ( charIndex === chunk.start ) {\n\t\t\t\t\t\t\t\tchunk.prependRight( indentStr );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis$1._splitChunk( chunk, charIndex );\n\t\t\t\t\t\t\t\tchunk = chunk.next;\n\t\t\t\t\t\t\t\tchunk.prependRight( indentStr );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcharIndex += 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcharIndex = chunk.end;\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\tthis.outro = this.outro.replace( pattern, replacer );\n\n\t\treturn this;\n\t},\n\n\tinsert: function insert () {\n\t\tthrow new Error( 'magicString.insert(...) is deprecated. Use prependRight(...) or appendLeft(...)' );\n\t},\n\n\tinsertLeft: function insertLeft ( index, content ) {\n\t\tif ( !warned.insertLeft ) {\n\t\t\tconsole.warn( 'magicString.insertLeft(...) is deprecated. Use magicString.appendLeft(...) instead' ); // eslint-disable-line no-console\n\t\t\twarned.insertLeft = true;\n\t\t}\n\n\t\treturn this.appendLeft( index, content );\n\t},\n\n\tinsertRight: function insertRight ( index, content ) {\n\t\tif ( !warned.insertRight ) {\n\t\t\tconsole.warn( 'magicString.insertRight(...) is deprecated. Use magicString.prependRight(...) instead' ); // eslint-disable-line no-console\n\t\t\twarned.insertRight = true;\n\t\t}\n\n\t\treturn this.prependRight( index, content );\n\t},\n\n\tmove: function move ( start, end, index ) {\n\t\tif ( index >= start && index <= end ) { throw new Error( 'Cannot move a selection inside itself' ); }\n\n\t\tthis._split( start );\n\t\tthis._split( end );\n\t\tthis._split( index );\n\n\t\tvar first = this.byStart[ start ];\n\t\tvar last = this.byEnd[ end ];\n\n\t\tvar oldLeft = first.previous;\n\t\tvar oldRight = last.next;\n\n\t\tvar newRight = this.byStart[ index ];\n\t\tif ( !newRight && last === this.lastChunk ) { return this; }\n\t\tvar newLeft = newRight ? newRight.previous : this.lastChunk;\n\n\t\tif ( oldLeft ) { oldLeft.next = oldRight; }\n\t\tif ( oldRight ) { oldRight.previous = oldLeft; }\n\n\t\tif ( newLeft ) { newLeft.next = first; }\n\t\tif ( newRight ) { newRight.previous = last; }\n\n\t\tif ( !first.previous ) { this.firstChunk = last.next; }\n\t\tif ( !last.next ) {\n\t\t\tthis.lastChunk = first.previous;\n\t\t\tthis.lastChunk.next = null;\n\t\t}\n\n\t\tfirst.previous = newLeft;\n\t\tlast.next = newRight || null;\n\n\t\tif ( !newLeft ) { this.firstChunk = first; }\n\t\tif ( !newRight ) { this.lastChunk = last; }\n\n\t\treturn this;\n\t},\n\n\toverwrite: function overwrite ( start, end, content, options ) {\n\t\tvar this$1 = this;\n\n\t\tif ( typeof content !== 'string' ) { throw new TypeError( 'replacement content must be a string' ); }\n\n\t\twhile ( start < 0 ) { start += this$1.original.length; }\n\t\twhile ( end < 0 ) { end += this$1.original.length; }\n\n\t\tif ( end > this.original.length ) { throw new Error( 'end is out of bounds' ); }\n\t\tif ( start === end ) { throw new Error( 'Cannot overwrite a zero-length range – use appendLeft or prependRight instead' ); }\n\n\t\tthis._split( start );\n\t\tthis._split( end );\n\n\t\tif ( options === true ) {\n\t\t\tif ( !warned.storeName ) {\n\t\t\t\tconsole.warn( 'The final argument to magicString.overwrite(...) should be an options object. See https://github.com/rich-harris/magic-string' ); // eslint-disable-line no-console\n\t\t\t\twarned.storeName = true;\n\t\t\t}\n\n\t\t\toptions = { storeName: true };\n\t\t}\n\t\tvar storeName = options !== undefined ? options.storeName : false;\n\t\tvar contentOnly = options !== undefined ? options.contentOnly : false;\n\n\t\tif ( storeName ) {\n\t\t\tvar original = this.original.slice( start, end );\n\t\t\tthis.storedNames[ original ] = true;\n\t\t}\n\n\t\tvar first = this.byStart[ start ];\n\t\tvar last = this.byEnd[ end ];\n\n\t\tif ( first ) {\n\t\t\tif ( end > first.end && first.next !== this.byStart[ first.end ] ) {\n\t\t\t\tthrow new Error( 'Cannot overwrite across a split point' );\n\t\t\t}\n\n\t\t\tfirst.edit( content, storeName, contentOnly );\n\n\t\t\tif ( first !== last ) {\n\t\t\t\tvar chunk = first.next;\n\t\t\t\twhile ( chunk !== last ) {\n\t\t\t\t\tchunk.edit( '', false );\n\t\t\t\t\tchunk = chunk.next;\n\t\t\t\t}\n\n\t\t\t\tchunk.edit( '', false );\n\t\t\t}\n\t\t}\n\n\t\telse {\n\t\t\t// must be inserting at the end\n\t\t\tvar newChunk = new Chunk( start, end, '' ).edit( content, storeName );\n\n\t\t\t// TODO last chunk in the array may not be the last chunk, if it's moved...\n\t\t\tlast.next = newChunk;\n\t\t\tnewChunk.previous = last;\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tprepend: function prepend ( content ) {\n\t\tif ( typeof content !== 'string' ) { throw new TypeError( 'outro content must be a string' ); }\n\n\t\tthis.intro = content + this.intro;\n\t\treturn this;\n\t},\n\n\tprependLeft: function prependLeft ( index, content ) {\n\t\tif ( typeof content !== 'string' ) { throw new TypeError( 'inserted content must be a string' ); }\n\n\t\tthis._split( index );\n\n\t\tvar chunk = this.byEnd[ index ];\n\n\t\tif ( chunk ) {\n\t\t\tchunk.prependLeft( content );\n\t\t} else {\n\t\t\tthis.intro = content + this.intro;\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tprependRight: function prependRight ( index, content ) {\n\t\tif ( typeof content !== 'string' ) { throw new TypeError( 'inserted content must be a string' ); }\n\n\t\tthis._split( index );\n\n\t\tvar chunk = this.byStart[ index ];\n\n\t\tif ( chunk ) {\n\t\t\tchunk.prependRight( content );\n\t\t} else {\n\t\t\tthis.outro = content + this.outro;\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremove: function remove ( start, end ) {\n\t\tvar this$1 = this;\n\n\t\twhile ( start < 0 ) { start += this$1.original.length; }\n\t\twhile ( end < 0 ) { end += this$1.original.length; }\n\n\t\tif ( start === end ) { return this; }\n\n\t\tif ( start < 0 || end > this.original.length ) { throw new Error( 'Character is out of bounds' ); }\n\t\tif ( start > end ) { throw new Error( 'end must be greater than start' ); }\n\n\t\tthis._split( start );\n\t\tthis._split( end );\n\n\t\tvar chunk = this.byStart[ start ];\n\n\t\twhile ( chunk ) {\n\t\t\tchunk.intro = '';\n\t\t\tchunk.outro = '';\n\t\t\tchunk.edit( '' );\n\n\t\t\tchunk = end > chunk.end ? this$1.byStart[ chunk.end ] : null;\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tslice: function slice ( start, end ) {\n\t\tvar this$1 = this;\n\t\tif ( start === void 0 ) start = 0;\n\t\tif ( end === void 0 ) end = this.original.length;\n\n\t\twhile ( start < 0 ) { start += this$1.original.length; }\n\t\twhile ( end < 0 ) { end += this$1.original.length; }\n\n\t\tvar result = '';\n\n\t\t// find start chunk\n\t\tvar chunk = this.firstChunk;\n\t\twhile ( chunk && ( chunk.start > start || chunk.end <= start ) ) {\n\n\t\t\t// found end chunk before start\n\t\t\tif ( chunk.start < end && chunk.end >= end ) {\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\tif ( chunk && chunk.edited && chunk.start !== start ) { throw new Error((\"Cannot use replaced character \" + start + \" as slice start anchor.\")); }\n\n\t\tvar startChunk = chunk;\n\t\twhile ( chunk ) {\n\t\t\tif ( chunk.intro && ( startChunk !== chunk || chunk.start === start ) ) {\n\t\t\t\tresult += chunk.intro;\n\t\t\t}\n\n\t\t\tvar containsEnd = chunk.start < end && chunk.end >= end;\n\t\t\tif ( containsEnd && chunk.edited && chunk.end !== end ) { throw new Error((\"Cannot use replaced character \" + end + \" as slice end anchor.\")); }\n\n\t\t\tvar sliceStart = startChunk === chunk ? start - chunk.start : 0;\n\t\t\tvar sliceEnd = containsEnd ? chunk.content.length + end - chunk.end : chunk.content.length;\n\n\t\t\tresult += chunk.content.slice( sliceStart, sliceEnd );\n\n\t\t\tif ( chunk.outro && ( !containsEnd || chunk.end === end ) ) {\n\t\t\t\tresult += chunk.outro;\n\t\t\t}\n\n\t\t\tif ( containsEnd ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\t// TODO deprecate this? not really very useful\n\tsnip: function snip ( start, end ) {\n\t\tvar clone = this.clone();\n\t\tclone.remove( 0, start );\n\t\tclone.remove( end, clone.original.length );\n\n\t\treturn clone;\n\t},\n\n\t_split: function _split ( index ) {\n\t\tvar this$1 = this;\n\n\t\tif ( this.byStart[ index ] || this.byEnd[ index ] ) { return; }\n\n\t\tvar chunk = this.lastSearchedChunk;\n\t\tvar searchForward = index > chunk.end;\n\n\t\twhile ( true ) {\n\t\t\tif ( chunk.contains( index ) ) { return this$1._splitChunk( chunk, index ); }\n\n\t\t\tchunk = searchForward ?\n\t\t\t\tthis$1.byStart[ chunk.end ] :\n\t\t\t\tthis$1.byEnd[ chunk.start ];\n\t\t}\n\t},\n\n\t_splitChunk: function _splitChunk ( chunk, index ) {\n\t\tif ( chunk.edited && chunk.content.length ) { // zero-length edited chunks are a special case (overlapping replacements)\n\t\t\tvar loc = getLocator$1( this.original )( index );\n\t\t\tthrow new Error( (\"Cannot split a chunk that has already been edited (\" + (loc.line) + \":\" + (loc.column) + \" – \\\"\" + (chunk.original) + \"\\\")\") );\n\t\t}\n\n\t\tvar newChunk = chunk.split( index );\n\n\t\tthis.byEnd[ index ] = chunk;\n\t\tthis.byStart[ index ] = newChunk;\n\t\tthis.byEnd[ newChunk.end ] = newChunk;\n\n\t\tif ( chunk === this.lastChunk ) { this.lastChunk = newChunk; }\n\n\t\tthis.lastSearchedChunk = chunk;\n\t\treturn true;\n\t},\n\n\ttoString: function toString () {\n\t\tvar str = this.intro;\n\n\t\tvar chunk = this.firstChunk;\n\t\twhile ( chunk ) {\n\t\t\tstr += chunk.toString();\n\t\t\tchunk = chunk.next;\n\t\t}\n\n\t\treturn str + this.outro;\n\t},\n\n\ttrimLines: function trimLines () {\n\t\treturn this.trim('[\\\\r\\\\n]');\n\t},\n\n\ttrim: function trim ( charType ) {\n\t\treturn this.trimStart( charType ).trimEnd( charType );\n\t},\n\n\ttrimEnd: function trimEnd ( charType ) {\n\t\tvar this$1 = this;\n\n\t\tvar rx = new RegExp( ( charType || '\\\\s' ) + '+$' );\n\n\t\tthis.outro = this.outro.replace( rx, '' );\n\t\tif ( this.outro.length ) { return this; }\n\n\t\tvar chunk = this.lastChunk;\n\n\t\tdo {\n\t\t\tvar end = chunk.end;\n\t\t\tvar aborted = chunk.trimEnd( rx );\n\n\t\t\t// if chunk was trimmed, we have a new lastChunk\n\t\t\tif ( chunk.end !== end ) {\n\t\t\t\tif ( this$1.lastChunk === chunk ) {\n\t\t\t\t\tthis$1.lastChunk = chunk.next;\n\t\t\t\t}\n\n\t\t\t\tthis$1.byEnd[ chunk.end ] = chunk;\n\t\t\t\tthis$1.byStart[ chunk.next.start ] = chunk.next;\n\t\t\t\tthis$1.byEnd[ chunk.next.end ] = chunk.next;\n\t\t\t}\n\n\t\t\tif ( aborted ) { return this$1; }\n\t\t\tchunk = chunk.previous;\n\t\t} while ( chunk );\n\n\t\treturn this;\n\t},\n\n\ttrimStart: function trimStart ( charType ) {\n\t\tvar this$1 = this;\n\n\t\tvar rx = new RegExp( '^' + ( charType || '\\\\s' ) + '+' );\n\n\t\tthis.intro = this.intro.replace( rx, '' );\n\t\tif ( this.intro.length ) { return this; }\n\n\t\tvar chunk = this.firstChunk;\n\n\t\tdo {\n\t\t\tvar end = chunk.end;\n\t\t\tvar aborted = chunk.trimStart( rx );\n\n\t\t\tif ( chunk.end !== end ) {\n\t\t\t\t// special case...\n\t\t\t\tif ( chunk === this$1.lastChunk ) { this$1.lastChunk = chunk.next; }\n\n\t\t\t\tthis$1.byEnd[ chunk.end ] = chunk;\n\t\t\t\tthis$1.byStart[ chunk.next.start ] = chunk.next;\n\t\t\t\tthis$1.byEnd[ chunk.next.end ] = chunk.next;\n\t\t\t}\n\n\t\t\tif ( aborted ) { return this$1; }\n\t\t\tchunk = chunk.next;\n\t\t} while ( chunk );\n\n\t\treturn this;\n\t}\n};\n\nvar hasOwnProp = Object.prototype.hasOwnProperty;\n\nfunction Bundle ( options ) {\n\tif ( options === void 0 ) options = {};\n\n\tthis.intro = options.intro || '';\n\tthis.separator = options.separator !== undefined ? options.separator : '\\n';\n\n\tthis.sources = [];\n\n\tthis.uniqueSources = [];\n\tthis.uniqueSourceIndexByFilename = {};\n}\n\nBundle.prototype = {\n\taddSource: function addSource ( source ) {\n\t\tif ( source instanceof MagicString$1 ) {\n\t\t\treturn this.addSource({\n\t\t\t\tcontent: source,\n\t\t\t\tfilename: source.filename,\n\t\t\t\tseparator: this.separator\n\t\t\t});\n\t\t}\n\n\t\tif ( !isObject( source ) || !source.content ) {\n\t\t\tthrow new Error( 'bundle.addSource() takes an object with a `content` property, which should be an instance of MagicString, and an optional `filename`' );\n\t\t}\n\n\t\t[ 'filename', 'indentExclusionRanges', 'separator' ].forEach( function (option) {\n\t\t\tif ( !hasOwnProp.call( source, option ) ) { source[ option ] = source.content[ option ]; }\n\t\t});\n\n\t\tif ( source.separator === undefined ) { // TODO there's a bunch of this sort of thing, needs cleaning up\n\t\t\tsource.separator = this.separator;\n\t\t}\n\n\t\tif ( source.filename ) {\n\t\t\tif ( !hasOwnProp.call( this.uniqueSourceIndexByFilename, source.filename ) ) {\n\t\t\t\tthis.uniqueSourceIndexByFilename[ source.filename ] = this.uniqueSources.length;\n\t\t\t\tthis.uniqueSources.push({ filename: source.filename, content: source.content.original });\n\t\t\t} else {\n\t\t\t\tvar uniqueSource = this.uniqueSources[ this.uniqueSourceIndexByFilename[ source.filename ] ];\n\t\t\t\tif ( source.content.original !== uniqueSource.content ) {\n\t\t\t\t\tthrow new Error( (\"Illegal source: same filename (\" + (source.filename) + \"), different contents\") );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.sources.push( source );\n\t\treturn this;\n\t},\n\n\tappend: function append ( str, options ) {\n\t\tthis.addSource({\n\t\t\tcontent: new MagicString$1( str ),\n\t\t\tseparator: ( options && options.separator ) || ''\n\t\t});\n\n\t\treturn this;\n\t},\n\n\tclone: function clone () {\n\t\tvar bundle = new Bundle({\n\t\t\tintro: this.intro,\n\t\t\tseparator: this.separator\n\t\t});\n\n\t\tthis.sources.forEach( function (source) {\n\t\t\tbundle.addSource({\n\t\t\t\tfilename: source.filename,\n\t\t\t\tcontent: source.content.clone(),\n\t\t\t\tseparator: source.separator\n\t\t\t});\n\t\t});\n\n\t\treturn bundle;\n\t},\n\n\tgenerateMap: function generateMap ( options ) {\n\t\tvar this$1 = this;\n\t\tif ( options === void 0 ) options = {};\n\n\t\tvar names = [];\n\t\tthis.sources.forEach( function (source) {\n\t\t\tObject.keys( source.content.storedNames ).forEach( function (name) {\n\t\t\t\tif ( !~names.indexOf( name ) ) { names.push( name ); }\n\t\t\t});\n\t\t});\n\n\t\tvar mappings = new Mappings( options.hires );\n\n\t\tif ( this.intro ) {\n\t\t\tmappings.advance( this.intro );\n\t\t}\n\n\t\tthis.sources.forEach( function ( source, i ) {\n\t\t\tif ( i > 0 ) {\n\t\t\t\tmappings.advance( this$1.separator );\n\t\t\t}\n\n\t\t\tvar sourceIndex = source.filename ? this$1.uniqueSourceIndexByFilename[ source.filename ] : -1;\n\t\t\tvar magicString = source.content;\n\t\t\tvar locate = getLocator$1( magicString.original );\n\n\t\t\tif ( magicString.intro ) {\n\t\t\t\tmappings.advance( magicString.intro );\n\t\t\t}\n\n\t\t\tmagicString.firstChunk.eachNext( function (chunk) {\n\t\t\t\tvar loc = locate( chunk.start );\n\n\t\t\t\tif ( chunk.intro.length ) { mappings.advance( chunk.intro ); }\n\n\t\t\t\tif ( source.filename ) {\n\t\t\t\t\tif ( chunk.edited ) {\n\t\t\t\t\t\tmappings.addEdit( sourceIndex, chunk.content, chunk.original, loc, chunk.storeName ? names.indexOf( chunk.original ) : -1 );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmappings.addUneditedChunk( sourceIndex, chunk, magicString.original, loc, magicString.sourcemapLocations );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\telse {\n\t\t\t\t\tmappings.advance( chunk.content );\n\t\t\t\t}\n\n\t\t\t\tif ( chunk.outro.length ) { mappings.advance( chunk.outro ); }\n\t\t\t});\n\n\t\t\tif ( magicString.outro ) {\n\t\t\t\tmappings.advance( magicString.outro );\n\t\t\t}\n\t\t});\n\n\t\treturn new SourceMap({\n\t\t\tfile: ( options.file ? options.file.split( /[\\/\\\\]/ ).pop() : null ),\n\t\t\tsources: this.uniqueSources.map( function (source) {\n\t\t\t\treturn options.file ? getRelativePath( options.file, source.filename ) : source.filename;\n\t\t\t}),\n\t\t\tsourcesContent: this.uniqueSources.map( function (source) {\n\t\t\t\treturn options.includeContent ? source.content : null;\n\t\t\t}),\n\t\t\tnames: names,\n\t\t\tmappings: mappings.encode()\n\t\t});\n\t},\n\n\tgetIndentString: function getIndentString () {\n\t\tvar indentStringCounts = {};\n\n\t\tthis.sources.forEach( function (source) {\n\t\t\tvar indentStr = source.content.indentStr;\n\n\t\t\tif ( indentStr === null ) { return; }\n\n\t\t\tif ( !indentStringCounts[ indentStr ] ) { indentStringCounts[ indentStr ] = 0; }\n\t\t\tindentStringCounts[ indentStr ] += 1;\n\t\t});\n\n\t\treturn ( Object.keys( indentStringCounts ).sort( function ( a, b ) {\n\t\t\treturn indentStringCounts[a] - indentStringCounts[b];\n\t\t})[0] ) || '\\t';\n\t},\n\n\tindent: function indent ( indentStr ) {\n\t\tvar this$1 = this;\n\n\t\tif ( !arguments.length ) {\n\t\t\tindentStr = this.getIndentString();\n\t\t}\n\n\t\tif ( indentStr === '' ) { return this; } // noop\n\n\t\tvar trailingNewline = !this.intro || this.intro.slice( -1 ) === '\\n';\n\n\t\tthis.sources.forEach( function ( source, i ) {\n\t\t\tvar separator = source.separator !== undefined ? source.separator : this$1.separator;\n\t\t\tvar indentStart = trailingNewline || ( i > 0 && /\\r?\\n$/.test( separator ) );\n\n\t\t\tsource.content.indent( indentStr, {\n\t\t\t\texclude: source.indentExclusionRanges,\n\t\t\t\tindentStart: indentStart//: trailingNewline || /\\r?\\n$/.test( separator )  //true///\\r?\\n/.test( separator )\n\t\t\t});\n\n\t\t\t// TODO this is a very slow way to determine this\n\t\t\ttrailingNewline = source.content.toString().slice( 0, -1 ) === '\\n';\n\t\t});\n\n\t\tif ( this.intro ) {\n\t\t\tthis.intro = indentStr + this.intro.replace( /^[^\\n]/gm, function ( match, index ) {\n\t\t\t\treturn index > 0 ? indentStr + match : match;\n\t\t\t});\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tprepend: function prepend ( str ) {\n\t\tthis.intro = str + this.intro;\n\t\treturn this;\n\t},\n\n\ttoString: function toString () {\n\t\tvar this$1 = this;\n\n\t\tvar body = this.sources.map( function ( source, i ) {\n\t\t\tvar separator = source.separator !== undefined ? source.separator : this$1.separator;\n\t\t\tvar str = ( i > 0 ? separator : '' ) + source.content.toString();\n\n\t\t\treturn str;\n\t\t}).join( '' );\n\n\t\treturn this.intro + body;\n\t},\n\n\ttrimLines: function trimLines () {\n\t\treturn this.trim('[\\\\r\\\\n]');\n\t},\n\n\ttrim: function trim ( charType ) {\n\t\treturn this.trimStart( charType ).trimEnd( charType );\n\t},\n\n\ttrimStart: function trimStart ( charType ) {\n\t\tvar this$1 = this;\n\n\t\tvar rx = new RegExp( '^' + ( charType || '\\\\s' ) + '+' );\n\t\tthis.intro = this.intro.replace( rx, '' );\n\n\t\tif ( !this.intro ) {\n\t\t\tvar source;\n\t\t\tvar i = 0;\n\n\t\t\tdo {\n\t\t\t\tsource = this$1.sources[i];\n\n\t\t\t\tif ( !source ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tsource.content.trimStart( charType );\n\t\t\t\ti += 1;\n\t\t\t} while ( source.content.toString() === '' ); // TODO faster way to determine non-empty source?\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttrimEnd: function trimEnd ( charType ) {\n\t\tvar this$1 = this;\n\n\t\tvar rx = new RegExp( ( charType || '\\\\s' ) + '+$' );\n\n\t\tvar source;\n\t\tvar i = this.sources.length - 1;\n\n\t\tdo {\n\t\t\tsource = this$1.sources[i];\n\n\t\t\tif ( !source ) {\n\t\t\t\tthis$1.intro = this$1.intro.replace( rx, '' );\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tsource.content.trimEnd( charType );\n\t\t\ti -= 1;\n\t\t} while ( source.content.toString() === '' ); // TODO faster way to determine non-empty source?\n\n\t\treturn this;\n\t}\n};\n\nfunction annotateWithScopes(expression) {\n    const globals = new Set();\n    let scope = new Scope(null, false);\n    walk(expression, {\n        enter(node, parent) {\n            if (/Function/.test(node.type)) {\n                if (node.type === 'FunctionDeclaration') {\n                    scope.declarations.add(node.id.name);\n                }\n                else {\n                    node._scope = scope = new Scope(scope, false);\n                    if (node.id)\n                        scope.declarations.add(node.id.name);\n                }\n                node.params.forEach((param) => {\n                    extractNames(param).forEach(name => {\n                        scope.declarations.add(name);\n                    });\n                });\n            }\n            else if (/For(?:In|Of)Statement/.test(node.type)) {\n                node._scope = scope = new Scope(scope, true);\n            }\n            else if (node.type === 'BlockStatement') {\n                node._scope = scope = new Scope(scope, true);\n            }\n            else if (/(Function|Class|Variable)Declaration/.test(node.type)) {\n                scope.addDeclaration(node);\n            }\n            else if (isReference(node, parent)) {\n                if (!scope.has(node.name)) {\n                    globals.add(node.name);\n                }\n            }\n        },\n        leave(node) {\n            if (node._scope) {\n                scope = scope.parent;\n            }\n        },\n    });\n    return { scope, globals };\n}\nclass Scope {\n    constructor(parent, block) {\n        this.parent = parent;\n        this.block = block;\n        this.declarations = new Set();\n    }\n    addDeclaration(node) {\n        if (node.kind === 'var' && !this.block && this.parent) {\n            this.parent.addDeclaration(node);\n        }\n        else if (node.type === 'VariableDeclaration') {\n            node.declarations.forEach((declarator) => {\n                extractNames(declarator.id).forEach(name => {\n                    this.declarations.add(name);\n                });\n            });\n        }\n        else {\n            this.declarations.add(node.id.name);\n        }\n    }\n    has(name) {\n        return (this.declarations.has(name) || (this.parent && this.parent.has(name)));\n    }\n}\nfunction extractNames(param) {\n    const names = [];\n    extractors[param.type](names, param);\n    return names;\n}\nconst extractors = {\n    Identifier(names, param) {\n        names.push(param.name);\n    },\n    ObjectPattern(names, param) {\n        param.properties.forEach((prop) => {\n            extractors[prop.value.type](names, prop.value);\n        });\n    },\n    ArrayPattern(names, param) {\n        param.elements.forEach((element) => {\n            if (element)\n                extractors[element.type](names, element);\n        });\n    },\n    RestElement(names, param) {\n        extractors[param.argument.type](names, param.argument);\n    },\n    AssignmentPattern(names, param) {\n        extractors[param.left.type](names, param.left);\n    },\n};\n\nconst start = /\\n(\\t+)/;\nfunction deindent(strings, ...values) {\n    const indentation = start.exec(strings[0])[1];\n    const pattern = new RegExp(`^${indentation}`, 'gm');\n    let result = strings[0].replace(start, '').replace(pattern, '');\n    let trailingIndentation = getTrailingIndentation(result);\n    for (let i = 1; i < strings.length; i += 1) {\n        let expression = values[i - 1];\n        const string = strings[i].replace(pattern, '');\n        if (Array.isArray(expression)) {\n            expression = expression.length ? expression.join('\\n') : null;\n        }\n        if (expression || expression === '') {\n            const value = String(expression).replace(/\\n/g, `\\n${trailingIndentation}`);\n            result += value + string;\n        }\n        else {\n            let c = result.length;\n            while (/\\s/.test(result[c - 1]))\n                c -= 1;\n            result = result.slice(0, c) + string;\n        }\n        trailingIndentation = getTrailingIndentation(result);\n    }\n    return result.trim().replace(/\\t+$/gm, '');\n}\nfunction getTrailingIndentation(str) {\n    let i = str.length;\n    while (str[i - 1] === ' ' || str[i - 1] === '\\t')\n        i -= 1;\n    return str.slice(i, str.length);\n}\n\nfunction stringify(data, options = {}) {\n    return JSON.stringify(escape(data, options));\n}\nfunction escape(data, { onlyEscapeAtSymbol = false } = {}) {\n    return data.replace(onlyEscapeAtSymbol ? /(%+|@+)/g : /(%+|@+|#+)/g, (match) => {\n        return match + match[0];\n    });\n}\nconst escaped = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n};\nfunction escapeHTML(html) {\n    return String(html).replace(/[&<>]/g, match => escaped[match]);\n}\nfunction escapeTemplate(str) {\n    return str.replace(/(\\${|`|\\\\)/g, '\\\\$1');\n}\n\nvar ChunkType;\n(function (ChunkType) {\n    ChunkType[ChunkType[\"Line\"] = 0] = \"Line\";\n    ChunkType[ChunkType[\"Block\"] = 1] = \"Block\";\n})(ChunkType || (ChunkType = {}));\nclass CodeBuilder {\n    constructor(str = '') {\n        this.result = str;\n        const initial = str\n            ? /\\n/.test(str) ? ChunkType.Block : ChunkType.Line\n            : null;\n        this.first = initial;\n        this.last = initial;\n        this.lastCondition = null;\n        this.conditionStack = [];\n        this.indent = '';\n    }\n    addConditional(condition, body) {\n        this.reifyConditions();\n        body = body.replace(/^/gm, `${this.indent}\\t`);\n        if (condition === this.lastCondition) {\n            this.result += `\\n${body}`;\n        }\n        else {\n            if (this.lastCondition) {\n                this.result += `\\n${this.indent}}`;\n            }\n            this.result += `${this.last === ChunkType.Block ? '\\n\\n' : '\\n'}${this.indent}if (${condition}) {\\n${body}`;\n            this.lastCondition = condition;\n        }\n        this.last = ChunkType.Block;\n    }\n    addLine(line) {\n        this.reifyConditions();\n        if (this.lastCondition) {\n            this.result += `\\n${this.indent}}`;\n            this.lastCondition = null;\n        }\n        if (this.last === ChunkType.Block) {\n            this.result += `\\n\\n${this.indent}${line}`;\n        }\n        else if (this.last === ChunkType.Line) {\n            this.result += `\\n${this.indent}${line}`;\n        }\n        else {\n            this.result += line;\n        }\n        this.last = ChunkType.Line;\n        if (!this.first)\n            this.first = ChunkType.Line;\n    }\n    addLineAtStart(line) {\n        this.reifyConditions();\n        if (this.first === ChunkType.Block) {\n            this.result = `${line}\\n\\n${this.indent}${this.result}`;\n        }\n        else if (this.first === ChunkType.Line) {\n            this.result = `${line}\\n${this.indent}${this.result}`;\n        }\n        else {\n            this.result += line;\n        }\n        this.first = ChunkType.Line;\n        if (!this.last)\n            this.last = ChunkType.Line;\n    }\n    addBlock(block) {\n        this.reifyConditions();\n        if (this.indent)\n            block = block.replace(/^/gm, `${this.indent}`);\n        if (this.lastCondition) {\n            this.result += `\\n${this.indent}}`;\n            this.lastCondition = null;\n        }\n        if (this.result) {\n            this.result += `\\n\\n${this.indent}${block}`;\n        }\n        else {\n            this.result += block;\n        }\n        this.last = ChunkType.Block;\n        if (!this.first)\n            this.first = ChunkType.Block;\n    }\n    addBlockAtStart(block) {\n        this.reifyConditions();\n        if (this.result) {\n            this.result = `${block}\\n\\n${this.indent}${this.result}`;\n        }\n        else {\n            this.result += block;\n        }\n        this.first = ChunkType.Block;\n        if (!this.last)\n            this.last = ChunkType.Block;\n    }\n    isEmpty() {\n        return this.result === '';\n    }\n    pushCondition(condition) {\n        this.conditionStack.push({ condition, used: false });\n    }\n    popCondition() {\n        const { used } = this.conditionStack.pop();\n        this.indent = repeat('\\t', this.conditionStack.length);\n        if (used)\n            this.addLine('}');\n    }\n    reifyConditions() {\n        for (let i = 0; i < this.conditionStack.length; i += 1) {\n            const condition = this.conditionStack[i];\n            if (!condition.used) {\n                const line = `if (${condition.condition}) {`;\n                if (this.last === ChunkType.Block) {\n                    this.result += `\\n\\n${this.indent}${line}`;\n                }\n                else if (this.last === ChunkType.Line) {\n                    this.result += `\\n${this.indent}${line}`;\n                }\n                else {\n                    this.result += line;\n                }\n                this.last = ChunkType.Line;\n                if (!this.first)\n                    this.first = ChunkType.Line;\n                this.indent = repeat('\\t', this.conditionStack.length);\n                condition.used = true;\n            }\n        }\n    }\n    toString() {\n        return this.result.trim() + (this.lastCondition ? `\\n}` : ``);\n    }\n}\n\nvar globalWhitelist = new Set([\n    'Array',\n    'Boolean',\n    'console',\n    'Date',\n    'decodeURI',\n    'decodeURIComponent',\n    'encodeURI',\n    'encodeURIComponent',\n    'Infinity',\n    'Intl',\n    'isFinite',\n    'isNaN',\n    'JSON',\n    'Map',\n    'Math',\n    'NaN',\n    'Number',\n    'Object',\n    'parseFloat',\n    'parseInt',\n    'RegExp',\n    'Set',\n    'String',\n    'undefined',\n]);\n\n// this file is auto-generated, do not edit it\nconst shared = {\n    \"appendNode\": \"function appendNode(node, target) {\\n\\ttarget.appendChild(node);\\n}\",\n    \"insertNode\": \"function insertNode(node, target, anchor) {\\n\\ttarget.insertBefore(node, anchor);\\n}\",\n    \"detachNode\": \"function detachNode(node) {\\n\\tnode.parentNode.removeChild(node);\\n}\",\n    \"detachBetween\": \"function detachBetween(before, after) {\\n\\twhile (before.nextSibling && before.nextSibling !== after) {\\n\\t\\tbefore.parentNode.removeChild(before.nextSibling);\\n\\t}\\n}\",\n    \"detachBefore\": \"function detachBefore(after) {\\n\\twhile (after.previousSibling) {\\n\\t\\tafter.parentNode.removeChild(after.previousSibling);\\n\\t}\\n}\",\n    \"detachAfter\": \"function detachAfter(before) {\\n\\twhile (before.nextSibling) {\\n\\t\\tbefore.parentNode.removeChild(before.nextSibling);\\n\\t}\\n}\",\n    \"reinsertBetween\": \"function reinsertBetween(before, after, target) {\\n\\twhile (before.nextSibling && before.nextSibling !== after) {\\n\\t\\ttarget.appendChild(before.parentNode.removeChild(before.nextSibling));\\n\\t}\\n}\",\n    \"reinsertChildren\": \"function reinsertChildren(parent, target) {\\n\\twhile (parent.firstChild) target.appendChild(parent.firstChild);\\n}\",\n    \"reinsertAfter\": \"function reinsertAfter(before, target) {\\n\\twhile (before.nextSibling) target.appendChild(before.nextSibling);\\n}\",\n    \"reinsertBefore\": \"function reinsertBefore(after, target) {\\n\\tvar parent = after.parentNode;\\n\\twhile (parent.firstChild !== after) target.appendChild(parent.firstChild);\\n}\",\n    \"destroyEach\": \"function destroyEach(iterations) {\\n\\tfor (var i = 0; i < iterations.length; i += 1) {\\n\\t\\tif (iterations[i]) iterations[i].d();\\n\\t}\\n}\",\n    \"createFragment\": \"function createFragment() {\\n\\treturn document.createDocumentFragment();\\n}\",\n    \"createElement\": \"function createElement(name) {\\n\\treturn document.createElement(name);\\n}\",\n    \"createSvgElement\": \"function createSvgElement(name) {\\n\\treturn document.createElementNS('http://www.w3.org/2000/svg', name);\\n}\",\n    \"createText\": \"function createText(data) {\\n\\treturn document.createTextNode(data);\\n}\",\n    \"createComment\": \"function createComment() {\\n\\treturn document.createComment('');\\n}\",\n    \"addListener\": \"function addListener(node, event, handler) {\\n\\tnode.addEventListener(event, handler, false);\\n}\",\n    \"removeListener\": \"function removeListener(node, event, handler) {\\n\\tnode.removeEventListener(event, handler, false);\\n}\",\n    \"setAttribute\": \"function setAttribute(node, attribute, value) {\\n\\tnode.setAttribute(attribute, value);\\n}\",\n    \"setAttributes\": \"function setAttributes(node, attributes) {\\n\\tfor (var key in attributes) {\\n\\t\\tif (key in node) {\\n\\t\\t\\tnode[key] = attributes[key];\\n\\t\\t} else {\\n\\t\\t\\tif (attributes[key] === undefined) removeAttribute(node, key);\\n\\t\\t\\telse setAttribute(node, key, attributes[key]);\\n\\t\\t}\\n\\t}\\n}\",\n    \"removeAttribute\": \"function removeAttribute(node, attribute) {\\n\\tnode.removeAttribute(attribute);\\n}\",\n    \"setXlinkAttribute\": \"function setXlinkAttribute(node, attribute, value) {\\n\\tnode.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\\n}\",\n    \"getBindingGroupValue\": \"function getBindingGroupValue(group) {\\n\\tvar value = [];\\n\\tfor (var i = 0; i < group.length; i += 1) {\\n\\t\\tif (group[i].checked) value.push(group[i].__value);\\n\\t}\\n\\treturn value;\\n}\",\n    \"toNumber\": \"function toNumber(value) {\\n\\treturn value === '' ? undefined : +value;\\n}\",\n    \"timeRangesToArray\": \"function timeRangesToArray(ranges) {\\n\\tvar array = [];\\n\\tfor (var i = 0; i < ranges.length; i += 1) {\\n\\t\\tarray.push({ start: ranges.start(i), end: ranges.end(i) });\\n\\t}\\n\\treturn array;\\n}\",\n    \"children\": \"function children (element) {\\n\\treturn Array.from(element.childNodes);\\n}\",\n    \"claimElement\": \"function claimElement (nodes, name, attributes, svg) {\\n\\tfor (var i = 0; i < nodes.length; i += 1) {\\n\\t\\tvar node = nodes[i];\\n\\t\\tif (node.nodeName === name) {\\n\\t\\t\\tfor (var j = 0; j < node.attributes.length; j += 1) {\\n\\t\\t\\t\\tvar attribute = node.attributes[j];\\n\\t\\t\\t\\tif (!attributes[attribute.name]) node.removeAttribute(attribute.name);\\n\\t\\t\\t}\\n\\t\\t\\treturn nodes.splice(i, 1)[0]; // TODO strip unwanted attributes\\n\\t\\t}\\n\\t}\\n\\n\\treturn svg ? createSvgElement(name) : createElement(name);\\n}\",\n    \"claimText\": \"function claimText (nodes, data) {\\n\\tfor (var i = 0; i < nodes.length; i += 1) {\\n\\t\\tvar node = nodes[i];\\n\\t\\tif (node.nodeType === 3) {\\n\\t\\t\\tnode.data = data;\\n\\t\\t\\treturn nodes.splice(i, 1)[0];\\n\\t\\t}\\n\\t}\\n\\n\\treturn createText(data);\\n}\",\n    \"setInputType\": \"function setInputType(input, type) {\\n\\ttry {\\n\\t\\tinput.type = type;\\n\\t} catch (e) {}\\n}\",\n    \"setStyle\": \"function setStyle(node, key, value) {\\n\\tnode.style.setProperty(key, value);\\n}\",\n    \"selectOption\": \"function selectOption(select, value) {\\n\\tfor (var i = 0; i < select.options.length; i += 1) {\\n\\t\\tvar option = select.options[i];\\n\\n\\t\\tif (option.__value === value) {\\n\\t\\t\\toption.selected = true;\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t}\\n}\",\n    \"selectOptions\": \"function selectOptions(select, value) {\\n\\tfor (var i = 0; i < select.options.length; i += 1) {\\n\\t\\tvar option = select.options[i];\\n\\t\\toption.selected = ~value.indexOf(option.__value);\\n\\t}\\n}\",\n    \"selectValue\": \"function selectValue(select) {\\n\\tvar selectedOption = select.querySelector(':checked') || select.options[0];\\n\\treturn selectedOption && selectedOption.__value;\\n}\",\n    \"selectMultipleValue\": \"function selectMultipleValue(select) {\\n\\treturn [].map.call(select.querySelectorAll(':checked'), function(option) {\\n\\t\\treturn option.__value;\\n\\t});\\n}\",\n    \"blankObject\": \"function blankObject() {\\n\\treturn Object.create(null);\\n}\",\n    \"destroy\": \"function destroy(detach) {\\n\\tthis.destroy = noop;\\n\\tthis.fire('destroy');\\n\\tthis.set = this.get = noop;\\n\\n\\tif (detach !== false) this._fragment.u();\\n\\tthis._fragment.d();\\n\\tthis._fragment = this._state = null;\\n}\",\n    \"destroyDev\": \"function destroyDev(detach) {\\n\\tdestroy.call(this, detach);\\n\\tthis.destroy = function() {\\n\\t\\tconsole.warn('Component was already destroyed');\\n\\t};\\n}\",\n    \"_differs\": \"function _differs(a, b) {\\n\\treturn a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\\n}\",\n    \"_differsImmutable\": \"function _differsImmutable(a, b) {\\n\\treturn a != a ? b == b : a !== b;\\n}\",\n    \"fire\": \"function fire(eventName, data) {\\n\\tvar handlers =\\n\\t\\teventName in this._handlers && this._handlers[eventName].slice();\\n\\tif (!handlers) return;\\n\\n\\tfor (var i = 0; i < handlers.length; i += 1) {\\n\\t\\tvar handler = handlers[i];\\n\\n\\t\\tif (!handler.__calling) {\\n\\t\\t\\thandler.__calling = true;\\n\\t\\t\\thandler.call(this, data);\\n\\t\\t\\thandler.__calling = false;\\n\\t\\t}\\n\\t}\\n}\",\n    \"getDev\": \"function getDev(key) {\\n\\tif (key) console.warn(\\\"`let x = component.get('x')` is deprecated. Use `let { x } = component.get()` instead\\\");\\n\\treturn get.call(this, key);\\n}\",\n    \"get\": \"function get(key) {\\n\\treturn key ? this._state[key] : this._state;\\n}\",\n    \"init\": \"function init(component, options) {\\n\\tcomponent._handlers = blankObject();\\n\\tcomponent._bind = options._bind;\\n\\n\\tcomponent.options = options;\\n\\tcomponent.root = options.root || component;\\n\\tcomponent.store = component.root.store || options.store;\\n}\",\n    \"observe\": \"function observe(key, callback, options) {\\n\\tvar fn = callback.bind(this);\\n\\n\\tif (!options || options.init !== false) {\\n\\t\\tfn(this.get()[key], undefined);\\n\\t}\\n\\n\\treturn this.on(options && options.defer ? 'update' : 'state', function(event) {\\n\\t\\tif (event.changed[key]) fn(event.current[key], event.previous && event.previous[key]);\\n\\t});\\n}\",\n    \"observeDev\": \"function observeDev(key, callback, options) {\\n\\tconsole.warn(\\\"this.observe(key, (newValue, oldValue) => {...}) is deprecated. Use\\\\n\\\\n  // runs before DOM updates\\\\n  this.on('state', ({ changed, current, previous }) => {...});\\\\n\\\\n  // runs after DOM updates\\\\n  this.on('update', ...);\\\\n\\\\n...or add the observe method from the svelte-extras package\\\");\\n\\n\\tvar c = (key = '' + key).search(/[.[]/);\\n\\tif (c > -1) {\\n\\t\\tvar message =\\n\\t\\t\\t'The first argument to component.observe(...) must be the name of a top-level property';\\n\\t\\tif (c > 0)\\n\\t\\t\\tmessage += \\\", i.e. '\\\" + key.slice(0, c) + \\\"' rather than '\\\" + key + \\\"'\\\";\\n\\n\\t\\tthrow new Error(message);\\n\\t}\\n\\n\\treturn observe.call(this, key, callback, options);\\n}\",\n    \"on\": \"function on(eventName, handler) {\\n\\tif (eventName === 'teardown') return this.on('destroy', handler);\\n\\n\\tvar handlers = this._handlers[eventName] || (this._handlers[eventName] = []);\\n\\thandlers.push(handler);\\n\\n\\treturn {\\n\\t\\tcancel: function() {\\n\\t\\t\\tvar index = handlers.indexOf(handler);\\n\\t\\t\\tif (~index) handlers.splice(index, 1);\\n\\t\\t}\\n\\t};\\n}\",\n    \"onDev\": \"function onDev(eventName, handler) {\\n\\tif (eventName === 'teardown') {\\n\\t\\tconsole.warn(\\n\\t\\t\\t\\\"Use component.on('destroy', ...) instead of component.on('teardown', ...) which has been deprecated and will be unsupported in Svelte 2\\\"\\n\\t\\t);\\n\\t\\treturn this.on('destroy', handler);\\n\\t}\\n\\n\\treturn on.call(this, eventName, handler);\\n}\",\n    \"run\": \"function run(fn) {\\n\\tfn();\\n}\",\n    \"set\": \"function set(newState) {\\n\\tthis._set(assign({}, newState));\\n\\tif (this.root._lock) return;\\n\\tthis.root._lock = true;\\n\\tcallAll(this.root._beforecreate);\\n\\tcallAll(this.root._oncreate);\\n\\tcallAll(this.root._aftercreate);\\n\\tthis.root._lock = false;\\n}\",\n    \"_set\": \"function _set(newState) {\\n\\tvar oldState = this._state,\\n\\t\\tchanged = {},\\n\\t\\tdirty = false;\\n\\n\\tfor (var key in newState) {\\n\\t\\tif (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;\\n\\t}\\n\\tif (!dirty) return;\\n\\n\\tthis._state = assign(assign({}, oldState), newState);\\n\\tthis._recompute(changed, this._state);\\n\\tif (this._bind) this._bind(changed, this._state);\\n\\n\\tif (this._fragment) {\\n\\t\\tthis.fire(\\\"state\\\", { changed: changed, current: this._state, previous: oldState });\\n\\t\\tthis._fragment.p(changed, this._state);\\n\\t\\tthis.fire(\\\"update\\\", { changed: changed, current: this._state, previous: oldState });\\n\\t}\\n}\",\n    \"setDev\": \"function setDev(newState) {\\n\\tif (typeof newState !== 'object') {\\n\\t\\tthrow new Error(\\n\\t\\t\\tthis._debugName + '.set was called without an object of data key-values to update.'\\n\\t\\t);\\n\\t}\\n\\n\\tthis._checkReadOnly(newState);\\n\\tset.call(this, newState);\\n}\",\n    \"callAll\": \"function callAll(fns) {\\n\\twhile (fns && fns.length) fns.shift()();\\n}\",\n    \"_mount\": \"function _mount(target, anchor) {\\n\\tthis._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);\\n}\",\n    \"_unmount\": \"function _unmount() {\\n\\tif (this._fragment) this._fragment.u();\\n}\",\n    \"isPromise\": \"function isPromise(value) {\\n\\treturn value && typeof value.then === 'function';\\n}\",\n    \"PENDING\": \"{}\",\n    \"SUCCESS\": \"{}\",\n    \"FAILURE\": \"{}\",\n    \"removeFromStore\": \"function removeFromStore() {\\n\\tthis.store._remove(this);\\n}\",\n    \"proto\": \"{\\n\\tdestroy: destroy,\\n\\tget: get,\\n\\tfire: fire,\\n\\tobserve: observe,\\n\\ton: on,\\n\\tset: set,\\n\\tteardown: destroy,\\n\\t_recompute: noop,\\n\\t_set: _set,\\n\\t_mount: _mount,\\n\\t_unmount: _unmount,\\n\\t_differs: _differs\\n}\",\n    \"protoDev\": \"{\\n\\tdestroy: destroyDev,\\n\\tget: getDev,\\n\\tfire: fire,\\n\\tobserve: observeDev,\\n\\ton: onDev,\\n\\tset: setDev,\\n\\tteardown: destroyDev,\\n\\t_recompute: noop,\\n\\t_set: _set,\\n\\t_mount: _mount,\\n\\t_unmount: _unmount,\\n\\t_differs: _differs\\n}\",\n    \"destroyBlock\": \"function destroyBlock(block, lookup) {\\n\\tblock.u();\\n\\tblock.d();\\n\\tlookup[block.key] = null;\\n}\",\n    \"outroAndDestroyBlock\": \"function outroAndDestroyBlock(block, lookup) {\\n\\tblock.o(function() {\\n\\t\\tdestroyBlock(block, lookup);\\n\\t});\\n}\",\n    \"updateKeyedEach\": \"function updateKeyedEach(old_blocks, component, changed, key_prop, dynamic, list, lookup, node, has_outro, create_each_block, intro_method, next, get_context) {\\n\\tvar o = old_blocks.length;\\n\\tvar n = list.length;\\n\\n\\tvar i = o;\\n\\tvar old_indexes = {};\\n\\twhile (i--) old_indexes[old_blocks[i].key] = i;\\n\\n\\tvar new_blocks = [];\\n\\tvar new_lookup = {};\\n\\tvar deltas = {};\\n\\n\\tvar i = n;\\n\\twhile (i--) {\\n\\t\\tvar key = list[i][key_prop];\\n\\t\\tvar block = lookup[key];\\n\\n\\t\\tif (!block) {\\n\\t\\t\\tblock = create_each_block(component, key, get_context(i));\\n\\t\\t\\tblock.c();\\n\\t\\t} else if (dynamic) {\\n\\t\\t\\tblock.p(changed, get_context(i));\\n\\t\\t}\\n\\n\\t\\tnew_blocks[i] = new_lookup[key] = block;\\n\\n\\t\\tif (key in old_indexes) deltas[key] = Math.abs(i - old_indexes[key]);\\n\\t}\\n\\n\\tvar will_move = {};\\n\\tvar did_move = {};\\n\\n\\tvar destroy = has_outro ? outroAndDestroyBlock : destroyBlock;\\n\\n\\tfunction insert(block) {\\n\\t\\tblock[intro_method](node, next);\\n\\t\\tlookup[block.key] = block;\\n\\t\\tnext = block.first;\\n\\t\\tn--;\\n\\t}\\n\\n\\twhile (o && n) {\\n\\t\\tvar new_block = new_blocks[n - 1];\\n\\t\\tvar old_block = old_blocks[o - 1];\\n\\t\\tvar new_key = new_block.key;\\n\\t\\tvar old_key = old_block.key;\\n\\n\\t\\tif (new_block === old_block) {\\n\\t\\t\\t// do nothing\\n\\t\\t\\tnext = new_block.first;\\n\\t\\t\\to--;\\n\\t\\t\\tn--;\\n\\t\\t}\\n\\n\\t\\telse if (!new_lookup[old_key]) {\\n\\t\\t\\t// remove old block\\n\\t\\t\\tdestroy(old_block, lookup);\\n\\t\\t\\to--;\\n\\t\\t}\\n\\n\\t\\telse if (!lookup[new_key] || will_move[new_key]) {\\n\\t\\t\\tinsert(new_block);\\n\\t\\t}\\n\\n\\t\\telse if (did_move[old_key]) {\\n\\t\\t\\to--;\\n\\n\\t\\t} else if (deltas[new_key] > deltas[old_key]) {\\n\\t\\t\\tdid_move[new_key] = true;\\n\\t\\t\\tinsert(new_block);\\n\\n\\t\\t} else {\\n\\t\\t\\twill_move[old_key] = true;\\n\\t\\t\\to--;\\n\\t\\t}\\n\\t}\\n\\n\\twhile (o--) {\\n\\t\\tvar old_block = old_blocks[o];\\n\\t\\tif (!new_lookup[old_block.key]) destroy(old_block, lookup);\\n\\t}\\n\\n\\twhile (n) insert(new_blocks[n - 1]);\\n\\n\\treturn new_blocks;\\n}\",\n    \"getSpreadUpdate\": \"function getSpreadUpdate(levels, updates) {\\n\\tvar update = {};\\n\\n\\tvar to_null_out = {};\\n\\tvar accounted_for = {};\\n\\n\\tvar i = levels.length;\\n\\twhile (i--) {\\n\\t\\tvar o = levels[i];\\n\\t\\tvar n = updates[i];\\n\\n\\t\\tif (n) {\\n\\t\\t\\tfor (var key in o) {\\n\\t\\t\\t\\tif (!(key in n)) to_null_out[key] = 1;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfor (var key in n) {\\n\\t\\t\\t\\tif (!accounted_for[key]) {\\n\\t\\t\\t\\t\\tupdate[key] = n[key];\\n\\t\\t\\t\\t\\taccounted_for[key] = 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tlevels[i] = n;\\n\\t\\t} else {\\n\\t\\t\\tfor (var key in o) {\\n\\t\\t\\t\\taccounted_for[key] = 1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfor (var key in to_null_out) {\\n\\t\\tif (!(key in update)) update[key] = undefined;\\n\\t}\\n\\n\\treturn update;\\n}\",\n    \"linear\": \"function linear(t) {\\n\\treturn t;\\n}\",\n    \"generateRule\": \"function generateRule(\\n\\ta,\\n\\tb,\\n\\tdelta,\\n\\tduration,\\n\\tease,\\n\\tfn\\n) {\\n\\tvar keyframes = '{\\\\n';\\n\\n\\tfor (var p = 0; p <= 1; p += 16.666 / duration) {\\n\\t\\tvar t = a + delta * ease(p);\\n\\t\\tkeyframes += p * 100 + '%{' + fn(t) + '}\\\\n';\\n\\t}\\n\\n\\treturn keyframes + '100% {' + fn(b) + '}\\\\n}';\\n}\",\n    \"hash\": \"function hash(str) {\\n\\tvar hash = 5381;\\n\\tvar i = str.length;\\n\\n\\twhile (i--) hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\\n\\treturn hash >>> 0;\\n}\",\n    \"wrapTransition\": \"function wrapTransition(component, node, fn, params, intro, outgroup) {\\n\\tvar obj = fn(node, params);\\n\\tvar duration = obj.duration || 300;\\n\\tvar ease = obj.easing || linear;\\n\\tvar cssText;\\n\\n\\t// TODO share <style> tag between all transitions?\\n\\tif (obj.css && !transitionManager.stylesheet) {\\n\\t\\tvar style = createElement('style');\\n\\t\\tdocument.head.appendChild(style);\\n\\t\\ttransitionManager.stylesheet = style.sheet;\\n\\t}\\n\\n\\tif (intro) {\\n\\t\\tif (obj.css && obj.delay) {\\n\\t\\t\\tcssText = node.style.cssText;\\n\\t\\t\\tnode.style.cssText += obj.css(0);\\n\\t\\t}\\n\\n\\t\\tif (obj.tick) obj.tick(0);\\n\\t}\\n\\n\\treturn {\\n\\t\\tt: intro ? 0 : 1,\\n\\t\\trunning: false,\\n\\t\\tprogram: null,\\n\\t\\tpending: null,\\n\\t\\trun: function(intro, callback) {\\n\\t\\t\\tvar program = {\\n\\t\\t\\t\\tstart: window.performance.now() + (obj.delay || 0),\\n\\t\\t\\t\\tintro: intro,\\n\\t\\t\\t\\tcallback: callback\\n\\t\\t\\t};\\n\\n\\t\\t\\tif (obj.delay) {\\n\\t\\t\\t\\tthis.pending = program;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.start(program);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!this.running) {\\n\\t\\t\\t\\tthis.running = true;\\n\\t\\t\\t\\ttransitionManager.add(this);\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\tstart: function(program) {\\n\\t\\t\\tcomponent.fire(program.intro ? 'intro.start' : 'outro.start', { node: node });\\n\\n\\t\\t\\tprogram.a = this.t;\\n\\t\\t\\tprogram.b = program.intro ? 1 : 0;\\n\\t\\t\\tprogram.delta = program.b - program.a;\\n\\t\\t\\tprogram.duration = duration * Math.abs(program.b - program.a);\\n\\t\\t\\tprogram.end = program.start + program.duration;\\n\\n\\t\\t\\tif (obj.css) {\\n\\t\\t\\t\\tif (obj.delay) node.style.cssText = cssText;\\n\\n\\t\\t\\t\\tprogram.rule = generateRule(\\n\\t\\t\\t\\t\\tprogram.a,\\n\\t\\t\\t\\t\\tprogram.b,\\n\\t\\t\\t\\t\\tprogram.delta,\\n\\t\\t\\t\\t\\tprogram.duration,\\n\\t\\t\\t\\t\\tease,\\n\\t\\t\\t\\t\\tobj.css\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\ttransitionManager.addRule(program.rule, program.name = '__svelte_' + hash(program.rule));\\n\\n\\t\\t\\t\\tnode.style.animation = (node.style.animation || '')\\n\\t\\t\\t\\t\\t.split(', ')\\n\\t\\t\\t\\t\\t.filter(function(anim) {\\n\\t\\t\\t\\t\\t\\t// when introing, discard old animations if there are any\\n\\t\\t\\t\\t\\t\\treturn anim && (program.delta < 0 || !/__svelte/.test(anim));\\n\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t.concat(program.name + ' ' + program.duration + 'ms linear 1 forwards')\\n\\t\\t\\t\\t\\t.join(', ');\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.program = program;\\n\\t\\t\\tthis.pending = null;\\n\\t\\t},\\n\\t\\tupdate: function(now) {\\n\\t\\t\\tvar program = this.program;\\n\\t\\t\\tif (!program) return;\\n\\n\\t\\t\\tvar p = now - program.start;\\n\\t\\t\\tthis.t = program.a + program.delta * ease(p / program.duration);\\n\\t\\t\\tif (obj.tick) obj.tick(this.t);\\n\\t\\t},\\n\\t\\tdone: function() {\\n\\t\\t\\tvar program = this.program;\\n\\t\\t\\tthis.t = program.b;\\n\\t\\t\\tif (obj.tick) obj.tick(this.t);\\n\\t\\t\\tif (obj.css) transitionManager.deleteRule(node, program.name);\\n\\t\\t\\tprogram.callback();\\n\\t\\t\\tprogram = null;\\n\\t\\t\\tthis.running = !!this.pending;\\n\\t\\t},\\n\\t\\tabort: function() {\\n\\t\\t\\tif (obj.tick) obj.tick(1);\\n\\t\\t\\tif (obj.css) transitionManager.deleteRule(node, this.program.name);\\n\\t\\t\\tthis.program = this.pending = null;\\n\\t\\t\\tthis.running = false;\\n\\t\\t}\\n\\t};\\n}\",\n    \"transitionManager\": \"{\\n\\trunning: false,\\n\\ttransitions: [],\\n\\tbound: null,\\n\\tstylesheet: null,\\n\\tactiveRules: {},\\n\\n\\tadd: function(transition) {\\n\\t\\tthis.transitions.push(transition);\\n\\n\\t\\tif (!this.running) {\\n\\t\\t\\tthis.running = true;\\n\\t\\t\\trequestAnimationFrame(this.bound || (this.bound = this.next.bind(this)));\\n\\t\\t}\\n\\t},\\n\\n\\taddRule: function(rule, name) {\\n\\t\\tif (!this.activeRules[name]) {\\n\\t\\t\\tthis.activeRules[name] = true;\\n\\t\\t\\tthis.stylesheet.insertRule('@keyframes ' + name + ' ' + rule, this.stylesheet.cssRules.length);\\n\\t\\t}\\n\\t},\\n\\n\\tnext: function() {\\n\\t\\tthis.running = false;\\n\\n\\t\\tvar now = window.performance.now();\\n\\t\\tvar i = this.transitions.length;\\n\\n\\t\\twhile (i--) {\\n\\t\\t\\tvar transition = this.transitions[i];\\n\\n\\t\\t\\tif (transition.program && now >= transition.program.end) {\\n\\t\\t\\t\\ttransition.done();\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (transition.pending && now >= transition.pending.start) {\\n\\t\\t\\t\\ttransition.start(transition.pending);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (transition.running) {\\n\\t\\t\\t\\ttransition.update(now);\\n\\t\\t\\t\\tthis.running = true;\\n\\t\\t\\t} else if (!transition.pending) {\\n\\t\\t\\t\\tthis.transitions.splice(i, 1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (this.running) {\\n\\t\\t\\trequestAnimationFrame(this.bound);\\n\\t\\t} else if (this.stylesheet) {\\n\\t\\t\\tvar i = this.stylesheet.cssRules.length;\\n\\t\\t\\twhile (i--) this.stylesheet.deleteRule(i);\\n\\t\\t\\tthis.activeRules = {};\\n\\t\\t}\\n\\t},\\n\\n\\tdeleteRule: function(node, name) {\\n\\t\\tnode.style.animation = node.style.animation\\n\\t\\t\\t.split(', ')\\n\\t\\t\\t.filter(function(anim) {\\n\\t\\t\\t\\treturn anim.indexOf(name) === -1;\\n\\t\\t\\t})\\n\\t\\t\\t.join(', ');\\n\\t}\\n}\",\n    \"noop\": \"function noop() {}\",\n    \"assign\": \"function assign(tar, src) {\\n\\tfor (var k in src) tar[k] = src[k];\\n\\treturn tar;\\n}\"\n};\n\nconst keys = {\n    ObjectExpression: 'properties',\n    Program: 'body',\n};\nconst offsets = {\n    ObjectExpression: [1, -1],\n    Program: [0, 0],\n};\nfunction removeNode(code, parent, node) {\n    const key = keys[parent.type];\n    const offset = offsets[parent.type];\n    if (!key || !offset)\n        throw new Error(`not implemented: ${parent.type}`);\n    const list = parent[key];\n    const i = list.indexOf(node);\n    if (i === -1)\n        throw new Error('node not in list');\n    let a;\n    let b;\n    if (list.length === 1) {\n        // remove everything, leave {}\n        a = parent.start + offset[0];\n        b = parent.end + offset[1];\n    }\n    else if (i === 0) {\n        // remove everything before second node, including comments\n        a = parent.start + offset[0];\n        while (/\\s/.test(code.original[a]))\n            a += 1;\n        b = list[i].end;\n        while (/[\\s,]/.test(code.original[b]))\n            b += 1;\n    }\n    else {\n        // remove the end of the previous node to the end of this one\n        a = list[i - 1].end;\n        b = node.end;\n    }\n    code.remove(a, b);\n    list.splice(i, 1);\n    return;\n}\n\nconst wrappers = { es, amd, cjs, iife, umd, eval: expr };\nfunction wrapModule(code, format, name, options, banner, sharedPath, helpers, imports, source) {\n    if (format === 'es')\n        return es(code, name, options, banner, sharedPath, helpers, imports, source);\n    const dependencies = imports.map((declaration, i) => {\n        const defaultImport = declaration.specifiers.find((x) => x.type === 'ImportDefaultSpecifier' ||\n            (x.type === 'ImportSpecifier' && x.imported.name === 'default'));\n        const namespaceImport = declaration.specifiers.find((x) => x.type === 'ImportNamespaceSpecifier');\n        const namedImports = declaration.specifiers.filter((x) => x.type === 'ImportSpecifier' && x.imported.name !== 'default');\n        const name = defaultImport || namespaceImport\n            ? (defaultImport || namespaceImport).local.name\n            : `__import${i}`;\n        const statements = [];\n        namedImports.forEach((specifier) => {\n            statements.push(`var ${specifier.local.name} = ${name}.${specifier.imported.name};`);\n        });\n        if (defaultImport) {\n            statements.push(`${name} = (${name} && ${name}.__esModule) ? ${name}[\"default\"] : ${name};`);\n        }\n        return { name, statements, source: declaration.source.value };\n    });\n    if (format === 'amd')\n        return amd(code, name, options, banner, dependencies);\n    if (format === 'cjs')\n        return cjs(code, name, options, banner, sharedPath, helpers, dependencies);\n    if (format === 'iife')\n        return iife(code, name, options, banner, dependencies);\n    if (format === 'umd')\n        return umd(code, name, options, banner, dependencies);\n    if (format === 'eval')\n        return expr(code, name, options, banner, dependencies);\n    throw new Error(`options.format is invalid (must be ${list$1(Object.keys(wrappers))})`);\n}\nfunction es(code, name, options, banner, sharedPath, helpers, imports, source) {\n    const importHelpers = helpers && (`import { ${helpers.map(h => h.name === h.alias ? h.name : `${h.name} as ${h.alias}`).join(', ')} } from ${JSON.stringify(sharedPath)};`);\n    const importBlock = imports.length > 0 && (imports\n        .map((declaration) => source.slice(declaration.start, declaration.end))\n        .join('\\n'));\n    return deindent `\n\t\t${banner}\n\t\t${importHelpers}\n\t\t${importBlock}\n\n\t\t${code}\n\t\texport default ${name};`;\n}\nfunction amd(code, name, options, banner, dependencies) {\n    const sourceString = dependencies.length\n        ? `[${dependencies.map(d => `\"${removeExtension(d.source)}\"`).join(', ')}], `\n        : '';\n    const id = options.amd && options.amd.id;\n    return deindent `\n\t\tdefine(${id ? `\"${id}\", ` : ''}${sourceString}function(${paramString(dependencies)}) { \"use strict\";\n\t\t\t${getCompatibilityStatements(dependencies)}\n\n\t\t\t${code}\n\t\t\treturn ${name};\n\t\t});`;\n}\nfunction cjs(code, name, options, banner, sharedPath, helpers, dependencies) {\n    const SHARED = '__shared';\n    const helperBlock = helpers && (`var ${SHARED} = require(${JSON.stringify(sharedPath)});\\n` +\n        helpers.map(helper => {\n            return `var ${helper.alias} = ${SHARED}.${helper.name};`;\n        }).join('\\n'));\n    const requireBlock = dependencies.length > 0 && (dependencies\n        .map(d => `var ${d.name} = require(\"${d.source}\");`)\n        .join('\\n\\n'));\n    return deindent `\n\t\t${banner}\n\t\t\"use strict\";\n\n\t\t${helperBlock}\n\t\t${requireBlock}\n\t\t${getCompatibilityStatements(dependencies)}\n\n\t\t${code}\n\n\t\tmodule.exports = ${name};`;\n}\nfunction iife(code, name, options, banner, dependencies) {\n    if (!options.name) {\n        throw new Error(`Missing required 'name' option for IIFE export`);\n    }\n    const globals = getGlobals(dependencies, options);\n    return deindent `\n\t\t${banner}\n\t\tvar ${options.name} = (function(${paramString(dependencies)}) { \"use strict\";\n\t\t\t${getCompatibilityStatements(dependencies)}\n\n\t\t\t${code}\n\t\t\treturn ${name};\n\t\t}(${globals.join(', ')}));`;\n}\nfunction umd(code, name, options, banner, dependencies) {\n    if (!options.name) {\n        throw new Error(`Missing required 'name' option for UMD export`);\n    }\n    const amdId = options.amd && options.amd.id ? `'${options.amd.id}', ` : '';\n    const amdDeps = dependencies.length\n        ? `[${dependencies.map(d => `\"${removeExtension(d.source)}\"`).join(', ')}], `\n        : '';\n    const cjsDeps = dependencies\n        .map(d => `require(\"${d.source}\")`)\n        .join(', ');\n    const globals = getGlobals(dependencies, options);\n    return deindent `\n\t\t${banner}\n\t\t(function(global, factory) {\n\t\t\ttypeof exports === \"object\" && typeof module !== \"undefined\" ? module.exports = factory(${cjsDeps}) :\n\t\t\ttypeof define === \"function\" && define.amd ? define(${amdId}${amdDeps}factory) :\n\t\t\t(global.${options.name} = factory(${globals.join(', ')}));\n\t\t}(this, (function (${paramString(dependencies)}) { \"use strict\";\n\n\t\t\t${getCompatibilityStatements(dependencies)}\n\n\t\t\t${code}\n\n\t\t\treturn ${name};\n\n\t\t})));`;\n}\nfunction expr(code, name, options, banner, dependencies) {\n    const globals = getGlobals(dependencies, options);\n    return deindent `\n\t\t(function (${paramString(dependencies)}) { \"use strict\";\n\t\t\t${banner}\n\n\t\t\t${getCompatibilityStatements(dependencies)}\n\n\t\t\t${code}\n\n\t\t\treturn ${name};\n\t\t}(${globals.join(', ')}))`;\n}\nfunction paramString(dependencies) {\n    return dependencies.map(dep => dep.name).join(', ');\n}\nfunction removeExtension(file) {\n    const index = file.lastIndexOf('.');\n    return ~index ? file.slice(0, index) : file;\n}\nfunction getCompatibilityStatements(dependencies) {\n    if (!dependencies.length)\n        return null;\n    const statements = [];\n    dependencies.forEach(dependency => {\n        statements.push(...dependency.statements);\n    });\n    return statements.join('\\n');\n}\nfunction getGlobals(dependencies, options) {\n    const { globals, onerror, onwarn } = options;\n    const globalFn = getGlobalFn(globals);\n    return dependencies.map(d => {\n        let name = globalFn(d.source);\n        if (!name) {\n            if (d.name.startsWith('__import')) {\n                const error = new Error(`Could not determine name for imported module '${d.source}' – use options.globals`);\n                onerror(error);\n            }\n            else {\n                const warning = {\n                    code: `options-missing-globals`,\n                    message: `No name was supplied for imported module '${d.source}'. Guessing '${d.name}', but you should use options.globals`,\n                };\n                onwarn(warning);\n            }\n            name = d.name;\n        }\n        return name;\n    });\n}\nfunction getGlobalFn(globals) {\n    if (typeof globals === 'function')\n        return globals;\n    if (typeof globals === 'object') {\n        return id => globals[id];\n    }\n    return () => undefined;\n}\n\nfunction clone(node) {\n    const cloned = {};\n    for (const key in node) {\n        const value = node[key];\n        if (Array.isArray(value)) {\n            cloned[key] = value.map(clone);\n        }\n        else if (value && typeof value === 'object') {\n            cloned[key] = clone(value);\n        }\n        else {\n            cloned[key] = value;\n        }\n    }\n    return cloned;\n}\n\nconst test = typeof process !== 'undefined' && process.env.TEST;\n\nconst svgAttributes = 'accent-height accumulate additive alignment-baseline allowReorder alphabetic amplitude arabic-form ascent attributeName attributeType autoReverse azimuth baseFrequency baseline-shift baseProfile bbox begin bias by calcMode cap-height class clip clipPathUnits clip-path clip-rule color color-interpolation color-interpolation-filters color-profile color-rendering contentScriptType contentStyleType cursor cx cy d decelerate descent diffuseConstant direction display divisor dominant-baseline dur dx dy edgeMode elevation enable-background end exponent externalResourcesRequired fill fill-opacity fill-rule filter filterRes filterUnits flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight format from fr fx fy g1 g2 glyph-name glyph-orientation-horizontal glyph-orientation-vertical glyphRef gradientTransform gradientUnits hanging height href horiz-adv-x horiz-origin-x id ideographic image-rendering in in2 intercept k k1 k2 k3 k4 kernelMatrix kernelUnitLength kerning keyPoints keySplines keyTimes lang lengthAdjust letter-spacing lighting-color limitingConeAngle local marker-end marker-mid marker-start markerHeight markerUnits markerWidth mask maskContentUnits maskUnits mathematical max media method min mode name numOctaves offset onabort onactivate onbegin onclick onend onerror onfocusin onfocusout onload onmousedown onmousemove onmouseout onmouseover onmouseup onrepeat onresize onscroll onunload opacity operator order orient orientation origin overflow overline-position overline-thickness panose-1 paint-order pathLength patternContentUnits patternTransform patternUnits pointer-events points pointsAtX pointsAtY pointsAtZ preserveAlpha preserveAspectRatio primitiveUnits r radius refX refY rendering-intent repeatCount repeatDur requiredExtensions requiredFeatures restart result rotate rx ry scale seed shape-rendering slope spacing specularConstant specularExponent speed spreadMethod startOffset stdDeviation stemh stemv stitchTiles stop-color stop-opacity strikethrough-position strikethrough-thickness string stroke stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width style surfaceScale systemLanguage tabindex tableValues target targetX targetY text-anchor text-decoration text-rendering textLength to transform type u1 u2 underline-position underline-thickness unicode unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical values version vert-adv-y vert-origin-x vert-origin-y viewBox viewTarget visibility width widths word-spacing writing-mode x x-height x1 x2 xChannelSelector xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xml:lang xml:space y y1 y2 yChannelSelector z zoomAndPan'.split(' ');\nconst svgAttributeLookup = new Map();\nsvgAttributes.forEach(name => {\n    svgAttributeLookup.set(name.toLowerCase(), name);\n});\nfunction fixAttributeCasing(name) {\n    name = name.toLowerCase();\n    return svgAttributeLookup.get(name) || name;\n}\n\nconst binaryOperators = {\n    '**': 15,\n    '*': 14,\n    '/': 14,\n    '%': 14,\n    '+': 13,\n    '-': 13,\n    '<<': 12,\n    '>>': 12,\n    '>>>': 12,\n    '<': 11,\n    '<=': 11,\n    '>': 11,\n    '>=': 11,\n    'in': 11,\n    'instanceof': 11,\n    '==': 10,\n    '!=': 10,\n    '===': 10,\n    '!==': 10,\n    '&': 9,\n    '^': 8,\n    '|': 7\n};\nconst logicalOperators = {\n    '&&': 6,\n    '||': 5\n};\nconst precedence = {\n    Literal: () => 21,\n    Identifier: () => 21,\n    ParenthesizedExpression: () => 20,\n    MemberExpression: () => 19,\n    NewExpression: () => 19,\n    CallExpression: () => 19,\n    UpdateExpression: () => 17,\n    UnaryExpression: () => 16,\n    BinaryExpression: (expression) => binaryOperators[expression.operator],\n    LogicalExpression: (expression) => logicalOperators[expression.operator],\n    ConditionalExpression: () => 4,\n    AssignmentExpression: () => 3,\n    YieldExpression: () => 2,\n    SpreadElement: () => 1,\n    SequenceExpression: () => 0\n};\nfunction getExpressionPrecedence(expression) {\n    return expression.type in precedence ? precedence[expression.type](expression) : 0;\n}\n\nclass Attribute {\n    constructor({ generator, name, value, parent }) {\n        this.type = 'Attribute';\n        this.generator = generator;\n        this.parent = parent;\n        this.name = name;\n        this.value = value;\n    }\n    render(block) {\n        const node = this.parent;\n        const name = fixAttributeCasing(this.name);\n        if (name === 'style') {\n            const styleProps = optimizeStyle(this.value);\n            if (styleProps) {\n                this.renderStyle(block, styleProps);\n                return;\n            }\n        }\n        let metadata = node.namespace ? null : attributeLookup[name];\n        if (metadata && metadata.appliesTo && !~metadata.appliesTo.indexOf(node.name))\n            metadata = null;\n        const isIndirectlyBoundValue = name === 'value' &&\n            (node.name === 'option' || // TODO check it's actually bound\n                (node.name === 'input' &&\n                    node.attributes.find((attribute) => attribute.type === 'Binding' && /checked|group/.test(attribute.name))));\n        const propertyName = isIndirectlyBoundValue\n            ? '__value'\n            : metadata && metadata.propertyName;\n        // xlink is a special case... we could maybe extend this to generic\n        // namespaced attributes but I'm not sure that's applicable in\n        // HTML5?\n        const method = name.slice(0, 6) === 'xlink:'\n            ? '@setXlinkAttribute'\n            : '@setAttribute';\n        const isDynamic = this.isDynamic();\n        const isLegacyInputType = this.generator.legacy && name === 'type' && this.parent.name === 'input';\n        const isDataSet = /^data-/.test(name) && !this.generator.legacy && !node.namespace;\n        const camelCaseName = isDataSet ? name.replace('data-', '').replace(/(-\\w)/g, function (m) {\n            return m[1].toUpperCase();\n        }) : name;\n        if (isDynamic) {\n            let value;\n            const allDependencies = new Set();\n            let shouldCache;\n            let hasChangeableIndex;\n            // TODO some of this code is repeated in Tag.ts — would be good to\n            // DRY it out if that's possible without introducing crazy indirection\n            if (this.value.length === 1) {\n                // single {{tag}} — may be a non-string\n                const { expression } = this.value[0];\n                const { indexes } = block.contextualise(expression);\n                const { dependencies, snippet } = this.value[0].metadata;\n                value = snippet;\n                dependencies.forEach(d => {\n                    allDependencies.add(d);\n                });\n                hasChangeableIndex = Array.from(indexes).some(index => block.changeableIndexes.get(index));\n                shouldCache = (expression.type !== 'Identifier' ||\n                    block.contexts.has(expression.name) ||\n                    hasChangeableIndex);\n            }\n            else {\n                // '{{foo}} {{bar}}' — treat as string concatenation\n                value =\n                    (this.value[0].type === 'Text' ? '' : `\"\" + `) +\n                        this.value\n                            .map((chunk) => {\n                            if (chunk.type === 'Text') {\n                                return stringify(chunk.data);\n                            }\n                            else {\n                                const { indexes } = block.contextualise(chunk.expression);\n                                const { dependencies, snippet } = chunk.metadata;\n                                if (Array.from(indexes).some(index => block.changeableIndexes.get(index))) {\n                                    hasChangeableIndex = true;\n                                }\n                                dependencies.forEach(d => {\n                                    allDependencies.add(d);\n                                });\n                                return getExpressionPrecedence(chunk.expression) <= 13 ? `(${snippet})` : snippet;\n                            }\n                        })\n                            .join(' + ');\n                shouldCache = true;\n            }\n            const isSelectValueAttribute = name === 'value' && node.name === 'select';\n            const last = (shouldCache || isSelectValueAttribute) && block.getUniqueName(`${node.var}_${name.replace(/[^a-zA-Z_$]/g, '_')}_value`);\n            if (shouldCache || isSelectValueAttribute)\n                block.addVariable(last);\n            let updater;\n            const init = shouldCache ? `${last} = ${value}` : value;\n            if (isLegacyInputType) {\n                block.builders.hydrate.addLine(`@setInputType(${node.var}, ${init});`);\n                updater = `@setInputType(${node.var}, ${shouldCache ? last : value});`;\n            }\n            else if (isSelectValueAttribute) {\n                // annoying special case\n                const isMultipleSelect = node.getStaticAttributeValue('multiple');\n                const i = block.getUniqueName('i');\n                const option = block.getUniqueName('option');\n                const ifStatement = isMultipleSelect\n                    ? deindent `\n\t\t\t\t\t\t${option}.selected = ~${last}.indexOf(${option}.__value);`\n                    : deindent `\n\t\t\t\t\t\tif (${option}.__value === ${last}) {\n\t\t\t\t\t\t\t${option}.selected = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}`;\n                updater = deindent `\n\t\t\t\t\tfor (var ${i} = 0; ${i} < ${node.var}.options.length; ${i} += 1) {\n\t\t\t\t\t\tvar ${option} = ${node.var}.options[${i}];\n\n\t\t\t\t\t\t${ifStatement}\n\t\t\t\t\t}\n\t\t\t\t`;\n                block.builders.hydrate.addBlock(deindent `\n\t\t\t\t\t${last} = ${value};\n\t\t\t\t\t${updater}\n\t\t\t\t`);\n                block.builders.update.addLine(`${last} = ${value};`);\n            }\n            else if (propertyName) {\n                block.builders.hydrate.addLine(`${node.var}.${propertyName} = ${init};`);\n                updater = `${node.var}.${propertyName} = ${shouldCache ? last : value};`;\n            }\n            else if (isDataSet) {\n                block.builders.hydrate.addLine(`${node.var}.dataset.${camelCaseName} = ${init};`);\n                updater = `${node.var}.dataset.${camelCaseName} = ${shouldCache ? last : value};`;\n            }\n            else {\n                block.builders.hydrate.addLine(`${method}(${node.var}, \"${name}\", ${init});`);\n                updater = `${method}(${node.var}, \"${name}\", ${shouldCache ? last : value});`;\n            }\n            if (allDependencies.size || hasChangeableIndex || isSelectValueAttribute) {\n                const dependencies = Array.from(allDependencies);\n                const changedCheck = ((block.hasOutroMethod ? `#outroing || ` : '') +\n                    dependencies.map(dependency => `changed.${dependency}`).join(' || '));\n                const updateCachedValue = `${last} !== (${last} = ${value})`;\n                const condition = shouldCache ?\n                    (dependencies.length ? `(${changedCheck}) && ${updateCachedValue}` : updateCachedValue) :\n                    changedCheck;\n                block.builders.update.addConditional(condition, updater);\n            }\n        }\n        else {\n            const value = this.value === true\n                ? 'true'\n                : this.value.length === 0 ? `\"\"` : stringify(this.value[0].data);\n            const statement = (isLegacyInputType\n                ? `@setInputType(${node.var}, ${value});`\n                : propertyName\n                    ? `${node.var}.${propertyName} = ${value};`\n                    : isDataSet\n                        ? `${node.var}.dataset.${camelCaseName} = ${value};`\n                        : `${method}(${node.var}, \"${name}\", ${value});`);\n            block.builders.hydrate.addLine(statement);\n            // special case – autofocus. has to be handled in a bit of a weird way\n            if (this.value === true && name === 'autofocus') {\n                block.autofocus = node.var;\n            }\n        }\n        if (isIndirectlyBoundValue) {\n            const updateValue = `${node.var}.value = ${node.var}.__value;`;\n            block.builders.hydrate.addLine(updateValue);\n            if (isDynamic)\n                block.builders.update.addLine(updateValue);\n        }\n    }\n    renderStyle(block, styleProps) {\n        styleProps.forEach((prop) => {\n            let value;\n            if (isDynamic$1(prop.value)) {\n                const allDependencies = new Set();\n                let hasChangeableIndex;\n                value =\n                    ((prop.value.length === 1 || prop.value[0].type === 'Text') ? '' : `\"\" + `) +\n                        prop.value\n                            .map((chunk) => {\n                            if (chunk.type === 'Text') {\n                                return stringify(chunk.data);\n                            }\n                            else {\n                                const { indexes } = block.contextualise(chunk.expression);\n                                const { dependencies, snippet } = chunk.metadata;\n                                if (Array.from(indexes).some(index => block.changeableIndexes.get(index))) {\n                                    hasChangeableIndex = true;\n                                }\n                                dependencies.forEach(d => {\n                                    allDependencies.add(d);\n                                });\n                                return getExpressionPrecedence(chunk.expression) <= 13 ? `( ${snippet} )` : snippet;\n                            }\n                        })\n                            .join(' + ');\n                if (allDependencies.size || hasChangeableIndex) {\n                    const dependencies = Array.from(allDependencies);\n                    const condition = ((block.hasOutroMethod ? `#outroing || ` : '') +\n                        dependencies.map(dependency => `changed.${dependency}`).join(' || '));\n                    block.builders.update.addConditional(condition, `@setStyle(${this.parent.var}, \"${prop.key}\", ${value});`);\n                }\n            }\n            else {\n                value = stringify(prop.value[0].data);\n            }\n            block.builders.hydrate.addLine(`@setStyle(${this.parent.var}, \"${prop.key}\", ${value});`);\n        });\n    }\n    isDynamic() {\n        if (this.value === true || this.value.length === 0)\n            return false;\n        if (this.value.length > 1)\n            return true;\n        return this.value[0].type !== 'Text';\n    }\n}\n// source: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes\nconst attributeLookup = {\n    accept: { appliesTo: ['form', 'input'] },\n    'accept-charset': { propertyName: 'acceptCharset', appliesTo: ['form'] },\n    accesskey: { propertyName: 'accessKey' },\n    action: { appliesTo: ['form'] },\n    align: {\n        appliesTo: [\n            'applet',\n            'caption',\n            'col',\n            'colgroup',\n            'hr',\n            'iframe',\n            'img',\n            'table',\n            'tbody',\n            'td',\n            'tfoot',\n            'th',\n            'thead',\n            'tr',\n        ],\n    },\n    allowfullscreen: { propertyName: 'allowFullscreen', appliesTo: ['iframe'] },\n    alt: { appliesTo: ['applet', 'area', 'img', 'input'] },\n    async: { appliesTo: ['script'] },\n    autocomplete: { appliesTo: ['form', 'input'] },\n    autofocus: { appliesTo: ['button', 'input', 'keygen', 'select', 'textarea'] },\n    autoplay: { appliesTo: ['audio', 'video'] },\n    autosave: { appliesTo: ['input'] },\n    bgcolor: {\n        propertyName: 'bgColor',\n        appliesTo: [\n            'body',\n            'col',\n            'colgroup',\n            'marquee',\n            'table',\n            'tbody',\n            'tfoot',\n            'td',\n            'th',\n            'tr',\n        ],\n    },\n    border: { appliesTo: ['img', 'object', 'table'] },\n    buffered: { appliesTo: ['audio', 'video'] },\n    challenge: { appliesTo: ['keygen'] },\n    charset: { appliesTo: ['meta', 'script'] },\n    checked: { appliesTo: ['command', 'input'] },\n    cite: { appliesTo: ['blockquote', 'del', 'ins', 'q'] },\n    class: { propertyName: 'className' },\n    code: { appliesTo: ['applet'] },\n    codebase: { propertyName: 'codeBase', appliesTo: ['applet'] },\n    color: { appliesTo: ['basefont', 'font', 'hr'] },\n    cols: { appliesTo: ['textarea'] },\n    colspan: { propertyName: 'colSpan', appliesTo: ['td', 'th'] },\n    content: { appliesTo: ['meta'] },\n    contenteditable: { propertyName: 'contentEditable' },\n    contextmenu: {},\n    controls: { appliesTo: ['audio', 'video'] },\n    coords: { appliesTo: ['area'] },\n    data: { appliesTo: ['object'] },\n    datetime: { propertyName: 'dateTime', appliesTo: ['del', 'ins', 'time'] },\n    default: { appliesTo: ['track'] },\n    defer: { appliesTo: ['script'] },\n    dir: {},\n    dirname: { propertyName: 'dirName', appliesTo: ['input', 'textarea'] },\n    disabled: {\n        appliesTo: [\n            'button',\n            'command',\n            'fieldset',\n            'input',\n            'keygen',\n            'optgroup',\n            'option',\n            'select',\n            'textarea',\n        ],\n    },\n    download: { appliesTo: ['a', 'area'] },\n    draggable: {},\n    dropzone: {},\n    enctype: { appliesTo: ['form'] },\n    for: { propertyName: 'htmlFor', appliesTo: ['label', 'output'] },\n    form: {\n        appliesTo: [\n            'button',\n            'fieldset',\n            'input',\n            'keygen',\n            'label',\n            'meter',\n            'object',\n            'output',\n            'progress',\n            'select',\n            'textarea',\n        ],\n    },\n    formaction: { appliesTo: ['input', 'button'] },\n    headers: { appliesTo: ['td', 'th'] },\n    height: {\n        appliesTo: ['canvas', 'embed', 'iframe', 'img', 'input', 'object', 'video'],\n    },\n    hidden: {},\n    high: { appliesTo: ['meter'] },\n    href: { appliesTo: ['a', 'area', 'base', 'link'] },\n    hreflang: { appliesTo: ['a', 'area', 'link'] },\n    'http-equiv': { propertyName: 'httpEquiv', appliesTo: ['meta'] },\n    icon: { appliesTo: ['command'] },\n    id: {},\n    indeterminate: { appliesTo: ['input'] },\n    ismap: { propertyName: 'isMap', appliesTo: ['img'] },\n    itemprop: {},\n    keytype: { appliesTo: ['keygen'] },\n    kind: { appliesTo: ['track'] },\n    label: { appliesTo: ['track'] },\n    lang: {},\n    language: { appliesTo: ['script'] },\n    loop: { appliesTo: ['audio', 'bgsound', 'marquee', 'video'] },\n    low: { appliesTo: ['meter'] },\n    manifest: { appliesTo: ['html'] },\n    max: { appliesTo: ['input', 'meter', 'progress'] },\n    maxlength: { propertyName: 'maxLength', appliesTo: ['input', 'textarea'] },\n    media: { appliesTo: ['a', 'area', 'link', 'source', 'style'] },\n    method: { appliesTo: ['form'] },\n    min: { appliesTo: ['input', 'meter'] },\n    multiple: { appliesTo: ['input', 'select'] },\n    muted: { appliesTo: ['audio', 'video'] },\n    name: {\n        appliesTo: [\n            'button',\n            'form',\n            'fieldset',\n            'iframe',\n            'input',\n            'keygen',\n            'object',\n            'output',\n            'select',\n            'textarea',\n            'map',\n            'meta',\n            'param',\n        ],\n    },\n    novalidate: { propertyName: 'noValidate', appliesTo: ['form'] },\n    open: { appliesTo: ['details'] },\n    optimum: { appliesTo: ['meter'] },\n    pattern: { appliesTo: ['input'] },\n    ping: { appliesTo: ['a', 'area'] },\n    placeholder: { appliesTo: ['input', 'textarea'] },\n    poster: { appliesTo: ['video'] },\n    preload: { appliesTo: ['audio', 'video'] },\n    radiogroup: { appliesTo: ['command'] },\n    readonly: { propertyName: 'readOnly', appliesTo: ['input', 'textarea'] },\n    rel: { appliesTo: ['a', 'area', 'link'] },\n    required: { appliesTo: ['input', 'select', 'textarea'] },\n    reversed: { appliesTo: ['ol'] },\n    rows: { appliesTo: ['textarea'] },\n    rowspan: { propertyName: 'rowSpan', appliesTo: ['td', 'th'] },\n    sandbox: { appliesTo: ['iframe'] },\n    scope: { appliesTo: ['th'] },\n    scoped: { appliesTo: ['style'] },\n    seamless: { appliesTo: ['iframe'] },\n    selected: { appliesTo: ['option'] },\n    shape: { appliesTo: ['a', 'area'] },\n    size: { appliesTo: ['input', 'select'] },\n    sizes: { appliesTo: ['link', 'img', 'source'] },\n    span: { appliesTo: ['col', 'colgroup'] },\n    spellcheck: {},\n    src: {\n        appliesTo: [\n            'audio',\n            'embed',\n            'iframe',\n            'img',\n            'input',\n            'script',\n            'source',\n            'track',\n            'video',\n        ],\n    },\n    srcdoc: { appliesTo: ['iframe'] },\n    srclang: { appliesTo: ['track'] },\n    srcset: { appliesTo: ['img'] },\n    start: { appliesTo: ['ol'] },\n    step: { appliesTo: ['input'] },\n    style: { propertyName: 'style.cssText' },\n    summary: { appliesTo: ['table'] },\n    tabindex: { propertyName: 'tabIndex' },\n    target: { appliesTo: ['a', 'area', 'base', 'form'] },\n    title: {},\n    type: {\n        appliesTo: [\n            'button',\n            'command',\n            'embed',\n            'object',\n            'script',\n            'source',\n            'style',\n            'menu',\n        ],\n    },\n    usemap: { propertyName: 'useMap', appliesTo: ['img', 'input', 'object'] },\n    value: {\n        appliesTo: [\n            'button',\n            'option',\n            'input',\n            'li',\n            'meter',\n            'progress',\n            'param',\n            'select',\n            'textarea',\n        ],\n    },\n    volume: { appliesTo: ['audio', 'video'] },\n    width: {\n        appliesTo: ['canvas', 'embed', 'iframe', 'img', 'input', 'object', 'video'],\n    },\n    wrap: { appliesTo: ['textarea'] },\n};\nObject.keys(attributeLookup).forEach(name => {\n    const metadata = attributeLookup[name];\n    if (!metadata.propertyName)\n        metadata.propertyName = name;\n});\nfunction optimizeStyle(value) {\n    const props = [];\n    let chunks = value.slice();\n    while (chunks.length) {\n        const chunk = chunks[0];\n        if (chunk.type !== 'Text')\n            return null;\n        const keyMatch = /^\\s*([\\w-]+):\\s*/.exec(chunk.data);\n        if (!keyMatch)\n            return null;\n        const key = keyMatch[1];\n        const offset = keyMatch.index + keyMatch[0].length;\n        const remainingData = chunk.data.slice(offset);\n        if (remainingData) {\n            chunks[0] = {\n                start: chunk.start + offset,\n                end: chunk.end,\n                type: 'Text',\n                data: remainingData\n            };\n        }\n        else {\n            chunks.shift();\n        }\n        const result = getStyleValue(chunks);\n        if (!result)\n            return null;\n        props.push({ key, value: result.value });\n        chunks = result.chunks;\n    }\n    return props;\n}\nfunction getStyleValue(chunks) {\n    const value = [];\n    let inUrl = false;\n    let quoteMark = null;\n    let escaped = false;\n    while (chunks.length) {\n        const chunk = chunks.shift();\n        if (chunk.type === 'Text') {\n            let c = 0;\n            while (c < chunk.data.length) {\n                const char = chunk.data[c];\n                if (escaped) {\n                    escaped = false;\n                }\n                else if (char === '\\\\') {\n                    escaped = true;\n                }\n                else if (char === quoteMark) {\n                }\n                else if (char === '\"' || char === \"'\") {\n                    quoteMark = char;\n                }\n                else if (char === ')' && inUrl) {\n                    inUrl = false;\n                }\n                else if (char === 'u' && chunk.data.slice(c, c + 4) === 'url(') {\n                    inUrl = true;\n                }\n                else if (char === ';' && !inUrl && !quoteMark) {\n                    break;\n                }\n                c += 1;\n            }\n            if (c > 0) {\n                value.push({\n                    type: 'Text',\n                    start: chunk.start,\n                    end: chunk.start + c,\n                    data: chunk.data.slice(0, c)\n                });\n            }\n            while (/[;\\s]/.test(chunk.data[c]))\n                c += 1;\n            const remainingData = chunk.data.slice(c);\n            if (remainingData) {\n                chunks.unshift({\n                    start: chunk.start + c,\n                    end: chunk.end,\n                    type: 'Text',\n                    data: remainingData\n                });\n                break;\n            }\n        }\n        else {\n            value.push(chunk);\n        }\n    }\n    return {\n        chunks,\n        value\n    };\n}\nfunction isDynamic$1(value) {\n    return value.length > 1 || value[0].type !== 'Text';\n}\n\nlet Node$1 = class Node {\n    constructor(data) {\n        Object.assign(this, data);\n    }\n    cannotUseInnerHTML() {\n        if (this.canUseInnerHTML !== false) {\n            this.canUseInnerHTML = false;\n            if (this.parent) {\n                if (!this.parent.cannotUseInnerHTML)\n                    console.log(this.parent.type, this.type);\n                this.parent.cannotUseInnerHTML();\n            }\n        }\n    }\n    init(block, stripWhitespace, nextSibling) {\n        // implemented by subclasses\n    }\n    initChildren(block, stripWhitespace, nextSibling) {\n        // glue text nodes together\n        const cleaned = [];\n        let lastChild;\n        let windowComponent;\n        this.children.forEach((child) => {\n            if (child.type === 'Comment')\n                return;\n            // special case — this is an easy way to remove whitespace surrounding\n            // <:Window/>. lil hacky but it works\n            if (child.type === 'Window') {\n                windowComponent = child;\n                return;\n            }\n            if (child.type === 'Text' && lastChild && lastChild.type === 'Text') {\n                lastChild.data += child.data;\n                lastChild.end = child.end;\n            }\n            else {\n                if (child.type === 'Text' && stripWhitespace && cleaned.length === 0) {\n                    child.data = trimStart(child.data);\n                    if (child.data)\n                        cleaned.push(child);\n                }\n                else {\n                    cleaned.push(child);\n                }\n            }\n            lastChild = child;\n        });\n        lastChild = null;\n        cleaned.forEach((child, i) => {\n            child.canUseInnerHTML = !this.generator.hydratable;\n            child.init(block, stripWhitespace, cleaned[i + 1] || nextSibling);\n            if (child.shouldSkip)\n                return;\n            if (lastChild)\n                lastChild.next = child;\n            child.prev = lastChild;\n            lastChild = child;\n        });\n        // We want to remove trailing whitespace inside an element/component/block,\n        // *unless* there is no whitespace between this node and its next sibling\n        if (stripWhitespace && lastChild && lastChild.type === 'Text') {\n            const shouldTrim = (nextSibling ? (nextSibling.type === 'Text' && /^\\s/.test(nextSibling.data)) : !this.hasAncestor('EachBlock'));\n            if (shouldTrim) {\n                lastChild.data = trimEnd(lastChild.data);\n                if (!lastChild.data) {\n                    cleaned.pop();\n                    lastChild = cleaned[cleaned.length - 1];\n                    lastChild.next = null;\n                }\n            }\n        }\n        this.children = cleaned;\n        if (windowComponent)\n            cleaned.unshift(windowComponent);\n    }\n    build(block, parentNode, parentNodes) {\n        // implemented by subclasses\n    }\n    isDomNode() {\n        return this.type === 'Element' || this.type === 'Text' || this.type === 'MustacheTag';\n    }\n    hasAncestor(type) {\n        return this.parent ?\n            this.parent.type === type || this.parent.hasAncestor(type) :\n            false;\n    }\n    findNearest(selector) {\n        if (selector.test(this.type))\n            return this;\n        if (this.parent)\n            return this.parent.findNearest(selector);\n    }\n    getOrCreateAnchor(block, parentNode, parentNodes) {\n        // TODO use this in EachBlock and IfBlock — tricky because\n        // children need to be created first\n        const needsAnchor = this.next ? !this.next.isDomNode() : !parentNode || !this.parent.isDomNode();\n        const anchor = needsAnchor\n            ? block.getUniqueName(`${this.var}_anchor`)\n            : (this.next && this.next.var) || 'null';\n        if (needsAnchor) {\n            block.addElement(anchor, `@createComment()`, parentNodes && `@createComment()`, parentNode);\n        }\n        return anchor;\n    }\n    getUpdateMountNode(anchor) {\n        return this.parent.isDomNode() ? this.parent.var : `${anchor}.parentNode`;\n    }\n    remount(name) {\n        return `${this.var}.m(${name}._slotted${this.generator.legacy ? `[\"default\"]` : `.default`}, null);`;\n    }\n};\n\nfunction createDebuggingComment(node, generator) {\n    const { locate, source } = generator;\n    let c = node.start;\n    if (node.type === 'ElseBlock') {\n        while (source[c - 1] !== '{')\n            c -= 1;\n        while (source[c - 1] === '{')\n            c -= 1;\n    }\n    let d = node.expression ? node.expression.end : c;\n    while (source[d] !== '}')\n        d += 1;\n    while (source[d] === '}')\n        d += 1;\n    const start = locate(c);\n    const loc = `(${start.line + 1}:${start.column})`;\n    return `${loc} ${source.slice(c, d)}`.replace(/\\s/g, ' ');\n}\n\nclass AwaitBlock extends Node$1 {\n    init(block, stripWhitespace, nextSibling) {\n        this.cannotUseInnerHTML();\n        this.var = block.getUniqueName('await_block');\n        block.addDependencies(this.metadata.dependencies);\n        let dynamic = false;\n        [\n            ['pending', null],\n            ['then', this.value],\n            ['catch', this.error]\n        ].forEach(([status, arg]) => {\n            const child = this[status];\n            child.block = block.child({\n                comment: createDebuggingComment(child, this.generator),\n                name: this.generator.getUniqueName(`create_${status}_block`),\n                contexts: new Map(block.contexts),\n                contextTypes: new Map(block.contextTypes)\n            });\n            if (arg) {\n                child.block.context = arg;\n                child.block.contexts.set(arg, arg); // TODO should be using getUniqueName\n                child.block.contextTypes.set(arg, status);\n            }\n            child.initChildren(child.block, stripWhitespace, nextSibling);\n            this.generator.blocks.push(child.block);\n            if (child.block.dependencies.size > 0) {\n                dynamic = true;\n                block.addDependencies(child.block.dependencies);\n            }\n        });\n        this.pending.block.hasUpdateMethod = dynamic;\n        this.then.block.hasUpdateMethod = dynamic;\n        this.catch.block.hasUpdateMethod = dynamic;\n    }\n    build(block, parentNode, parentNodes) {\n        const name = this.var;\n        const anchor = this.getOrCreateAnchor(block, parentNode, parentNodes);\n        const updateMountNode = this.getUpdateMountNode(anchor);\n        block.contextualise(this.expression);\n        const { snippet } = this.metadata;\n        const promise = block.getUniqueName(`promise`);\n        const resolved = block.getUniqueName(`resolved`);\n        const await_block = block.getUniqueName(`await_block`);\n        const await_block_type = block.getUniqueName(`await_block_type`);\n        const token = block.getUniqueName(`token`);\n        const await_token = block.getUniqueName(`await_token`);\n        const handle_promise = block.getUniqueName(`handle_promise`);\n        const replace_await_block = block.getUniqueName(`replace_await_block`);\n        const old_block = block.getUniqueName(`old_block`);\n        const value = block.getUniqueName(`value`);\n        const error = block.getUniqueName(`error`);\n        const create_pending_block = this.pending.block.name;\n        const create_then_block = this.then.block.name;\n        const create_catch_block = this.catch.block.name;\n        block.addVariable(await_block);\n        block.addVariable(await_block_type);\n        block.addVariable(await_token);\n        block.addVariable(promise);\n        block.addVariable(resolved);\n        // the `#component.root.set({})` below is just a cheap way to flush\n        // any oncreate handlers. We could have a dedicated `flush()` method\n        // but it's probably not worth it\n        block.builders.init.addBlock(deindent `\n\t\t\tfunction ${replace_await_block}(${token}, type, state) {\n\t\t\t\tif (${token} !== ${await_token}) return;\n\n\t\t\t\tvar ${old_block} = ${await_block};\n\t\t\t\t${await_block} = type && (${await_block_type} = type)(#component, state);\n\n\t\t\t\tif (${old_block}) {\n\t\t\t\t\t${old_block}.u();\n\t\t\t\t\t${old_block}.d();\n\t\t\t\t\t${await_block}.c();\n\t\t\t\t\t${await_block}.m(${updateMountNode}, ${anchor});\n\n\t\t\t\t\t#component.root.set({});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction ${handle_promise}(${promise}, state) {\n\t\t\t\tvar ${token} = ${await_token} = {};\n\n\t\t\t\tif (@isPromise(${promise})) {\n\t\t\t\t\t${promise}.then(function(${value}) {\n\t\t\t\t\t\t${this.then.block.context ? deindent `\n\t\t\t\t\t\t\tvar state = #component.get();\n\t\t\t\t\t\t\t${resolved} = { ${this.then.block.context}: ${value} };\n\t\t\t\t\t\t\t${replace_await_block}(${token}, ${create_then_block}, @assign(@assign({}, state), ${resolved}));\n\t\t\t\t\t\t` : deindent `\n\t\t\t\t\t\t\t${replace_await_block}(${token}, null, null);\n\t\t\t\t\t\t`}\n\t\t\t\t\t}, function (${error}) {\n\t\t\t\t\t\t${this.catch.block.context ? deindent `\n\t\t\t\t\t\t\tvar state = #component.get();\n\t\t\t\t\t\t\t${resolved} = { ${this.catch.block.context}: ${error} };\n\t\t\t\t\t\t\t${replace_await_block}(${token}, ${create_catch_block}, @assign(@assign({}, state), ${resolved}));\n\t\t\t\t\t\t` : deindent `\n\t\t\t\t\t\t\t${replace_await_block}(${token}, null, null);\n\t\t\t\t\t\t`}\n\t\t\t\t\t});\n\n\t\t\t\t\t// if we previously had a then/catch block, destroy it\n\t\t\t\t\tif (${await_block_type} !== ${create_pending_block}) {\n\t\t\t\t\t\t${replace_await_block}(${token}, ${create_pending_block}, state);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t${resolved} = { ${this.then.block.context}: ${promise} };\n\t\t\t\t\tif (${await_block_type} !== ${create_then_block}) {\n\t\t\t\t\t\t${replace_await_block}(${token}, ${create_then_block}, @assign(@assign({}, state), ${resolved}));\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t${handle_promise}(${promise} = ${snippet}, state);\n\t\t`);\n        block.builders.create.addBlock(deindent `\n\t\t\t${await_block}.c();\n\t\t`);\n        if (parentNodes) {\n            block.builders.claim.addBlock(deindent `\n\t\t\t\t${await_block}.l(${parentNodes});\n\t\t\t`);\n        }\n        const initialMountNode = parentNode || '#target';\n        const anchorNode = parentNode ? 'null' : 'anchor';\n        block.builders.mount.addBlock(deindent `\n\t\t\t${await_block}.m(${initialMountNode}, ${anchorNode});\n\t\t`);\n        const conditions = [];\n        if (this.metadata.dependencies) {\n            conditions.push(`(${this.metadata.dependencies.map(dep => `'${dep}' in changed`).join(' || ')})`);\n        }\n        conditions.push(`${promise} !== (${promise} = ${snippet})`, `${handle_promise}(${promise}, state)`);\n        if (this.pending.block.hasUpdateMethod) {\n            block.builders.update.addBlock(deindent `\n\t\t\t\tif (${conditions.join(' && ')}) {\n\t\t\t\t\t// nothing\n\t\t\t\t} else {\n\t\t\t\t\t${await_block}.p(changed, @assign(@assign({}, state), ${resolved}));\n\t\t\t\t}\n\t\t\t`);\n        }\n        else {\n            block.builders.update.addBlock(deindent `\n\t\t\t\tif (${conditions.join(' && ')}) {\n\t\t\t\t\t${await_block}.c();\n\t\t\t\t\t${await_block}.m(${anchor}.parentNode, ${anchor});\n\t\t\t\t}\n\t\t\t`);\n        }\n        block.builders.unmount.addBlock(deindent `\n\t\t\t${await_block}.u();\n\t\t`);\n        block.builders.destroy.addBlock(deindent `\n\t\t\t${await_token} = null;\n\t\t\t${await_block}.d();\n\t\t`);\n        [this.pending, this.then, this.catch].forEach(status => {\n            status.children.forEach(child => {\n                child.build(status.block, null, 'nodes');\n            });\n        });\n    }\n}\n\nclass Action extends Node$1 {\n}\n\nfunction getObject(node) {\n    while (node.type === 'MemberExpression')\n        node = node.object;\n    return node;\n}\n\nfunction getTailSnippet(node) {\n    const end = node.end;\n    while (node.type === 'MemberExpression')\n        node = node.object;\n    const start = node.end;\n    return `[✂${start}-${end}✂]`;\n}\n\nconst readOnlyMediaAttributes = new Set([\n    'duration',\n    'buffered',\n    'seekable',\n    'played'\n]);\nclass Binding extends Node$1 {\n    munge(block, allUsedContexts) {\n        const node = this.parent;\n        const needsLock = node.name !== 'input' || !/radio|checkbox|range|color/.test(node.getStaticAttributeValue('type'));\n        const isReadOnly = node.isMediaNode() && readOnlyMediaAttributes.has(this.name);\n        let updateCondition;\n        const { name } = getObject(this.value);\n        const { contexts } = block.contextualise(this.value);\n        const { snippet } = this.metadata;\n        // special case: if you have e.g. `<input type=checkbox bind:checked=selected.done>`\n        // and `selected` is an object chosen with a <select>, then when `checked` changes,\n        // we need to tell the component to update all the values `selected` might be\n        // pointing to\n        // TODO should this happen in preprocess?\n        const dependencies = this.metadata.dependencies.slice();\n        this.metadata.dependencies.forEach((prop) => {\n            const indirectDependencies = this.generator.indirectDependencies.get(prop);\n            if (indirectDependencies) {\n                indirectDependencies.forEach(indirectDependency => {\n                    if (!~dependencies.indexOf(indirectDependency))\n                        dependencies.push(indirectDependency);\n                });\n            }\n        });\n        contexts.forEach(context => {\n            allUsedContexts.add(context);\n        });\n        // view to model\n        const valueFromDom = getValueFromDom(this.generator, node, this);\n        const handler = getEventHandler(this.generator, block, name, snippet, this, dependencies, valueFromDom);\n        // model to view\n        let updateDom = getDomUpdater(node, this, snippet);\n        let initialUpdate = updateDom;\n        // special cases\n        if (this.name === 'group') {\n            const bindingGroup = getBindingGroup(this.generator, this.value);\n            block.builders.hydrate.addLine(`#component._bindingGroups[${bindingGroup}].push(${node.var});`);\n            block.builders.destroy.addLine(`#component._bindingGroups[${bindingGroup}].splice(#component._bindingGroups[${bindingGroup}].indexOf(${node.var}), 1);`);\n        }\n        if (this.name === 'currentTime' || this.name === 'volume') {\n            updateCondition = `!isNaN(${snippet})`;\n            if (this.name === 'currentTime')\n                initialUpdate = null;\n        }\n        if (this.name === 'paused') {\n            // this is necessary to prevent audio restarting by itself\n            const last = block.getUniqueName(`${node.var}_is_paused`);\n            block.addVariable(last, 'true');\n            updateCondition = `${last} !== (${last} = ${snippet})`;\n            updateDom = `${node.var}[${last} ? \"pause\" : \"play\"]();`;\n            initialUpdate = null;\n        }\n        return {\n            name: this.name,\n            object: name,\n            handler,\n            updateDom,\n            initialUpdate,\n            needsLock: !isReadOnly && needsLock,\n            updateCondition,\n            isReadOnlyMediaAttribute: this.isReadOnlyMediaAttribute()\n        };\n    }\n    isReadOnlyMediaAttribute() {\n        return readOnlyMediaAttributes.has(this.name);\n    }\n}\nfunction getDomUpdater(node, binding, snippet) {\n    if (binding.isReadOnlyMediaAttribute()) {\n        return null;\n    }\n    if (node.name === 'select') {\n        return node.getStaticAttributeValue('multiple') === true ?\n            `@selectOptions(${node.var}, ${snippet})` :\n            `@selectOption(${node.var}, ${snippet})`;\n    }\n    if (binding.name === 'group') {\n        const type = node.getStaticAttributeValue('type');\n        const condition = type === 'checkbox'\n            ? `~${snippet}.indexOf(${node.var}.__value)`\n            : `${node.var}.__value === ${snippet}`;\n        return `${node.var}.checked = ${condition};`;\n    }\n    return `${node.var}.${binding.name} = ${snippet};`;\n}\nfunction getBindingGroup(generator, value) {\n    const { parts } = flatten(value); // TODO handle cases involving computed member expressions\n    const keypath = parts.join('.');\n    // TODO handle contextual bindings — `keypath` should include unique ID of\n    // each block that provides context\n    let index = generator.bindingGroups.indexOf(keypath);\n    if (index === -1) {\n        index = generator.bindingGroups.length;\n        generator.bindingGroups.push(keypath);\n    }\n    return index;\n}\nfunction getEventHandler(generator, block, name, snippet, attribute, dependencies, value) {\n    let storeDependencies = [];\n    if (generator.options.store) {\n        storeDependencies = dependencies.filter(prop => prop[0] === '$').map(prop => prop.slice(1));\n        dependencies = dependencies.filter(prop => prop[0] !== '$');\n    }\n    if (block.contexts.has(name)) {\n        const tail = attribute.value.type === 'MemberExpression'\n            ? getTailSnippet(attribute.value)\n            : '';\n        const list = `context.${block.listNames.get(name)}`;\n        const index = `context.${block.indexNames.get(name)}`;\n        return {\n            usesContext: true,\n            usesState: true,\n            usesStore: storeDependencies.length > 0,\n            mutation: `${list}[${index}]${tail} = ${value};`,\n            props: dependencies.map(prop => `${prop}: state.${prop}`),\n            storeProps: storeDependencies.map(prop => `${prop}: $.${prop}`)\n        };\n    }\n    if (attribute.value.type === 'MemberExpression') {\n        // This is a little confusing, and should probably be tidied up\n        // at some point. It addresses a tricky bug (#893), wherein\n        // Svelte tries to `set()` a computed property, which throws an\n        // error in dev mode. a) it's possible that we should be\n        // replacing computations with *their* dependencies, and b)\n        // we should probably populate `generator.readonly` sooner so\n        // that we don't have to do the `.some()` here\n        dependencies = dependencies.filter(prop => !generator.computations.some(computation => computation.key === prop));\n        return {\n            usesContext: false,\n            usesState: true,\n            usesStore: storeDependencies.length > 0,\n            mutation: `${snippet} = ${value}`,\n            props: dependencies.map((prop) => `${prop}: state.${prop}`),\n            storeProps: storeDependencies.map(prop => `${prop}: $.${prop}`)\n        };\n    }\n    let props;\n    let storeProps;\n    if (generator.options.store && name[0] === '$') {\n        props = [];\n        storeProps = [`${name.slice(1)}: ${value}`];\n    }\n    else {\n        props = [`${name}: ${value}`];\n        storeProps = [];\n    }\n    return {\n        usesContext: false,\n        usesState: false,\n        usesStore: false,\n        mutation: null,\n        props,\n        storeProps\n    };\n}\nfunction getValueFromDom(generator, node, binding) {\n    // <select bind:value='selected>\n    if (node.name === 'select') {\n        return node.getStaticAttributeValue('multiple') === true ?\n            `@selectMultipleValue(${node.var})` :\n            `@selectValue(${node.var})`;\n    }\n    const type = node.getStaticAttributeValue('type');\n    // <input type='checkbox' bind:group='foo'>\n    if (binding.name === 'group') {\n        const bindingGroup = getBindingGroup(generator, binding.value);\n        if (type === 'checkbox') {\n            return `@getBindingGroupValue(#component._bindingGroups[${bindingGroup}])`;\n        }\n        return `${node.var}.__value`;\n    }\n    // <input type='range|number' bind:value>\n    if (type === 'range' || type === 'number') {\n        return `@toNumber(${node.var}.${binding.name})`;\n    }\n    if ((binding.name === 'buffered' || binding.name === 'seekable' || binding.name === 'played')) {\n        return `@timeRangesToArray(${node.var}.${binding.name})`;\n    }\n    // everything else\n    return `${node.var}.${binding.name}`;\n}\n\nclass CatchBlock extends Node$1 {\n}\n\nlet Comment$1 = class Comment extends Node$1 {\n};\n\nfunction stringifyProps(props) {\n    if (!props.length)\n        return '{}';\n    const joined = props.join(', ');\n    if (joined.length > 40) {\n        // make larger data objects readable\n        return `{\\n\\t${props.join(',\\n\\t')}\\n}`;\n    }\n    return `{ ${joined} }`;\n}\n\nfunction quoteIfNecessary(name, legacy) {\n    if (!isValidIdentifier(name) || (legacy && reservedNames.has(name)))\n        return `\"${name}\"`;\n    return name;\n}\n\nfunction mungeAttribute(attribute, block) {\n    if (attribute.type === 'Spread') {\n        block.contextualise(attribute.expression); // TODO remove\n        const { dependencies, snippet } = attribute.metadata;\n        return {\n            spread: true,\n            name: null,\n            value: snippet,\n            dynamic: dependencies.length > 0,\n            dependencies\n        };\n    }\n    if (attribute.value === true) {\n        // attributes without values, e.g. <textarea readonly>\n        return {\n            spread: false,\n            name: attribute.name,\n            value: true,\n            dynamic: false,\n            dependencies: []\n        };\n    }\n    if (attribute.value.length === 0) {\n        return {\n            spread: false,\n            name: attribute.name,\n            value: `''`,\n            dynamic: false,\n            dependencies: []\n        };\n    }\n    if (attribute.value.length === 1) {\n        const value = attribute.value[0];\n        if (value.type === 'Text') {\n            // static attributes\n            return {\n                spread: false,\n                name: attribute.name,\n                value: isNaN(value.data) ? stringify(value.data) : value.data,\n                dynamic: false,\n                dependencies: []\n            };\n        }\n        // simple dynamic attributes\n        block.contextualise(value.expression); // TODO remove\n        const { dependencies, snippet } = value.metadata;\n        // TODO only update attributes that have changed\n        return {\n            spread: false,\n            name: attribute.name,\n            value: snippet,\n            dependencies,\n            dynamic: true\n        };\n    }\n    // otherwise we're dealing with a complex dynamic attribute\n    const allDependencies = new Set();\n    const value = (attribute.value[0].type === 'Text' ? '' : `\"\" + `) +\n        attribute.value\n            .map((chunk) => {\n            if (chunk.type === 'Text') {\n                return stringify(chunk.data);\n            }\n            else {\n                block.contextualise(chunk.expression); // TODO remove\n                const { dependencies, snippet } = chunk.metadata;\n                dependencies.forEach((dependency) => {\n                    allDependencies.add(dependency);\n                });\n                return getExpressionPrecedence(chunk.expression) <= 13 ? `(${snippet})` : snippet;\n            }\n        })\n            .join(' + ');\n    return {\n        spread: false,\n        name: attribute.name,\n        value,\n        dependencies: Array.from(allDependencies),\n        dynamic: true\n    };\n}\n\nclass Component extends Node$1 {\n    init(block, stripWhitespace, nextSibling) {\n        this.cannotUseInnerHTML();\n        this.attributes.forEach((attribute) => {\n            if (attribute.type === 'Attribute' && attribute.value !== true) {\n                attribute.value.forEach((chunk) => {\n                    if (chunk.type !== 'Text') {\n                        const dependencies = chunk.metadata.dependencies;\n                        block.addDependencies(dependencies);\n                    }\n                });\n            }\n            else {\n                if (attribute.type === 'EventHandler' && attribute.expression) {\n                    attribute.expression.arguments.forEach((arg) => {\n                        block.addDependencies(arg.metadata.dependencies);\n                    });\n                }\n                else if (attribute.type === 'Binding') {\n                    block.addDependencies(attribute.metadata.dependencies);\n                }\n            }\n        });\n        this.var = block.getUniqueName(((this.name === ':Self' || this.name === 'svelte:self') ? this.generator.name :\n            (this.name === ':Component' || this.name === 'svelte:component') ? 'switch_instance' :\n                this.name).toLowerCase());\n        if (this.children.length) {\n            this._slots = new Set(['default']);\n            this.children.forEach(child => {\n                child.init(block, stripWhitespace, nextSibling);\n            });\n        }\n    }\n    build(block, parentNode, parentNodes) {\n        const { generator } = this;\n        generator.hasComponents = true;\n        const name = this.var;\n        const componentInitProperties = [`root: #component.root`];\n        if (this.children.length > 0) {\n            const slots = Array.from(this._slots).map(name => `${quoteIfNecessary(name, generator.legacy)}: @createFragment()`);\n            componentInitProperties.push(`slots: { ${slots.join(', ')} }`);\n            this.children.forEach((child) => {\n                child.build(block, `${this.var}._slotted${generator.legacy ? `[\"default\"]` : `.default`}`, 'nodes');\n            });\n        }\n        const allContexts = new Set();\n        const statements = [];\n        const name_initial_data = block.getUniqueName(`${name}_initial_data`);\n        const name_changes = block.getUniqueName(`${name}_changes`);\n        let name_updating;\n        let beforecreate = null;\n        const attributes = this.attributes\n            .filter(a => a.type === 'Attribute' || a.type === 'Spread')\n            .map(a => mungeAttribute(a, block));\n        const bindings = this.attributes\n            .filter(a => a.type === 'Binding')\n            .map(a => mungeBinding(a, block));\n        const eventHandlers = this.attributes\n            .filter((a) => a.type === 'EventHandler')\n            .map(a => mungeEventHandler(generator, this, a, block, allContexts));\n        const ref = this.attributes.find((a) => a.type === 'Ref');\n        if (ref)\n            generator.usesRefs = true;\n        const updates = [];\n        const usesSpread = !!attributes.find(a => a.spread);\n        const attributeObject = usesSpread\n            ? '{}'\n            : stringifyProps(attributes.map((attribute) => `${attribute.name}: ${attribute.value}`));\n        if (attributes.length || bindings.length) {\n            componentInitProperties.push(`data: ${name_initial_data}`);\n        }\n        if ((!usesSpread && attributes.filter(a => a.dynamic).length) || bindings.length) {\n            updates.push(`var ${name_changes} = {};`);\n        }\n        if (attributes.length) {\n            if (usesSpread) {\n                const levels = block.getUniqueName(`${this.var}_spread_levels`);\n                const initialProps = [];\n                const changes = [];\n                attributes\n                    .forEach(munged => {\n                    const { spread, name, dynamic, value, dependencies } = munged;\n                    if (spread) {\n                        initialProps.push(value);\n                        const condition = dependencies && dependencies.map(d => `changed.${d}`).join(' || ');\n                        changes.push(condition ? `${condition} && ${value}` : value);\n                    }\n                    else {\n                        const obj = `{ ${quoteIfNecessary(name, this.generator.legacy)}: ${value} }`;\n                        initialProps.push(obj);\n                        const condition = dependencies && dependencies.map(d => `changed.${d}`).join(' || ');\n                        changes.push(condition ? `${condition} && ${obj}` : obj);\n                    }\n                });\n                block.addVariable(levels);\n                statements.push(deindent `\n\t\t\t\t\t${levels} = [\n\t\t\t\t\t\t${initialProps.join(',\\n')}\n\t\t\t\t\t];\n\n\t\t\t\t\tfor (var #i = 0; #i < ${levels}.length; #i += 1) {\n\t\t\t\t\t\t${name_initial_data} = @assign(${name_initial_data}, ${levels}[#i]);\n\t\t\t\t\t}\n\t\t\t\t`);\n                updates.push(deindent `\n\t\t\t\t\tvar ${name_changes} = @getSpreadUpdate(${levels}, [\n\t\t\t\t\t\t${changes.join(',\\n')}\n\t\t\t\t\t]);\n\t\t\t\t`);\n            }\n            else {\n                attributes\n                    .filter((attribute) => attribute.dynamic)\n                    .forEach((attribute) => {\n                    if (attribute.dependencies.length) {\n                        updates.push(deindent `\n\t\t\t\t\t\t\t\tif (${attribute.dependencies\n                            .map(dependency => `changed.${dependency}`)\n                            .join(' || ')}) ${name_changes}.${attribute.name} = ${attribute.value};\n\t\t\t\t\t\t\t`);\n                    }\n                    else {\n                        // TODO this is an odd situation to encounter – I *think* it should only happen with\n                        // each block indices, in which case it may be possible to optimise this\n                        updates.push(`${name_changes}.${attribute.name} = ${attribute.value};`);\n                    }\n                });\n            }\n        }\n        if (bindings.length) {\n            generator.hasComplexBindings = true;\n            name_updating = block.alias(`${name}_updating`);\n            block.addVariable(name_updating, '{}');\n            let hasLocalBindings = false;\n            let hasStoreBindings = false;\n            const builder = new CodeBuilder();\n            bindings.forEach((binding) => {\n                let { name: key } = getObject(binding.value);\n                binding.contexts.forEach(context => {\n                    allContexts.add(context);\n                });\n                let setFromChild;\n                if (block.contexts.has(key)) {\n                    const computed = isComputed$1(binding.value);\n                    const tail = binding.value.type === 'MemberExpression' ? getTailSnippet(binding.value) : '';\n                    const list = block.listNames.get(key);\n                    const index = block.indexNames.get(key);\n                    setFromChild = deindent `\n\t\t\t\t\t\t${list}[${index}]${tail} = childState.${binding.name};\n\n\t\t\t\t\t\t${binding.dependencies\n                        .map((name) => {\n                        const isStoreProp = generator.options.store && name[0] === '$';\n                        const prop = isStoreProp ? name.slice(1) : name;\n                        const newState = isStoreProp ? 'newStoreState' : 'newState';\n                        if (isStoreProp)\n                            hasStoreBindings = true;\n                        else\n                            hasLocalBindings = true;\n                        return `${newState}.${prop} = state.${name};`;\n                    })}\n\t\t\t\t\t`;\n                }\n                else {\n                    const isStoreProp = generator.options.store && key[0] === '$';\n                    const prop = isStoreProp ? key.slice(1) : key;\n                    const newState = isStoreProp ? 'newStoreState' : 'newState';\n                    if (isStoreProp)\n                        hasStoreBindings = true;\n                    else\n                        hasLocalBindings = true;\n                    if (binding.value.type === 'MemberExpression') {\n                        setFromChild = deindent `\n\t\t\t\t\t\t\t${binding.snippet} = childState.${binding.name};\n\t\t\t\t\t\t\t${newState}.${prop} = state.${key};\n\t\t\t\t\t\t`;\n                    }\n                    else {\n                        setFromChild = `${newState}.${prop} = childState.${binding.name};`;\n                    }\n                }\n                statements.push(deindent `\n\t\t\t\t\tif (${binding.prop} in ${binding.obj}) {\n\t\t\t\t\t\t${name_initial_data}.${binding.name} = ${binding.snippet};\n\t\t\t\t\t\t${name_updating}.${binding.name} = true;\n\t\t\t\t\t}`);\n                builder.addConditional(`!${name_updating}.${binding.name} && changed.${binding.name}`, setFromChild);\n                updates.push(deindent `\n\t\t\t\t\tif (!${name_updating}.${binding.name} && ${binding.dependencies.map((dependency) => `changed.${dependency}`).join(' || ')}) {\n\t\t\t\t\t\t${name_changes}.${binding.name} = ${binding.snippet};\n\t\t\t\t\t\t${name_updating}.${binding.name} = true;\n\t\t\t\t\t}\n\t\t\t\t`);\n            });\n            const initialisers = [\n                'state = #component.get()',\n                hasLocalBindings && 'newState = {}',\n                hasStoreBindings && 'newStoreState = {}',\n            ].filter(Boolean).join(', ');\n            // TODO use component.on('state', ...) instead of _bind\n            componentInitProperties.push(deindent `\n\t\t\t\t_bind: function(changed, childState) {\n\t\t\t\t\tvar ${initialisers};\n\t\t\t\t\t${builder}\n\t\t\t\t\t${hasStoreBindings && `#component.store.set(newStoreState);`}\n\t\t\t\t\t${hasLocalBindings && `#component._set(newState);`}\n\t\t\t\t\t${name_updating} = {};\n\t\t\t\t}\n\t\t\t`);\n            beforecreate = deindent `\n\t\t\t\t#component.root._beforecreate.push(function() {\n\t\t\t\t\t${name}._bind({ ${bindings.map(b => `${b.name}: 1`).join(', ')} }, ${name}.get());\n\t\t\t\t});\n\t\t\t`;\n        }\n        if (this.name === ':Component' || this.name === 'svelte:component') {\n            const switch_value = block.getUniqueName('switch_value');\n            const switch_props = block.getUniqueName('switch_props');\n            block.contextualise(this.expression);\n            const { dependencies, snippet } = this.metadata;\n            const anchor = this.getOrCreateAnchor(block, parentNode, parentNodes);\n            block.builders.init.addBlock(deindent `\n\t\t\t\tvar ${switch_value} = ${snippet};\n\n\t\t\t\tfunction ${switch_props}(state) {\n\t\t\t\t\t${(attributes.length || bindings.length) && deindent `\n\t\t\t\t\tvar ${name_initial_data} = ${attributeObject};`}\n\t\t\t\t\t${statements}\n\t\t\t\t\treturn {\n\t\t\t\t\t\t${componentInitProperties.join(',\\n')}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (${switch_value}) {\n\t\t\t\t\tvar ${name} = new ${switch_value}(${switch_props}(state));\n\n\t\t\t\t\t${beforecreate}\n\t\t\t\t}\n\n\t\t\t\t${eventHandlers.map(handler => deindent `\n\t\t\t\t\tfunction ${handler.var}(event) {\n\t\t\t\t\t\t${handler.body}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (${name}) ${name}.on(\"${handler.name}\", ${handler.var});\n\t\t\t\t`)}\n\t\t\t`);\n            block.builders.create.addLine(`if (${name}) ${name}._fragment.c();`);\n            if (parentNodes) {\n                block.builders.claim.addLine(`if (${name}) ${name}._fragment.l(${parentNodes});`);\n            }\n            block.builders.mount.addBlock(deindent `\n\t\t\t\tif (${name}) {\n\t\t\t\t\t${name}._mount(${parentNode || '#target'}, ${parentNode ? 'null' : 'anchor'});\n\t\t\t\t\t${ref && `#component.refs.${ref.name} = ${name};`}\n\t\t\t\t}\n\t\t\t`);\n            const updateMountNode = this.getUpdateMountNode(anchor);\n            block.builders.update.addBlock(deindent `\n\t\t\t\tif (${switch_value} !== (${switch_value} = ${snippet})) {\n\t\t\t\t\tif (${name}) ${name}.destroy();\n\n\t\t\t\t\tif (${switch_value}) {\n\t\t\t\t\t\t${name} = new ${switch_value}(${switch_props}(state));\n\t\t\t\t\t\t${name}._fragment.c();\n\n\t\t\t\t\t\t${this.children.map(child => child.remount(name))}\n\t\t\t\t\t\t${name}._mount(${updateMountNode}, ${anchor});\n\n\t\t\t\t\t\t${eventHandlers.map(handler => deindent `\n\t\t\t\t\t\t\t${name}.on(\"${handler.name}\", ${handler.var});\n\t\t\t\t\t\t`)}\n\n\t\t\t\t\t\t${ref && `#component.refs.${ref.name} = ${name};`}\n\t\t\t\t\t}\n\n\t\t\t\t\t${ref && deindent `\n\t\t\t\t\t\telse if (#component.refs.${ref.name} === ${name}) {\n\t\t\t\t\t\t\t#component.refs.${ref.name} = null;\n\t\t\t\t\t\t}`}\n\t\t\t\t}\n\t\t\t`);\n            if (updates.length) {\n                block.builders.update.addBlock(deindent `\n\t\t\t\t\telse {\n\t\t\t\t\t\t${updates}\n\t\t\t\t\t\t${name}._set(${name_changes});\n\t\t\t\t\t\t${bindings.length && `${name_updating} = {};`}\n\t\t\t\t\t}\n\t\t\t\t`);\n            }\n            if (!parentNode)\n                block.builders.unmount.addLine(`if (${name}) ${name}._unmount();`);\n            block.builders.destroy.addLine(`if (${name}) ${name}.destroy(false);`);\n        }\n        else {\n            const expression = (this.name === ':Self' || this.name === 'svelte:self')\n                ? generator.name\n                : `%components-${this.name}`;\n            block.builders.init.addBlock(deindent `\n\t\t\t\t${(attributes.length || bindings.length) && deindent `\n\t\t\t\tvar ${name_initial_data} = ${attributeObject};`}\n\t\t\t\t${statements}\n\t\t\t\tvar ${name} = new ${expression}({\n\t\t\t\t\t${componentInitProperties.join(',\\n')}\n\t\t\t\t});\n\n\t\t\t\t${beforecreate}\n\n\t\t\t\t${eventHandlers.map(handler => deindent `\n\t\t\t\t\t${name}.on(\"${handler.name}\", function(event) {\n\t\t\t\t\t\t${handler.body}\n\t\t\t\t\t});\n\t\t\t\t`)}\n\n\t\t\t\t${ref && `#component.refs.${ref.name} = ${name};`}\n\t\t\t`);\n            block.builders.create.addLine(`${name}._fragment.c();`);\n            if (parentNodes) {\n                block.builders.claim.addLine(`${name}._fragment.l(${parentNodes});`);\n            }\n            block.builders.mount.addLine(`${name}._mount(${parentNode || '#target'}, ${parentNode ? 'null' : 'anchor'});`);\n            if (updates.length) {\n                block.builders.update.addBlock(deindent `\n\t\t\t\t\t${updates}\n\t\t\t\t\t${name}._set(${name_changes});\n\t\t\t\t\t${bindings.length && `${name_updating} = {};`}\n\t\t\t\t`);\n            }\n            if (!parentNode)\n                block.builders.unmount.addLine(`${name}._unmount();`);\n            block.builders.destroy.addLine(deindent `\n\t\t\t\t${name}.destroy(false);\n\t\t\t\t${ref && `if (#component.refs.${ref.name} === ${name}) #component.refs.${ref.name} = null;`}\n\t\t\t`);\n        }\n    }\n    remount(name) {\n        return `${this.var}._mount(${name}._slotted${this.generator.legacy ? `[\"default\"]` : `.default`}, null);`;\n    }\n}\nfunction mungeBinding(binding, block) {\n    const { name } = getObject(binding.value);\n    const { contexts } = block.contextualise(binding.value);\n    const { dependencies, snippet } = binding.metadata;\n    const contextual = block.contexts.has(name);\n    let obj;\n    let prop;\n    if (contextual) {\n        obj = `state.${block.listNames.get(name)}`;\n        prop = `${block.indexNames.get(name)}`;\n    }\n    else if (binding.value.type === 'MemberExpression') {\n        prop = `[✂${binding.value.property.start}-${binding.value.property.end}✂]`;\n        if (!binding.value.computed)\n            prop = `'${prop}'`;\n        obj = `[✂${binding.value.object.start}-${binding.value.object.end}✂]`;\n    }\n    else {\n        obj = 'state';\n        prop = `'${name}'`;\n    }\n    return {\n        name: binding.name,\n        value: binding.value,\n        contexts,\n        snippet,\n        obj,\n        prop,\n        dependencies\n    };\n}\nfunction mungeEventHandler(generator, node, handler, block, allContexts) {\n    let body;\n    if (handler.expression) {\n        generator.addSourcemapLocations(handler.expression);\n        // TODO try out repetition between this and element counterpart\n        const flattened = flatten(handler.expression.callee);\n        if (!validCalleeObjects.has(flattened.name)) {\n            // allow event.stopPropagation(), this.select() etc\n            // TODO verify that it's a valid callee (i.e. built-in or declared method)\n            generator.code.prependRight(handler.expression.start, `${block.alias('component')}.`);\n        }\n        handler.expression.arguments.forEach((arg) => {\n            const { contexts } = block.contextualise(arg, null, true);\n            contexts.forEach(context => {\n                allContexts.add(context);\n            });\n        });\n        body = deindent `\n\t\t\t[✂${handler.expression.start}-${handler.expression.end}✂];\n\t\t`;\n    }\n    else {\n        body = deindent `\n\t\t\t${block.alias('component')}.fire('${handler.name}', event);\n\t\t`;\n    }\n    return {\n        name: handler.name,\n        var: block.getUniqueName(`${node.var}_${handler.name}`),\n        body\n    };\n}\nfunction isComputed$1(node) {\n    while (node.type === 'MemberExpression') {\n        if (node.computed)\n            return true;\n        node = node.object;\n    }\n    return false;\n}\n\nclass EachBlock extends Node$1 {\n    init(block, stripWhitespace, nextSibling) {\n        this.cannotUseInnerHTML();\n        this.var = block.getUniqueName(`each`);\n        this.iterations = block.getUniqueName(`${this.var}_blocks`);\n        this.each_context = block.getUniqueName(`${this.var}_context`);\n        const { dependencies } = this.metadata;\n        block.addDependencies(dependencies);\n        this.block = block.child({\n            comment: createDebuggingComment(this, this.generator),\n            name: this.generator.getUniqueName('create_each_block'),\n            context: this.context,\n            key: this.key,\n            contexts: new Map(block.contexts),\n            contextTypes: new Map(block.contextTypes),\n            indexes: new Map(block.indexes),\n            changeableIndexes: new Map(block.changeableIndexes),\n            indexNames: new Map(block.indexNames),\n            listNames: new Map(block.listNames)\n        });\n        const listName = this.generator.getUniqueName('each_value');\n        const indexName = this.index || this.generator.getUniqueName(`${this.context}_index`);\n        this.block.contextTypes.set(this.context, 'each');\n        this.block.indexNames.set(this.context, indexName);\n        this.block.listNames.set(this.context, listName);\n        if (this.index) {\n            this.block.getUniqueName(this.index); // this prevents name collisions (#1254)\n            this.block.indexes.set(this.index, this.context);\n            this.block.changeableIndexes.set(this.index, this.key); // TODO is this right?\n        }\n        const context = this.block.getUniqueName(this.context);\n        this.block.contexts.set(this.context, context); // TODO this is now redundant?\n        if (this.destructuredContexts) {\n            for (let i = 0; i < this.destructuredContexts.length; i += 1) {\n                const context = this.block.getUniqueName(this.destructuredContexts[i]);\n                this.block.contexts.set(this.destructuredContexts[i], context);\n            }\n        }\n        this.contextProps = [\n            `${listName}: ${listName}`,\n            `${this.context}: ${listName}[#i]`,\n            `${indexName}: #i`\n        ];\n        if (this.destructuredContexts) {\n            for (let i = 0; i < this.destructuredContexts.length; i += 1) {\n                this.contextProps.push(`${this.destructuredContexts[i]}: ${listName}[#i][${i}]`);\n            }\n        }\n        this.generator.blocks.push(this.block);\n        this.initChildren(this.block, stripWhitespace, nextSibling);\n        block.addDependencies(this.block.dependencies);\n        this.block.hasUpdateMethod = this.block.dependencies.size > 0;\n        if (this.else) {\n            this.else.block = block.child({\n                comment: createDebuggingComment(this.else, this.generator),\n                name: this.generator.getUniqueName(`${this.block.name}_else`),\n            });\n            this.generator.blocks.push(this.else.block);\n            this.else.initChildren(this.else.block, stripWhitespace, nextSibling);\n            this.else.block.hasUpdateMethod = this.else.block.dependencies.size > 0;\n        }\n    }\n    build(block, parentNode, parentNodes) {\n        if (this.children.length === 0)\n            return;\n        const { generator } = this;\n        const each = this.var;\n        const create_each_block = this.block.name;\n        const each_block_value = this.block.listNames.get(this.context);\n        const iterations = this.iterations;\n        const needsAnchor = this.next ? !this.next.isDomNode() : !parentNode || !this.parent.isDomNode();\n        const anchor = needsAnchor\n            ? block.getUniqueName(`${each}_anchor`)\n            : (this.next && this.next.var) || 'null';\n        // hack the sourcemap, so that if data is missing the bug\n        // is easy to find\n        let c = this.start + 2;\n        while (generator.source[c] !== 'e')\n            c += 1;\n        generator.code.overwrite(c, c + 4, 'length');\n        const length = `[✂${c}-${c + 4}✂]`;\n        const mountOrIntro = this.block.hasIntroMethod ? 'i' : 'm';\n        const vars = {\n            each,\n            create_each_block,\n            each_block_value,\n            length,\n            iterations,\n            anchor,\n            mountOrIntro,\n        };\n        block.contextualise(this.expression);\n        const { snippet } = this.metadata;\n        block.builders.init.addLine(`var ${each_block_value} = ${snippet};`);\n        if (this.key) {\n            this.buildKeyed(block, parentNode, parentNodes, snippet, vars);\n        }\n        else {\n            this.buildUnkeyed(block, parentNode, parentNodes, snippet, vars);\n        }\n        if (needsAnchor) {\n            block.addElement(anchor, `@createComment()`, parentNodes && `@createComment()`, parentNode);\n        }\n        if (this.else) {\n            const each_block_else = generator.getUniqueName(`${each}_else`);\n            block.builders.init.addLine(`var ${each_block_else} = null;`);\n            // TODO neaten this up... will end up with an empty line in the block\n            block.builders.init.addBlock(deindent `\n\t\t\t\tif (!${each_block_value}.${length}) {\n\t\t\t\t\t${each_block_else} = ${this.else.block.name}(#component, state);\n\t\t\t\t\t${each_block_else}.c();\n\t\t\t\t}\n\t\t\t`);\n            block.builders.mount.addBlock(deindent `\n\t\t\t\tif (${each_block_else}) {\n\t\t\t\t\t${each_block_else}.${mountOrIntro}(${parentNode || '#target'}, null);\n\t\t\t\t}\n\t\t\t`);\n            const initialMountNode = parentNode || `${anchor}.parentNode`;\n            if (this.else.block.hasUpdateMethod) {\n                block.builders.update.addBlock(deindent `\n\t\t\t\t\tif (!${each_block_value}.${length} && ${each_block_else}) {\n\t\t\t\t\t\t${each_block_else}.p(changed, state);\n\t\t\t\t\t} else if (!${each_block_value}.${length}) {\n\t\t\t\t\t\t${each_block_else} = ${this.else.block.name}(#component, state);\n\t\t\t\t\t\t${each_block_else}.c();\n\t\t\t\t\t\t${each_block_else}.${mountOrIntro}(${initialMountNode}, ${anchor});\n\t\t\t\t\t} else if (${each_block_else}) {\n\t\t\t\t\t\t${each_block_else}.u();\n\t\t\t\t\t\t${each_block_else}.d();\n\t\t\t\t\t\t${each_block_else} = null;\n\t\t\t\t\t}\n\t\t\t\t`);\n            }\n            else {\n                block.builders.update.addBlock(deindent `\n\t\t\t\t\tif (${each_block_value}.${length}) {\n\t\t\t\t\t\tif (${each_block_else}) {\n\t\t\t\t\t\t\t${each_block_else}.u();\n\t\t\t\t\t\t\t${each_block_else}.d();\n\t\t\t\t\t\t\t${each_block_else} = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (!${each_block_else}) {\n\t\t\t\t\t\t${each_block_else} = ${this.else.block.name}(#component, state);\n\t\t\t\t\t\t${each_block_else}.c();\n\t\t\t\t\t\t${each_block_else}.${mountOrIntro}(${initialMountNode}, ${anchor});\n\t\t\t\t\t}\n\t\t\t\t`);\n            }\n            block.builders.unmount.addLine(`if (${each_block_else}) ${each_block_else}.u()`);\n            block.builders.destroy.addBlock(deindent `\n\t\t\t\tif (${each_block_else}) ${each_block_else}.d();\n\t\t\t`);\n        }\n        this.children.forEach((child) => {\n            child.build(this.block, null, 'nodes');\n        });\n        if (this.else) {\n            this.else.children.forEach((child) => {\n                child.build(this.else.block, null, 'nodes');\n            });\n        }\n    }\n    buildKeyed(block, parentNode, parentNodes, snippet, { each, create_each_block, each_block_value, length, anchor, mountOrIntro, }) {\n        const key = block.getUniqueName('key');\n        const blocks = block.getUniqueName(`${each}_blocks`);\n        const lookup = block.getUniqueName(`${each}_lookup`);\n        block.addVariable(blocks, '[]');\n        block.addVariable(lookup, `@blankObject()`);\n        if (this.children[0].isDomNode()) {\n            this.block.first = this.children[0].var;\n        }\n        else {\n            this.block.first = this.block.getUniqueName('first');\n            this.block.addElement(this.block.first, `@createComment()`, parentNodes && `@createComment()`, null);\n        }\n        block.builders.init.addBlock(deindent `\n\t\t\tfor (var #i = 0; #i < ${each_block_value}.${length}; #i += 1) {\n\t\t\t\tvar ${key} = ${each_block_value}[#i].${this.key};\n\t\t\t\t${blocks}[#i] = ${lookup}[${key}] = ${create_each_block}(#component, ${key}, @assign(@assign({}, state), {\n\t\t\t\t\t${this.contextProps.join(',\\n')}\n\t\t\t\t}));\n\t\t\t}\n\t\t`);\n        const initialMountNode = parentNode || '#target';\n        const updateMountNode = this.getUpdateMountNode(anchor);\n        const anchorNode = parentNode ? 'null' : 'anchor';\n        block.builders.create.addBlock(deindent `\n\t\t\tfor (#i = 0; #i < ${blocks}.length; #i += 1) ${blocks}[#i].c();\n\t\t`);\n        if (parentNodes) {\n            block.builders.claim.addBlock(deindent `\n\t\t\t\tfor (#i = 0; #i < ${blocks}.length; #i += 1) ${blocks}[#i].l(${parentNodes});\n\t\t\t`);\n        }\n        block.builders.mount.addBlock(deindent `\n\t\t\tfor (#i = 0; #i < ${blocks}.length; #i += 1) ${blocks}[#i].${mountOrIntro}(${initialMountNode}, ${anchorNode});\n\t\t`);\n        const dynamic = this.block.hasUpdateMethod;\n        block.builders.update.addBlock(deindent `\n\t\t\tvar ${each_block_value} = ${snippet};\n\n\t\t\t${blocks} = @updateKeyedEach(${blocks}, #component, changed, \"${this.key}\", ${dynamic ? '1' : '0'}, ${each_block_value}, ${lookup}, ${updateMountNode}, ${String(this.block.hasOutroMethod)}, ${create_each_block}, \"${mountOrIntro}\", ${anchor}, function(#i) {\n\t\t\t\treturn @assign(@assign({}, state), {\n\t\t\t\t\t${this.contextProps.join(',\\n')}\n\t\t\t\t});\n\t\t\t});\n\t\t`);\n        if (!parentNode) {\n            block.builders.unmount.addBlock(deindent `\n\t\t\t\tfor (#i = 0; #i < ${blocks}.length; #i += 1) ${blocks}[#i].u();\n\t\t\t`);\n        }\n        block.builders.destroy.addBlock(deindent `\n\t\t\tfor (#i = 0; #i < ${blocks}.length; #i += 1) ${blocks}[#i].d();\n\t\t`);\n    }\n    buildUnkeyed(block, parentNode, parentNodes, snippet, { create_each_block, each_block_value, length, iterations, anchor, mountOrIntro, }) {\n        block.builders.init.addBlock(deindent `\n\t\t\tvar ${iterations} = [];\n\n\t\t\tfor (var #i = 0; #i < ${each_block_value}.${length}; #i += 1) {\n\t\t\t\t${iterations}[#i] = ${create_each_block}(#component, @assign(@assign({}, state), {\n\t\t\t\t\t${this.contextProps.join(',\\n')}\n\t\t\t\t}));\n\t\t\t}\n\t\t`);\n        const initialMountNode = parentNode || '#target';\n        const updateMountNode = this.getUpdateMountNode(anchor);\n        const anchorNode = parentNode ? 'null' : 'anchor';\n        block.builders.create.addBlock(deindent `\n\t\t\tfor (var #i = 0; #i < ${iterations}.length; #i += 1) {\n\t\t\t\t${iterations}[#i].c();\n\t\t\t}\n\t\t`);\n        if (parentNodes) {\n            block.builders.claim.addBlock(deindent `\n\t\t\t\tfor (var #i = 0; #i < ${iterations}.length; #i += 1) {\n\t\t\t\t\t${iterations}[#i].l(${parentNodes});\n\t\t\t\t}\n\t\t\t`);\n        }\n        block.builders.mount.addBlock(deindent `\n\t\t\tfor (var #i = 0; #i < ${iterations}.length; #i += 1) {\n\t\t\t\t${iterations}[#i].${mountOrIntro}(${initialMountNode}, ${anchorNode});\n\t\t\t}\n\t\t`);\n        const allDependencies = new Set(this.block.dependencies);\n        const { dependencies } = this.metadata;\n        dependencies.forEach((dependency) => {\n            allDependencies.add(dependency);\n        });\n        // TODO do this for keyed blocks as well\n        const condition = Array.from(allDependencies)\n            .map(dependency => `changed.${dependency}`)\n            .join(' || ');\n        if (condition !== '') {\n            const forLoopBody = this.block.hasUpdateMethod\n                ? this.block.hasIntroMethod\n                    ? deindent `\n\t\t\t\t\t\tif (${iterations}[#i]) {\n\t\t\t\t\t\t\t${iterations}[#i].p(changed, ${this.each_context});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t${iterations}[#i] = ${create_each_block}(#component, ${this.each_context});\n\t\t\t\t\t\t\t${iterations}[#i].c();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t${iterations}[#i].i(${updateMountNode}, ${anchor});\n\t\t\t\t\t`\n                    : deindent `\n\t\t\t\t\t\tif (${iterations}[#i]) {\n\t\t\t\t\t\t\t${iterations}[#i].p(changed, ${this.each_context});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t${iterations}[#i] = ${create_each_block}(#component, ${this.each_context});\n\t\t\t\t\t\t\t${iterations}[#i].c();\n\t\t\t\t\t\t\t${iterations}[#i].m(${updateMountNode}, ${anchor});\n\t\t\t\t\t\t}\n\t\t\t\t\t`\n                : deindent `\n\t\t\t\t\t${iterations}[#i] = ${create_each_block}(#component, ${this.each_context});\n\t\t\t\t\t${iterations}[#i].c();\n\t\t\t\t\t${iterations}[#i].${mountOrIntro}(${updateMountNode}, ${anchor});\n\t\t\t\t`;\n            const start = this.block.hasUpdateMethod ? '0' : `${iterations}.length`;\n            const outro = block.getUniqueName('outro');\n            const destroy = this.block.hasOutroMethod\n                ? deindent `\n\t\t\t\t\tfunction ${outro}(i) {\n\t\t\t\t\t\tif (${iterations}[i]) {\n\t\t\t\t\t\t\t${iterations}[i].o(function() {\n\t\t\t\t\t\t\t\t${iterations}[i].u();\n\t\t\t\t\t\t\t\t${iterations}[i].d();\n\t\t\t\t\t\t\t\t${iterations}[i] = null;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (; #i < ${iterations}.length; #i += 1) ${outro}(#i);\n\t\t\t\t`\n                : deindent `\n\t\t\t\t\tfor (; #i < ${iterations}.length; #i += 1) {\n\t\t\t\t\t\t${iterations}[#i].u();\n\t\t\t\t\t\t${iterations}[#i].d();\n\t\t\t\t\t}\n\t\t\t\t\t${iterations}.length = ${each_block_value}.${length};\n\t\t\t\t`;\n            block.builders.update.addBlock(deindent `\n\t\t\t\tvar ${each_block_value} = ${snippet};\n\n\t\t\t\tif (${condition}) {\n\t\t\t\t\tfor (var #i = ${start}; #i < ${each_block_value}.${length}; #i += 1) {\n\t\t\t\t\t\tvar ${this.each_context} = @assign(@assign({}, state), {\n\t\t\t\t\t\t\t${this.contextProps.join(',\\n')}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t${forLoopBody}\n\t\t\t\t\t}\n\n\t\t\t\t\t${destroy}\n\t\t\t\t}\n\t\t\t`);\n        }\n        block.builders.unmount.addBlock(deindent `\n\t\t\tfor (var #i = 0; #i < ${iterations}.length; #i += 1) {\n\t\t\t\t${iterations}[#i].u();\n\t\t\t}\n\t\t`);\n        block.builders.destroy.addBlock(`@destroyEach(${iterations});`);\n    }\n    remount(name) {\n        // TODO consider keyed blocks\n        return `for (var #i = 0; #i < ${this.iterations}.length; #i += 1) ${this.iterations}[#i].m(${name}._slotted${this.generator.legacy ? `[\"default\"]` : `.default`}, null);`;\n    }\n}\n\nclass Element extends Node$1 {\n    init(block, stripWhitespace, nextSibling) {\n        if (this.name === 'slot' || this.name === 'option') {\n            this.cannotUseInnerHTML();\n        }\n        const parentElement = this.parent && this.parent.findNearest(/^Element/);\n        this.namespace = this.name === 'svg' ?\n            svg :\n            parentElement ? parentElement.namespace : this.generator.namespace;\n        this.attributes.forEach(attribute => {\n            if (attribute.type === 'Attribute' && attribute.value !== true) {\n                // special case — xmlns\n                if (attribute.name === 'xmlns') {\n                    // TODO this attribute must be static – enforce at compile time\n                    this.namespace = attribute.value[0].data;\n                }\n                attribute.value.forEach((chunk) => {\n                    if (chunk.type !== 'Text') {\n                        if (this.parent)\n                            this.parent.cannotUseInnerHTML();\n                        const dependencies = chunk.metadata.dependencies;\n                        block.addDependencies(dependencies);\n                        // special case — <option value='{{foo}}'> — see below\n                        if (this.name === 'option' &&\n                            attribute.name === 'value') {\n                            let select = this.parent;\n                            while (select && (select.type !== 'Element' || select.name !== 'select'))\n                                select = select.parent;\n                            if (select && select.selectBindingDependencies) {\n                                select.selectBindingDependencies.forEach(prop => {\n                                    dependencies.forEach((dependency) => {\n                                        this.generator.indirectDependencies.get(prop).add(dependency);\n                                    });\n                                });\n                            }\n                        }\n                    }\n                });\n            }\n            else {\n                if (this.parent)\n                    this.parent.cannotUseInnerHTML();\n                if (attribute.type === 'EventHandler' && attribute.expression) {\n                    attribute.expression.arguments.forEach((arg) => {\n                        block.addDependencies(arg.metadata.dependencies);\n                    });\n                }\n                else if (attribute.type === 'Binding') {\n                    block.addDependencies(attribute.metadata.dependencies);\n                }\n                else if (attribute.type === 'Transition') {\n                    if (attribute.intro)\n                        this.generator.hasIntroTransitions = block.hasIntroMethod = true;\n                    if (attribute.outro) {\n                        this.generator.hasOutroTransitions = block.hasOutroMethod = true;\n                        block.outros += 1;\n                    }\n                }\n                else if (attribute.type === 'Action' && attribute.expression) {\n                    block.addDependencies(attribute.metadata.dependencies);\n                }\n            }\n        });\n        const valueAttribute = this.attributes.find((attribute) => attribute.name === 'value');\n        if (this.name === 'textarea') {\n            // this is an egregious hack, but it's the easiest way to get <textarea>\n            // children treated the same way as a value attribute\n            if (this.children.length > 0) {\n                this.attributes.push(new Attribute({\n                    generator: this.generator,\n                    name: 'value',\n                    value: this.children,\n                    parent: this\n                }));\n                this.children = [];\n            }\n        }\n        // special case — in a case like this...\n        //\n        //   <select bind:value='foo'>\n        //     <option value='{{bar}}'>bar</option>\n        //     <option value='{{baz}}'>baz</option>\n        //   </option>\n        //\n        // ...we need to know that `foo` depends on `bar` and `baz`,\n        // so that if `foo.qux` changes, we know that we need to\n        // mark `bar` and `baz` as dirty too\n        if (this.name === 'select') {\n            const binding = this.attributes.find(node => node.type === 'Binding' && node.name === 'value');\n            if (binding) {\n                // TODO does this also apply to e.g. `<input type='checkbox' bind:group='foo'>`?\n                const dependencies = binding.metadata.dependencies;\n                this.selectBindingDependencies = dependencies;\n                dependencies.forEach((prop) => {\n                    this.generator.indirectDependencies.set(prop, new Set());\n                });\n            }\n            else {\n                this.selectBindingDependencies = null;\n            }\n        }\n        const slot = this.getStaticAttributeValue('slot');\n        if (slot && this.hasAncestor('Component')) {\n            this.cannotUseInnerHTML();\n            this.slotted = true;\n            // TODO validate slots — no nesting, no dynamic names...\n            const component = this.findNearest(/^Component/);\n            component._slots.add(slot);\n        }\n        if (this.spread) {\n            block.addDependencies(this.spread.metadata.dependencies);\n        }\n        this.var = block.getUniqueName(this.name.replace(/[^a-zA-Z0-9_$]/g, '_'));\n        if (this.children.length) {\n            if (this.name === 'pre' || this.name === 'textarea')\n                stripWhitespace = false;\n            this.initChildren(block, stripWhitespace, nextSibling);\n        }\n    }\n    build(block, parentNode, parentNodes) {\n        const { generator } = this;\n        if (this.name === 'slot') {\n            const slotName = this.getStaticAttributeValue('name') || 'default';\n            this.generator.slots.add(slotName);\n        }\n        if (this.name === 'noscript')\n            return;\n        const childState = {\n            parentNode: this.var,\n            parentNodes: parentNodes && block.getUniqueName(`${this.var}_nodes`) // if we're in unclaimable territory, i.e. <head>, parentNodes is null\n        };\n        const name = this.var;\n        const allUsedContexts = new Set();\n        const slot = this.attributes.find((attribute) => attribute.name === 'slot');\n        const initialMountNode = this.slotted ?\n            `${this.findNearest(/^Component/).var}._slotted.${slot.value[0].data}` : // TODO this looks bonkers\n            parentNode;\n        block.addVariable(name);\n        const renderStatement = getRenderStatement(this.generator, this.namespace, this.name);\n        block.builders.create.addLine(`${name} = ${renderStatement};`);\n        if (this.generator.hydratable) {\n            if (parentNodes) {\n                block.builders.claim.addBlock(deindent `\n\t\t\t\t\t${name} = ${getClaimStatement(generator, this.namespace, parentNodes, this)};\n\t\t\t\t\tvar ${childState.parentNodes} = @children(${name});\n\t\t\t\t`);\n            }\n            else {\n                block.builders.claim.addLine(`${name} = ${renderStatement};`);\n            }\n        }\n        if (initialMountNode) {\n            block.builders.mount.addLine(`@appendNode(${name}, ${initialMountNode});`);\n            if (initialMountNode === 'document.head') {\n                block.builders.unmount.addLine(`@detachNode(${name});`);\n            }\n        }\n        else {\n            block.builders.mount.addLine(`@insertNode(${name}, #target, anchor);`);\n            // TODO we eventually need to consider what happens to elements\n            // that belong to the same outgroup as an outroing element...\n            block.builders.unmount.addLine(`@detachNode(${name});`);\n        }\n        // TODO move this into a class as well?\n        if (this._cssRefAttribute) {\n            block.builders.hydrate.addLine(`@setAttribute(${name}, \"svelte-ref-${this._cssRefAttribute}\", \"\");`);\n        }\n        // insert static children with textContent or innerHTML\n        if (!this.namespace && this.canUseInnerHTML && this.children.length > 0) {\n            if (this.children.length === 1 && this.children[0].type === 'Text') {\n                block.builders.create.addLine(`${name}.textContent = ${stringify(this.children[0].data)};`);\n            }\n            else {\n                block.builders.create.addLine(`${name}.innerHTML = ${stringify(this.children.map(toHTML).join(''))};`);\n            }\n        }\n        else {\n            this.children.forEach((child) => {\n                child.build(block, childState.parentNode, childState.parentNodes);\n            });\n        }\n        this.addBindings(block, allUsedContexts);\n        const eventHandlerUsesComponent = this.addEventHandlers(block, allUsedContexts);\n        this.addRefs(block);\n        this.addAttributes(block);\n        this.addTransitions(block);\n        this.addActions(block);\n        if (allUsedContexts.size || eventHandlerUsesComponent) {\n            const initialProps = [];\n            const updates = [];\n            if (eventHandlerUsesComponent) {\n                initialProps.push(`component: #component`);\n            }\n            allUsedContexts.forEach((contextName) => {\n                if (contextName === 'state')\n                    return;\n                if (block.contextTypes.get(contextName) !== 'each')\n                    return;\n                const listName = block.listNames.get(contextName);\n                const indexName = block.indexNames.get(contextName);\n                initialProps.push(`${listName}: state.${listName},\\n${indexName}: state.${indexName}`);\n                updates.push(`${name}._svelte.${listName} = state.${listName};\\n${name}._svelte.${indexName} = state.${indexName};`);\n            });\n            if (initialProps.length) {\n                block.builders.hydrate.addBlock(deindent `\n\t\t\t\t\t${name}._svelte = {\n\t\t\t\t\t\t${initialProps.join(',\\n')}\n\t\t\t\t\t};\n\t\t\t\t`);\n            }\n            if (updates.length) {\n                block.builders.update.addBlock(updates.join('\\n'));\n            }\n        }\n        if (this.initialUpdate) {\n            block.builders.mount.addBlock(this.initialUpdate);\n        }\n        if (childState.parentNodes) {\n            block.builders.claim.addLine(`${childState.parentNodes}.forEach(@detachNode);`);\n        }\n        function toHTML(node) {\n            if (node.type === 'Text') {\n                return node.parent &&\n                    node.parent.type === 'Element' &&\n                    (node.parent.name === 'script' || node.parent.name === 'style')\n                    ? node.data\n                    : escapeHTML(node.data);\n            }\n            if (node.name === 'noscript')\n                return '';\n            let open = `<${node.name}`;\n            if (node._cssRefAttribute) {\n                open += ` svelte-ref-${node._cssRefAttribute}`;\n            }\n            node.attributes.forEach((attr) => {\n                open += ` ${fixAttributeCasing(attr.name)}${stringifyAttributeValue(attr.value)}`;\n            });\n            if (isVoidElementName(node.name))\n                return open + '>';\n            return `${open}>${node.children.map(toHTML).join('')}</${node.name}>`;\n        }\n    }\n    addBindings(block, allUsedContexts) {\n        const bindings = this.attributes.filter((a) => a.type === 'Binding');\n        if (bindings.length === 0)\n            return;\n        if (this.name === 'select' || this.isMediaNode())\n            this.generator.hasComplexBindings = true;\n        const needsLock = this.name !== 'input' || !/radio|checkbox|range|color/.test(this.getStaticAttributeValue('type'));\n        const mungedBindings = bindings.map(binding => binding.munge(block, allUsedContexts));\n        const lock = mungedBindings.some(binding => binding.needsLock) ?\n            block.getUniqueName(`${this.var}_updating`) :\n            null;\n        if (lock)\n            block.addVariable(lock, 'false');\n        const groups = events$1\n            .map(event => {\n            return {\n                events: event.eventNames,\n                bindings: mungedBindings.filter(binding => event.filter(this, binding.name))\n            };\n        })\n            .filter(group => group.bindings.length);\n        groups.forEach(group => {\n            const handler = block.getUniqueName(`${this.var}_${group.events.join('_')}_handler`);\n            const needsLock = group.bindings.some(binding => binding.needsLock);\n            group.bindings.forEach(binding => {\n                if (!binding.updateDom)\n                    return;\n                const updateConditions = needsLock ? [`!${lock}`] : [];\n                if (binding.updateCondition)\n                    updateConditions.push(binding.updateCondition);\n                block.builders.update.addLine(updateConditions.length ? `if (${updateConditions.join(' && ')}) ${binding.updateDom}` : binding.updateDom);\n            });\n            const usesContext = group.bindings.some(binding => binding.handler.usesContext);\n            const usesState = group.bindings.some(binding => binding.handler.usesState);\n            const usesStore = group.bindings.some(binding => binding.handler.usesStore);\n            const mutations = group.bindings.map(binding => binding.handler.mutation).filter(Boolean).join('\\n');\n            const props = new Set();\n            const storeProps = new Set();\n            group.bindings.forEach(binding => {\n                binding.handler.props.forEach(prop => {\n                    props.add(prop);\n                });\n                binding.handler.storeProps.forEach(prop => {\n                    storeProps.add(prop);\n                });\n            }); // TODO use stringifyProps here, once indenting is fixed\n            // media bindings — awkward special case. The native timeupdate events\n            // fire too infrequently, so we need to take matters into our\n            // own hands\n            let animation_frame;\n            if (group.events[0] === 'timeupdate') {\n                animation_frame = block.getUniqueName(`${this.var}_animationframe`);\n                block.addVariable(animation_frame);\n            }\n            block.builders.init.addBlock(deindent `\n\t\t\t\tfunction ${handler}() {\n\t\t\t\t\t${animation_frame && deindent `\n\t\t\t\t\t\t\tcancelAnimationFrame(${animation_frame});\n\t\t\t\t\t\t\tif (!${this.var}.paused) ${animation_frame} = requestAnimationFrame(${handler});`}\n\t\t\t\t\t${usesContext && `var context = ${this.var}._svelte;`}\n\t\t\t\t\t${usesState && `var state = #component.get();`}\n\t\t\t\t\t${usesStore && `var $ = #component.store.get();`}\n\t\t\t\t\t${needsLock && `${lock} = true;`}\n\t\t\t\t\t${mutations.length > 0 && mutations}\n\t\t\t\t\t${props.size > 0 && `#component.set({ ${Array.from(props).join(', ')} });`}\n\t\t\t\t\t${storeProps.size > 0 && `#component.store.set({ ${Array.from(storeProps).join(', ')} });`}\n\t\t\t\t\t${needsLock && `${lock} = false;`}\n\t\t\t\t}\n\t\t\t`);\n            group.events.forEach(name => {\n                block.builders.hydrate.addLine(`@addListener(${this.var}, \"${name}\", ${handler});`);\n                block.builders.destroy.addLine(`@removeListener(${this.var}, \"${name}\", ${handler});`);\n            });\n            const allInitialStateIsDefined = group.bindings\n                .map(binding => `'${binding.object}' in state`)\n                .join(' && ');\n            if (this.name === 'select' || group.bindings.find(binding => binding.name === 'indeterminate' || binding.isReadOnlyMediaAttribute)) {\n                this.generator.hasComplexBindings = true;\n                block.builders.hydrate.addLine(`if (!(${allInitialStateIsDefined})) #component.root._beforecreate.push(${handler});`);\n            }\n        });\n        this.initialUpdate = mungedBindings.map(binding => binding.initialUpdate).filter(Boolean).join('\\n');\n    }\n    addAttributes(block) {\n        if (this.attributes.find(attr => attr.type === 'Spread')) {\n            this.addSpreadAttributes(block);\n            return;\n        }\n        this.attributes.filter((a) => a.type === 'Attribute').forEach((attribute) => {\n            attribute.render(block);\n        });\n    }\n    addSpreadAttributes(block) {\n        const levels = block.getUniqueName(`${this.var}_levels`);\n        const data = block.getUniqueName(`${this.var}_data`);\n        const initialProps = [];\n        const updates = [];\n        this.attributes\n            .filter(attr => attr.type === 'Attribute' || attr.type === 'Spread')\n            .forEach(attr => {\n            if (attr.type === 'Attribute') {\n                const { dynamic, value, dependencies } = mungeAttribute(attr, block);\n                const snippet = `{ ${quoteIfNecessary(attr.name, this.generator.legacy)}: ${value} }`;\n                initialProps.push(snippet);\n                const condition = dependencies && dependencies.map(d => `changed.${d}`).join(' || ');\n                updates.push(condition ? `${condition} && ${snippet}` : snippet);\n            }\n            else {\n                block.contextualise(attr.expression); // TODO gah\n                const { snippet, dependencies } = attr.metadata;\n                initialProps.push(snippet);\n                const condition = dependencies && dependencies.map(d => `changed.${d}`).join(' || ');\n                updates.push(condition ? `${condition} && ${snippet}` : snippet);\n            }\n        });\n        block.builders.init.addBlock(deindent `\n\t\t\tvar ${levels} = [\n\t\t\t\t${initialProps.join(',\\n')}\n\t\t\t];\n\n\t\t\tvar ${data} = {};\n\t\t\tfor (var #i = 0; #i < ${levels}.length; #i += 1) {\n\t\t\t\t${data} = @assign(${data}, ${levels}[#i]);\n\t\t\t}\n\t\t`);\n        block.builders.hydrate.addLine(`@setAttributes(${this.var}, ${data});`);\n        block.builders.update.addBlock(deindent `\n\t\t\t@setAttributes(${this.var}, @getSpreadUpdate(${levels}, [\n\t\t\t\t${updates.join(',\\n')}\n\t\t\t]));\n\t\t`);\n    }\n    addEventHandlers(block, allUsedContexts) {\n        const { generator } = this;\n        let eventHandlerUsesComponent = false;\n        this.attributes.filter((a) => a.type === 'EventHandler').forEach((attribute) => {\n            const isCustomEvent = generator.events.has(attribute.name);\n            const shouldHoist = !isCustomEvent && this.hasAncestor('EachBlock');\n            const context = shouldHoist ? null : this.var;\n            const usedContexts = [];\n            if (attribute.expression) {\n                generator.addSourcemapLocations(attribute.expression);\n                const flattened = flatten(attribute.expression.callee);\n                if (!validCalleeObjects.has(flattened.name)) {\n                    // allow event.stopPropagation(), this.select() etc\n                    // TODO verify that it's a valid callee (i.e. built-in or declared method)\n                    generator.code.prependRight(attribute.expression.start, `${block.alias('component')}.`);\n                    if (shouldHoist)\n                        eventHandlerUsesComponent = true; // this feels a bit hacky but it works!\n                }\n                attribute.expression.arguments.forEach((arg) => {\n                    const { contexts } = block.contextualise(arg, context, true);\n                    contexts.forEach(context => {\n                        if (!~usedContexts.indexOf(context))\n                            usedContexts.push(context);\n                        allUsedContexts.add(context);\n                    });\n                });\n            }\n            const ctx = context || 'this';\n            const declarations = usedContexts\n                .map(name => {\n                if (name === 'state') {\n                    if (shouldHoist)\n                        eventHandlerUsesComponent = true;\n                    return `var state = ${block.alias('component')}.get();`;\n                }\n                const contextType = block.contextTypes.get(name);\n                if (contextType === 'each') {\n                    const listName = block.listNames.get(name);\n                    const indexName = block.indexNames.get(name);\n                    const contextName = block.contexts.get(name);\n                    return `var ${listName} = ${ctx}._svelte.${listName}, ${indexName} = ${ctx}._svelte.${indexName}, ${contextName} = ${listName}[${indexName}];`;\n                }\n            })\n                .filter(Boolean);\n            // get a name for the event handler that is globally unique\n            // if hoisted, locally unique otherwise\n            const handlerName = (shouldHoist ? generator : block).getUniqueName(`${attribute.name.replace(/[^a-zA-Z0-9_$]/g, '_')}_handler`);\n            // create the handler body\n            const handlerBody = deindent `\n\t\t\t\t${eventHandlerUsesComponent &&\n                `var ${block.alias('component')} = ${ctx}._svelte.component;`}\n\t\t\t\t${declarations}\n\t\t\t\t${attribute.expression ?\n                `[✂${attribute.expression.start}-${attribute.expression.end}✂];` :\n                `${block.alias('component')}.fire(\"${attribute.name}\", event);`}\n\t\t\t`;\n            if (isCustomEvent) {\n                block.addVariable(handlerName);\n                block.builders.hydrate.addBlock(deindent `\n\t\t\t\t\t${handlerName} = %events-${attribute.name}.call(#component, ${this.var}, function(event) {\n\t\t\t\t\t\t${handlerBody}\n\t\t\t\t\t});\n\t\t\t\t`);\n                if (generator.options.dev) {\n                    block.builders.hydrate.addBlock(deindent `\n\t\t\t\t\t\tif (${handlerName}.teardown) {\n\t\t\t\t\t\t\tconsole.warn(\"Return 'destroy()' from custom event handlers. Returning 'teardown()' has been deprecated and will be unsupported in Svelte 2\");\n\t\t\t\t\t\t}\n\t\t\t\t\t`);\n                }\n                block.builders.destroy.addLine(deindent `\n\t\t\t\t\t${handlerName}[${handlerName}.destroy ? 'destroy' : 'teardown']();\n\t\t\t\t`);\n            }\n            else {\n                const handler = deindent `\n\t\t\t\t\tfunction ${handlerName}(event) {\n\t\t\t\t\t\t${handlerBody}\n\t\t\t\t\t}\n\t\t\t\t`;\n                if (shouldHoist) {\n                    generator.blocks.push(handler);\n                }\n                else {\n                    block.builders.init.addBlock(handler);\n                }\n                block.builders.hydrate.addLine(`@addListener(${this.var}, \"${attribute.name}\", ${handlerName});`);\n                block.builders.destroy.addLine(`@removeListener(${this.var}, \"${attribute.name}\", ${handlerName});`);\n            }\n        });\n        return eventHandlerUsesComponent;\n    }\n    addRefs(block) {\n        // TODO it should surely be an error to have more than one ref\n        this.attributes.filter((a) => a.type === 'Ref').forEach((attribute) => {\n            const ref = `#component.refs.${attribute.name}`;\n            block.builders.mount.addLine(`${ref} = ${this.var};`);\n            block.builders.destroy.addLine(`if (${ref} === ${this.var}) ${ref} = null;`);\n            this.generator.usesRefs = true; // so component.refs object is created\n        });\n    }\n    addTransitions(block) {\n        const intro = this.attributes.find((a) => a.type === 'Transition' && a.intro);\n        const outro = this.attributes.find((a) => a.type === 'Transition' && a.outro);\n        if (!intro && !outro)\n            return;\n        if (intro === outro) {\n            block.contextualise(intro.expression); // TODO remove all these\n            const name = block.getUniqueName(`${this.var}_transition`);\n            const snippet = intro.expression\n                ? intro.metadata.snippet\n                : '{}';\n            block.addVariable(name);\n            const fn = `%transitions-${intro.name}`;\n            block.builders.intro.addBlock(deindent `\n\t\t\t\t#component.root._aftercreate.push(function() {\n\t\t\t\t\tif (!${name}) ${name} = @wrapTransition(#component, ${this.var}, ${fn}, ${snippet}, true, null);\n\t\t\t\t\t${name}.run(true, function() {\n\t\t\t\t\t\t#component.fire(\"intro.end\", { node: ${this.var} });\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t`);\n            block.builders.outro.addBlock(deindent `\n\t\t\t\t${name}.run(false, function() {\n\t\t\t\t\t#component.fire(\"outro.end\", { node: ${this.var} });\n\t\t\t\t\tif (--#outros === 0) #outrocallback();\n\t\t\t\t\t${name} = null;\n\t\t\t\t});\n\t\t\t`);\n        }\n        else {\n            const introName = intro && block.getUniqueName(`${this.var}_intro`);\n            const outroName = outro && block.getUniqueName(`${this.var}_outro`);\n            if (intro) {\n                block.contextualise(intro.expression);\n                block.addVariable(introName);\n                const snippet = intro.expression\n                    ? intro.metadata.snippet\n                    : '{}';\n                const fn = `%transitions-${intro.name}`; // TODO add built-in transitions?\n                if (outro) {\n                    block.builders.intro.addBlock(deindent `\n\t\t\t\t\t\tif (${introName}) ${introName}.abort();\n\t\t\t\t\t\tif (${outroName}) ${outroName}.abort();\n\t\t\t\t\t`);\n                }\n                block.builders.intro.addBlock(deindent `\n\t\t\t\t\t#component.root._aftercreate.push(function() {\n\t\t\t\t\t\t${introName} = @wrapTransition(#component, ${this.var}, ${fn}, ${snippet}, true, null);\n\t\t\t\t\t\t${introName}.run(true, function() {\n\t\t\t\t\t\t\t#component.fire(\"intro.end\", { node: ${this.var} });\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t`);\n            }\n            if (outro) {\n                block.contextualise(outro.expression);\n                block.addVariable(outroName);\n                const snippet = outro.expression\n                    ? outro.metadata.snippet\n                    : '{}';\n                const fn = `%transitions-${outro.name}`;\n                // TODO hide elements that have outro'd (unless they belong to a still-outroing\n                // group) prior to their removal from the DOM\n                block.builders.outro.addBlock(deindent `\n\t\t\t\t\t${outroName} = @wrapTransition(#component, ${this.var}, ${fn}, ${snippet}, false, null);\n\t\t\t\t\t${outroName}.run(false, function() {\n\t\t\t\t\t\t#component.fire(\"outro.end\", { node: ${this.var} });\n\t\t\t\t\t\tif (--#outros === 0) #outrocallback();\n\t\t\t\t\t});\n\t\t\t\t`);\n            }\n        }\n    }\n    addActions(block) {\n        this.attributes.filter((a) => a.type === 'Action').forEach((attribute) => {\n            const { expression } = attribute;\n            let snippet, dependencies;\n            if (expression) {\n                this.generator.addSourcemapLocations(expression);\n                block.contextualise(expression);\n                snippet = attribute.metadata.snippet;\n                dependencies = attribute.metadata.dependencies;\n            }\n            const name = block.getUniqueName(`${attribute.name.replace(/[^a-zA-Z0-9_$]/g, '_')}_action`);\n            block.addVariable(name);\n            const fn = `%actions-${attribute.name}`;\n            block.builders.hydrate.addLine(`${name} = ${fn}.call(#component, ${this.var}${snippet ? `, ${snippet}` : ''}) || {};`);\n            if (dependencies && dependencies.length) {\n                let conditional = `typeof ${name}.update === 'function' && `;\n                const deps = dependencies.map(dependency => `changed.${dependency}`).join(' || ');\n                conditional += dependencies.length > 1 ? `(${deps})` : deps;\n                block.builders.update.addConditional(conditional, `${name}.update.call(#component, ${snippet});`);\n            }\n            block.builders.destroy.addLine(`if (typeof ${name}.destroy === 'function') ${name}.destroy.call(#component);`);\n        });\n    }\n    getStaticAttributeValue(name) {\n        const attribute = this.attributes.find((attr) => attr.type === 'Attribute' && attr.name.toLowerCase() === name);\n        if (!attribute)\n            return null;\n        if (attribute.value === true)\n            return true;\n        if (attribute.value.length === 0)\n            return '';\n        if (attribute.value.length === 1 && attribute.value[0].type === 'Text') {\n            return attribute.value[0].data;\n        }\n        return null;\n    }\n    isMediaNode() {\n        return this.name === 'audio' || this.name === 'video';\n    }\n    remount(name) {\n        const slot = this.attributes.find(attribute => attribute.name === 'slot');\n        if (slot) {\n            return `@appendNode(${this.var}, ${name}._slotted.${this.getStaticAttributeValue('slot')});`;\n        }\n        return `@appendNode(${this.var}, ${name}._slotted${this.generator.legacy ? `[\"default\"]` : `.default`});`;\n    }\n    addCssClass() {\n        const classAttribute = this.attributes.find(a => a.name === 'class');\n        if (classAttribute && classAttribute.value !== true) {\n            if (classAttribute.value.length === 1 && classAttribute.value[0].type === 'Text') {\n                classAttribute.value[0].data += ` ${this.generator.stylesheet.id}`;\n            }\n            else {\n                classAttribute.value.push(new Node$1({ type: 'Text', data: ` ${this.generator.stylesheet.id}` }));\n            }\n        }\n        else {\n            this.attributes.push(new Attribute({\n                generator: this.generator,\n                name: 'class',\n                value: [new Node$1({ type: 'Text', data: `${this.generator.stylesheet.id}` })],\n                parent: this,\n            }));\n        }\n    }\n}\nfunction getRenderStatement(generator, namespace, name) {\n    if (namespace === 'http://www.w3.org/2000/svg') {\n        return `@createSvgElement(\"${name}\")`;\n    }\n    if (namespace) {\n        return `document.createElementNS(\"${namespace}\", \"${name}\")`;\n    }\n    return `@createElement(\"${name}\")`;\n}\nfunction getClaimStatement(generator, namespace, nodes, node) {\n    const attributes = node.attributes\n        .filter((attr) => attr.type === 'Attribute')\n        .map((attr) => `${quoteProp(attr.name, generator.legacy)}: true`)\n        .join(', ');\n    const name = namespace ? node.name : node.name.toUpperCase();\n    return `@claimElement(${nodes}, \"${name}\", ${attributes\n        ? `{ ${attributes} }`\n        : `{}`}, ${namespace === svg ? true : false})`;\n}\nfunction quoteProp(name, legacy) {\n    const isLegacyPropName = legacy && reservedNames.has(name);\n    if (/[^a-zA-Z_$0-9]/.test(name) || isLegacyPropName)\n        return `\"${name}\"`;\n    return name;\n}\nfunction stringifyAttributeValue(value) {\n    if (value === true)\n        return '';\n    if (value.length === 0)\n        return `=\"\"`;\n    const data = value[0].data;\n    return `=${JSON.stringify(data)}`;\n}\nconst events$1 = [\n    {\n        eventNames: ['input'],\n        filter: (node, name) => node.name === 'textarea' ||\n            node.name === 'input' && !/radio|checkbox/.test(node.getStaticAttributeValue('type'))\n    },\n    {\n        eventNames: ['change'],\n        filter: (node, name) => node.name === 'select' ||\n            node.name === 'input' && /radio|checkbox|range/.test(node.getStaticAttributeValue('type'))\n    },\n    // media events\n    {\n        eventNames: ['timeupdate'],\n        filter: (node, name) => node.isMediaNode() &&\n            (name === 'currentTime' || name === 'played')\n    },\n    {\n        eventNames: ['durationchange'],\n        filter: (node, name) => node.isMediaNode() &&\n            name === 'duration'\n    },\n    {\n        eventNames: ['play', 'pause'],\n        filter: (node, name) => node.isMediaNode() &&\n            name === 'paused'\n    },\n    {\n        eventNames: ['progress'],\n        filter: (node, name) => node.isMediaNode() &&\n            name === 'buffered'\n    },\n    {\n        eventNames: ['loadedmetadata'],\n        filter: (node, name) => node.isMediaNode() &&\n            (name === 'buffered' || name === 'seekable')\n    },\n    {\n        eventNames: ['volumechange'],\n        filter: (node, name) => node.isMediaNode() &&\n            name === 'volume'\n    }\n];\n\nclass ElseBlock extends Node$1 {\n}\n\nclass EventHandler extends Node$1 {\n}\n\nlet Block$1 = class Block {\n    constructor(options) {\n        this.generator = options.generator;\n        this.name = options.name;\n        this.expression = options.expression;\n        this.context = options.context;\n        this.destructuredContexts = options.destructuredContexts;\n        this.comment = options.comment;\n        // for keyed each blocks\n        this.key = options.key;\n        this.first = null;\n        this.contexts = options.contexts;\n        this.contextTypes = options.contextTypes;\n        this.indexes = options.indexes;\n        this.changeableIndexes = options.changeableIndexes;\n        this.dependencies = new Set();\n        this.indexNames = options.indexNames;\n        this.listNames = options.listNames;\n        this.builders = {\n            init: new CodeBuilder(),\n            create: new CodeBuilder(),\n            claim: new CodeBuilder(),\n            hydrate: new CodeBuilder(),\n            mount: new CodeBuilder(),\n            intro: new CodeBuilder(),\n            update: new CodeBuilder(),\n            outro: new CodeBuilder(),\n            unmount: new CodeBuilder(),\n            detachRaw: new CodeBuilder(),\n            destroy: new CodeBuilder(),\n        };\n        this.hasIntroMethod = false; // a block could have an intro method but not intro transitions, e.g. if a sibling block has intros\n        this.hasOutroMethod = false;\n        this.outros = 0;\n        this.getUniqueName = this.generator.getUniqueNameMaker([...this.contexts.values()]);\n        this.variables = new Map();\n        this.aliases = new Map()\n            .set('component', this.getUniqueName('component'))\n            .set('state', this.getUniqueName('state'));\n        if (this.key)\n            this.aliases.set('key', this.getUniqueName('key'));\n        this.hasUpdateMethod = false; // determined later\n    }\n    addDependencies(dependencies) {\n        dependencies.forEach(dependency => {\n            this.dependencies.add(dependency);\n        });\n    }\n    addElement(name, renderStatement, claimStatement, parentNode) {\n        this.addVariable(name);\n        this.builders.create.addLine(`${name} = ${renderStatement};`);\n        this.builders.claim.addLine(`${name} = ${claimStatement || renderStatement};`);\n        if (parentNode) {\n            this.builders.mount.addLine(`@appendNode(${name}, ${parentNode});`);\n            if (parentNode === 'document.head')\n                this.builders.unmount.addLine(`@detachNode(${name});`);\n        }\n        else {\n            this.builders.mount.addLine(`@insertNode(${name}, #target, anchor);`);\n            this.builders.unmount.addLine(`@detachNode(${name});`);\n        }\n    }\n    addVariable(name, init) {\n        if (this.variables.has(name) && this.variables.get(name) !== init) {\n            throw new Error(`Variable '${name}' already initialised with a different value`);\n        }\n        this.variables.set(name, init);\n    }\n    alias(name) {\n        if (!this.aliases.has(name)) {\n            this.aliases.set(name, this.getUniqueName(name));\n        }\n        return this.aliases.get(name);\n    }\n    child(options) {\n        return new Block$1(Object.assign({}, this, { key: null }, options, { parent: this }));\n    }\n    contextualise(expression, context, isEventHandler) {\n        return this.generator.contextualise(this.contexts, this.indexes, expression, context, isEventHandler);\n    }\n    toString() {\n        let introing;\n        const hasIntros = !this.builders.intro.isEmpty();\n        if (hasIntros) {\n            introing = this.getUniqueName('introing');\n            this.addVariable(introing);\n        }\n        let outroing;\n        const hasOutros = !this.builders.outro.isEmpty();\n        if (hasOutros) {\n            outroing = this.alias('outroing');\n            this.addVariable(outroing);\n        }\n        if (this.autofocus) {\n            this.builders.mount.addLine(`${this.autofocus}.focus();`);\n        }\n        // TODO `this.contexts` is possibly redundant post-#1122\n        const initializers = [];\n        this.contexts.forEach((name, context) => {\n            // TODO only the ones that are actually used in this block...\n            const listName = this.listNames.get(context);\n            const indexName = this.indexNames.get(context);\n            initializers.push(`${name} = state.${context}`, `${listName} = state.${listName}`, `${indexName} = state.${indexName}`);\n            this.hasUpdateMethod = true;\n        });\n        // minor hack – we need to ensure that any {{{triples}}} are detached first\n        this.builders.unmount.addBlockAtStart(this.builders.detachRaw.toString());\n        const properties = new CodeBuilder();\n        let localKey;\n        if (this.key) {\n            localKey = this.getUniqueName('key');\n            properties.addBlock(`key: ${localKey},`);\n        }\n        if (this.first) {\n            properties.addBlock(`first: null,`);\n            this.builders.hydrate.addLine(`this.first = ${this.first};`);\n        }\n        if (this.builders.create.isEmpty() && this.builders.hydrate.isEmpty()) {\n            properties.addBlock(`c: @noop,`);\n        }\n        else {\n            properties.addBlock(deindent `\n\t\t\t\tc: function create() {\n\t\t\t\t\t${this.builders.create}\n\t\t\t\t\t${!this.builders.hydrate.isEmpty() && `this.h();`}\n\t\t\t\t},\n\t\t\t`);\n        }\n        if (this.generator.hydratable) {\n            if (this.builders.claim.isEmpty() && this.builders.hydrate.isEmpty()) {\n                properties.addBlock(`l: @noop,`);\n            }\n            else {\n                properties.addBlock(deindent `\n\t\t\t\t\tl: function claim(nodes) {\n\t\t\t\t\t\t${this.builders.claim}\n\t\t\t\t\t\t${!this.builders.hydrate.isEmpty() && `this.h();`}\n\t\t\t\t\t},\n\t\t\t\t`);\n            }\n        }\n        if (!this.builders.hydrate.isEmpty()) {\n            properties.addBlock(deindent `\n\t\t\t\th: function hydrate() {\n\t\t\t\t\t${this.builders.hydrate}\n\t\t\t\t},\n\t\t\t`);\n        }\n        if (this.builders.mount.isEmpty()) {\n            properties.addBlock(`m: @noop,`);\n        }\n        else {\n            properties.addBlock(deindent `\n\t\t\t\tm: function mount(#target, anchor) {\n\t\t\t\t\t${this.builders.mount}\n\t\t\t\t},\n\t\t\t`);\n        }\n        if (this.hasUpdateMethod) {\n            if (this.builders.update.isEmpty() && initializers.length === 0) {\n                properties.addBlock(`p: @noop,`);\n            }\n            else {\n                properties.addBlock(deindent `\n\t\t\t\t\tp: function update(changed, state) {\n\t\t\t\t\t\t${initializers.map(str => `${str};`)}\n\t\t\t\t\t\t${this.builders.update}\n\t\t\t\t\t},\n\t\t\t\t`);\n            }\n        }\n        if (this.hasIntroMethod) {\n            if (hasIntros) {\n                properties.addBlock(deindent `\n\t\t\t\t\ti: function intro(#target, anchor) {\n\t\t\t\t\t\tif (${introing}) return;\n\t\t\t\t\t\t${introing} = true;\n\t\t\t\t\t\t${hasOutros && `${outroing} = false;`}\n\n\t\t\t\t\t\t${this.builders.intro}\n\n\t\t\t\t\t\tthis.m(#target, anchor);\n\t\t\t\t\t},\n\t\t\t\t`);\n            }\n            else {\n                properties.addBlock(deindent `\n\t\t\t\t\ti: function intro(#target, anchor) {\n\t\t\t\t\t\tthis.m(#target, anchor);\n\t\t\t\t\t},\n\t\t\t\t`);\n            }\n        }\n        if (this.hasOutroMethod) {\n            if (hasOutros) {\n                properties.addBlock(deindent `\n\t\t\t\t\to: function outro(#outrocallback) {\n\t\t\t\t\t\tif (${outroing}) return;\n\t\t\t\t\t\t${outroing} = true;\n\t\t\t\t\t\t${hasIntros && `${introing} = false;`}\n\n\t\t\t\t\t\tvar #outros = ${this.outros};\n\n\t\t\t\t\t\t${this.builders.outro}\n\t\t\t\t\t},\n\t\t\t\t`);\n            }\n            else {\n                properties.addBlock(deindent `\n\t\t\t\t\to: @run,\n\t\t\t\t`);\n            }\n        }\n        if (this.builders.unmount.isEmpty()) {\n            properties.addBlock(`u: @noop,`);\n        }\n        else {\n            properties.addBlock(deindent `\n\t\t\t\tu: function unmount() {\n\t\t\t\t\t${this.builders.unmount}\n\t\t\t\t},\n\t\t\t`);\n        }\n        if (this.builders.destroy.isEmpty()) {\n            properties.addBlock(`d: @noop`);\n        }\n        else {\n            properties.addBlock(deindent `\n\t\t\t\td: function destroy() {\n\t\t\t\t\t${this.builders.destroy}\n\t\t\t\t}\n\t\t\t`);\n        }\n        return deindent `\n\t\t\t${this.comment && `// ${escape(this.comment)}`}\n\t\t\tfunction ${this.name}(#component${this.key ? `, ${localKey}` : ''}, state) {\n\t\t\t\t${initializers.length > 0 &&\n            `var ${initializers.join(', ')};`}\n\t\t\t\t${this.variables.size > 0 &&\n            `var ${Array.from(this.variables.keys())\n                .map(key => {\n                const init = this.variables.get(key);\n                return init !== undefined ? `${key} = ${init}` : key;\n            })\n                .join(', ')};`}\n\n\t\t\t\t${!this.builders.init.isEmpty() && this.builders.init}\n\n\t\t\t\treturn {\n\t\t\t\t\t${properties}\n\t\t\t\t};\n\t\t\t}\n\t\t`.replace(/(#+)(\\w*)/g, (match, sigil, name) => {\n            return sigil === '#' ? this.alias(name) : sigil.slice(1) + name;\n        });\n    }\n};\n\nclass Fragment extends Node$1 {\n    init() {\n        this.block = new Block$1({\n            generator: this.generator,\n            name: '@create_main_fragment',\n            key: null,\n            contexts: new Map(),\n            indexes: new Map(),\n            changeableIndexes: new Map(),\n            indexNames: new Map(),\n            listNames: new Map(),\n            dependencies: new Set(),\n        });\n        this.generator.blocks.push(this.block);\n        this.initChildren(this.block, true, null);\n        this.block.hasUpdateMethod = true;\n    }\n    build() {\n        this.init();\n        this.children.forEach(child => {\n            child.build(this.block, null, 'nodes');\n        });\n    }\n}\n\nclass Head extends Node$1 {\n    init(block, stripWhitespace, nextSibling) {\n        this.initChildren(block, true, null);\n    }\n    build(block, parentNode, parentNodes) {\n        this.var = 'document.head';\n        this.children.forEach((child) => {\n            child.build(block, 'document.head', null);\n        });\n    }\n}\n\nfunction isElseIf(node) {\n    return (node && node.children.length === 1 && node.children[0].type === 'IfBlock');\n}\nfunction isElseBranch(branch) {\n    return branch.block && !branch.condition;\n}\nclass IfBlock extends Node$1 {\n    init(block, stripWhitespace, nextSibling) {\n        const { generator } = this;\n        this.cannotUseInnerHTML();\n        const blocks = [];\n        let dynamic = false;\n        let hasIntros = false;\n        let hasOutros = false;\n        function attachBlocks(node) {\n            node.var = block.getUniqueName(`if_block`);\n            block.addDependencies(node.metadata.dependencies);\n            node.block = block.child({\n                comment: createDebuggingComment(node, generator),\n                name: generator.getUniqueName(`create_if_block`),\n            });\n            blocks.push(node.block);\n            node.initChildren(node.block, stripWhitespace, nextSibling);\n            if (node.block.dependencies.size > 0) {\n                dynamic = true;\n                block.addDependencies(node.block.dependencies);\n            }\n            if (node.block.hasIntroMethod)\n                hasIntros = true;\n            if (node.block.hasOutroMethod)\n                hasOutros = true;\n            if (isElseIf(node.else)) {\n                attachBlocks(node.else.children[0]);\n            }\n            else if (node.else) {\n                node.else.block = block.child({\n                    comment: createDebuggingComment(node.else, generator),\n                    name: generator.getUniqueName(`create_if_block`),\n                });\n                blocks.push(node.else.block);\n                node.else.initChildren(node.else.block, stripWhitespace, nextSibling);\n                if (node.else.block.dependencies.size > 0) {\n                    dynamic = true;\n                    block.addDependencies(node.else.block.dependencies);\n                }\n            }\n        }\n        attachBlocks(this);\n        blocks.forEach(block => {\n            block.hasUpdateMethod = dynamic;\n            block.hasIntroMethod = hasIntros;\n            block.hasOutroMethod = hasOutros;\n        });\n        generator.blocks.push(...blocks);\n    }\n    build(block, parentNode, parentNodes) {\n        const name = this.var;\n        const needsAnchor = this.next ? !this.next.isDomNode() : !parentNode || !this.parent.isDomNode();\n        const anchor = needsAnchor\n            ? block.getUniqueName(`${name}_anchor`)\n            : (this.next && this.next.var) || 'null';\n        const branches = this.getBranches(block, parentNode, parentNodes, this);\n        const hasElse = isElseBranch(branches[branches.length - 1]);\n        const if_name = hasElse ? '' : `if (${name}) `;\n        const dynamic = branches[0].hasUpdateMethod; // can use [0] as proxy for all, since they necessarily have the same value\n        const hasOutros = branches[0].hasOutroMethod;\n        const vars = { name, anchor, if_name, hasElse };\n        if (this.else) {\n            if (hasOutros) {\n                this.buildCompoundWithOutros(block, parentNode, parentNodes, branches, dynamic, vars);\n            }\n            else {\n                this.buildCompound(block, parentNode, parentNodes, branches, dynamic, vars);\n            }\n        }\n        else {\n            this.buildSimple(block, parentNode, parentNodes, branches[0], dynamic, vars);\n        }\n        block.builders.create.addLine(`${if_name}${name}.c();`);\n        if (parentNodes) {\n            block.builders.claim.addLine(`${if_name}${name}.l(${parentNodes});`);\n        }\n        if (needsAnchor) {\n            block.addElement(anchor, `@createComment()`, parentNodes && `@createComment()`, parentNode);\n        }\n    }\n    buildCompound(block, parentNode, parentNodes, branches, dynamic, { name, anchor, hasElse, if_name }) {\n        const select_block_type = this.generator.getUniqueName(`select_block_type`);\n        const current_block_type = block.getUniqueName(`current_block_type`);\n        const current_block_type_and = hasElse ? '' : `${current_block_type} && `;\n        block.builders.init.addBlock(deindent `\n\t\t\tfunction ${select_block_type}(state) {\n\t\t\t\t${branches\n            .map(({ condition, block }) => `${condition ? `if (${condition}) ` : ''}return ${block};`)\n            .join('\\n')}\n\t\t\t}\n\t\t`);\n        block.builders.init.addBlock(deindent `\n\t\t\tvar ${current_block_type} = ${select_block_type}(state);\n\t\t\tvar ${name} = ${current_block_type_and}${current_block_type}(#component, state);\n\t\t`);\n        const mountOrIntro = branches[0].hasIntroMethod ? 'i' : 'm';\n        const initialMountNode = parentNode || '#target';\n        const anchorNode = parentNode ? 'null' : 'anchor';\n        block.builders.mount.addLine(`${if_name}${name}.${mountOrIntro}(${initialMountNode}, ${anchorNode});`);\n        const updateMountNode = this.getUpdateMountNode(anchor);\n        const changeBlock = deindent `\n\t\t\t${hasElse\n            ? deindent `\n\t\t\t\t\t${name}.u();\n\t\t\t\t\t${name}.d();\n\t\t\t\t`\n            : deindent `\n\t\t\t\t\tif (${name}) {\n\t\t\t\t\t\t${name}.u();\n\t\t\t\t\t\t${name}.d();\n\t\t\t\t\t}`}\n\t\t\t${name} = ${current_block_type_and}${current_block_type}(#component, state);\n\t\t\t${if_name}${name}.c();\n\t\t\t${if_name}${name}.${mountOrIntro}(${updateMountNode}, ${anchor});\n\t\t`;\n        if (dynamic) {\n            block.builders.update.addBlock(deindent `\n\t\t\t\tif (${current_block_type} === (${current_block_type} = ${select_block_type}(state)) && ${name}) {\n\t\t\t\t\t${name}.p(changed, state);\n\t\t\t\t} else {\n\t\t\t\t\t${changeBlock}\n\t\t\t\t}\n\t\t\t`);\n        }\n        else {\n            block.builders.update.addBlock(deindent `\n\t\t\t\tif (${current_block_type} !== (${current_block_type} = ${select_block_type}(state))) {\n\t\t\t\t\t${changeBlock}\n\t\t\t\t}\n\t\t\t`);\n        }\n        block.builders.unmount.addLine(`${if_name}${name}.u();`);\n        block.builders.destroy.addLine(`${if_name}${name}.d();`);\n    }\n    // if any of the siblings have outros, we need to keep references to the blocks\n    // (TODO does this only apply to bidi transitions?)\n    buildCompoundWithOutros(block, parentNode, parentNodes, branches, dynamic, { name, anchor, hasElse }) {\n        const select_block_type = block.getUniqueName(`select_block_type`);\n        const current_block_type_index = block.getUniqueName(`current_block_type_index`);\n        const previous_block_index = block.getUniqueName(`previous_block_index`);\n        const if_block_creators = block.getUniqueName(`if_block_creators`);\n        const if_blocks = block.getUniqueName(`if_blocks`);\n        const if_current_block_type_index = hasElse\n            ? ''\n            : `if (~${current_block_type_index}) `;\n        block.addVariable(current_block_type_index);\n        block.addVariable(name);\n        block.builders.init.addBlock(deindent `\n\t\t\tvar ${if_block_creators} = [\n\t\t\t\t${branches.map(branch => branch.block).join(',\\n')}\n\t\t\t];\n\n\t\t\tvar ${if_blocks} = [];\n\n\t\t\tfunction ${select_block_type}(state) {\n\t\t\t\t${branches\n            .map(({ condition, block }, i) => `${condition ? `if (${condition}) ` : ''}return ${block ? i : -1};`)\n            .join('\\n')}\n\t\t\t}\n\t\t`);\n        if (hasElse) {\n            block.builders.init.addBlock(deindent `\n\t\t\t\t${current_block_type_index} = ${select_block_type}(state);\n\t\t\t\t${name} = ${if_blocks}[${current_block_type_index}] = ${if_block_creators}[${current_block_type_index}](#component, state);\n\t\t\t`);\n        }\n        else {\n            block.builders.init.addBlock(deindent `\n\t\t\t\tif (~(${current_block_type_index} = ${select_block_type}(state))) {\n\t\t\t\t\t${name} = ${if_blocks}[${current_block_type_index}] = ${if_block_creators}[${current_block_type_index}](#component, state);\n\t\t\t\t}\n\t\t\t`);\n        }\n        const mountOrIntro = branches[0].hasIntroMethod ? 'i' : 'm';\n        const initialMountNode = parentNode || '#target';\n        const anchorNode = parentNode ? 'null' : 'anchor';\n        block.builders.mount.addLine(`${if_current_block_type_index}${if_blocks}[${current_block_type_index}].${mountOrIntro}(${initialMountNode}, ${anchorNode});`);\n        const updateMountNode = this.getUpdateMountNode(anchor);\n        const destroyOldBlock = deindent `\n\t\t\t${name}.o(function() {\n\t\t\t\t${if_blocks}[ ${previous_block_index} ].u();\n\t\t\t\t${if_blocks}[ ${previous_block_index} ].d();\n\t\t\t\t${if_blocks}[ ${previous_block_index} ] = null;\n\t\t\t});\n\t\t`;\n        const createNewBlock = deindent `\n\t\t\t${name} = ${if_blocks}[${current_block_type_index}];\n\t\t\tif (!${name}) {\n\t\t\t\t${name} = ${if_blocks}[${current_block_type_index}] = ${if_block_creators}[${current_block_type_index}](#component, state);\n\t\t\t\t${name}.c();\n\t\t\t}\n\t\t\t${name}.${mountOrIntro}(${updateMountNode}, ${anchor});\n\t\t`;\n        const changeBlock = hasElse\n            ? deindent `\n\t\t\t\t${destroyOldBlock}\n\n\t\t\t\t${createNewBlock}\n\t\t\t`\n            : deindent `\n\t\t\t\tif (${name}) {\n\t\t\t\t\t${destroyOldBlock}\n\t\t\t\t}\n\n\t\t\t\tif (~${current_block_type_index}) {\n\t\t\t\t\t${createNewBlock}\n\t\t\t\t} else {\n\t\t\t\t\t${name} = null;\n\t\t\t\t}\n\t\t\t`;\n        if (dynamic) {\n            block.builders.update.addBlock(deindent `\n\t\t\t\tvar ${previous_block_index} = ${current_block_type_index};\n\t\t\t\t${current_block_type_index} = ${select_block_type}(state);\n\t\t\t\tif (${current_block_type_index} === ${previous_block_index}) {\n\t\t\t\t\t${if_current_block_type_index}${if_blocks}[${current_block_type_index}].p(changed, state);\n\t\t\t\t} else {\n\t\t\t\t\t${changeBlock}\n\t\t\t\t}\n\t\t\t`);\n        }\n        else {\n            block.builders.update.addBlock(deindent `\n\t\t\t\tvar ${previous_block_index} = ${current_block_type_index};\n\t\t\t\t${current_block_type_index} = ${select_block_type}(state);\n\t\t\t\tif (${current_block_type_index} !== ${previous_block_index}) {\n\t\t\t\t\t${changeBlock}\n\t\t\t\t}\n\t\t\t`);\n        }\n        block.builders.destroy.addLine(deindent `\n\t\t\t${if_current_block_type_index}{\n\t\t\t\t${if_blocks}[${current_block_type_index}].u();\n\t\t\t\t${if_blocks}[${current_block_type_index}].d();\n\t\t\t}\n\t\t`);\n    }\n    buildSimple(block, parentNode, parentNodes, branch, dynamic, { name, anchor, if_name }) {\n        block.builders.init.addBlock(deindent `\n\t\t\tvar ${name} = (${branch.condition}) && ${branch.block}(#component, state);\n\t\t`);\n        const mountOrIntro = branch.hasIntroMethod ? 'i' : 'm';\n        const initialMountNode = parentNode || '#target';\n        const anchorNode = parentNode ? 'null' : 'anchor';\n        block.builders.mount.addLine(`if (${name}) ${name}.${mountOrIntro}(${initialMountNode}, ${anchorNode});`);\n        const updateMountNode = this.getUpdateMountNode(anchor);\n        const enter = dynamic\n            ? branch.hasIntroMethod\n                ? deindent `\n\t\t\t\t\tif (${name}) {\n\t\t\t\t\t\t${name}.p(changed, state);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t${name} = ${branch.block}(#component, state);\n\t\t\t\t\t\tif (${name}) ${name}.c();\n\t\t\t\t\t}\n\n\t\t\t\t\t${name}.i(${updateMountNode}, ${anchor});\n\t\t\t\t`\n                : deindent `\n\t\t\t\t\tif (${name}) {\n\t\t\t\t\t\t${name}.p(changed, state);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t${name} = ${branch.block}(#component, state);\n\t\t\t\t\t\t${name}.c();\n\t\t\t\t\t\t${name}.m(${updateMountNode}, ${anchor});\n\t\t\t\t\t}\n\t\t\t\t`\n            : branch.hasIntroMethod\n                ? deindent `\n\t\t\t\t\tif (!${name}) {\n\t\t\t\t\t\t${name} = ${branch.block}(#component, state);\n\t\t\t\t\t\t${name}.c();\n\t\t\t\t\t}\n\t\t\t\t\t${name}.i(${updateMountNode}, ${anchor});\n\t\t\t\t`\n                : deindent `\n\t\t\t\t\tif (!${name}) {\n\t\t\t\t\t\t${name} = ${branch.block}(#component, state);\n\t\t\t\t\t\t${name}.c();\n\t\t\t\t\t\t${name}.m(${updateMountNode}, ${anchor});\n\t\t\t\t\t}\n\t\t\t\t`;\n        // no `p()` here — we don't want to update outroing nodes,\n        // as that will typically result in glitching\n        const exit = branch.hasOutroMethod\n            ? deindent `\n\t\t\t\t${name}.o(function() {\n\t\t\t\t\t${name}.u();\n\t\t\t\t\t${name}.d();\n\t\t\t\t\t${name} = null;\n\t\t\t\t});\n\t\t\t`\n            : deindent `\n\t\t\t\t${name}.u();\n\t\t\t\t${name}.d();\n\t\t\t\t${name} = null;\n\t\t\t`;\n        block.builders.update.addBlock(deindent `\n\t\t\tif (${branch.condition}) {\n\t\t\t\t${enter}\n\t\t\t} else if (${name}) {\n\t\t\t\t${exit}\n\t\t\t}\n\t\t`);\n        block.builders.unmount.addLine(`${if_name}${name}.u();`);\n        block.builders.destroy.addLine(`${if_name}${name}.d();`);\n    }\n    getBranches(block, parentNode, parentNodes, node) {\n        block.contextualise(node.expression); // TODO remove\n        const branches = [\n            {\n                condition: node.metadata.snippet,\n                block: node.block.name,\n                hasUpdateMethod: node.block.hasUpdateMethod,\n                hasIntroMethod: node.block.hasIntroMethod,\n                hasOutroMethod: node.block.hasOutroMethod,\n            },\n        ];\n        this.visitChildren(block, node);\n        if (isElseIf(node.else)) {\n            branches.push(...this.getBranches(block, parentNode, parentNodes, node.else.children[0]));\n        }\n        else {\n            branches.push({\n                condition: null,\n                block: node.else ? node.else.block.name : null,\n                hasUpdateMethod: node.else ? node.else.block.hasUpdateMethod : false,\n                hasIntroMethod: node.else ? node.else.block.hasIntroMethod : false,\n                hasOutroMethod: node.else ? node.else.block.hasOutroMethod : false,\n            });\n            if (node.else) {\n                this.visitChildren(block, node.else);\n            }\n        }\n        return branches;\n    }\n    visitChildren(block, node) {\n        node.children.forEach((child) => {\n            child.build(node.block, null, 'nodes');\n        });\n    }\n}\n\nclass Tag extends Node$1 {\n    renameThisMethod(block, update) {\n        const { indexes } = block.contextualise(this.expression);\n        const { dependencies, snippet } = this.metadata;\n        const hasChangeableIndex = Array.from(indexes).some(index => block.changeableIndexes.get(index));\n        const shouldCache = (this.expression.type !== 'Identifier' ||\n            block.contexts.has(this.expression.name) ||\n            hasChangeableIndex);\n        const value = shouldCache && block.getUniqueName(`${this.var}_value`);\n        const content = shouldCache ? value : snippet;\n        if (shouldCache)\n            block.addVariable(value, snippet);\n        if (dependencies.length || hasChangeableIndex) {\n            const changedCheck = ((block.hasOutroMethod ? `#outroing || ` : '') +\n                dependencies.map((dependency) => `changed.${dependency}`).join(' || '));\n            const updateCachedValue = `${value} !== (${value} = ${snippet})`;\n            const condition = shouldCache ?\n                (dependencies.length ? `(${changedCheck}) && ${updateCachedValue}` : updateCachedValue) :\n                changedCheck;\n            block.builders.update.addConditional(condition, update(content));\n        }\n        return { init: content };\n    }\n}\n\nclass MustacheTag extends Tag {\n    init(block) {\n        this.cannotUseInnerHTML();\n        this.var = block.getUniqueName('text');\n        block.addDependencies(this.metadata.dependencies);\n    }\n    build(block, parentNode, parentNodes) {\n        const { init } = this.renameThisMethod(block, value => `${this.var}.data = ${value};`);\n        block.addElement(this.var, `@createText(${init})`, parentNodes && `@claimText(${parentNodes}, ${init})`, parentNode);\n    }\n    remount(name) {\n        return `@appendNode(${this.var}, ${name}._slotted${this.generator.legacy ? `[\"default\"]` : `.default`});`;\n    }\n}\n\nclass PendingBlock extends Node$1 {\n}\n\nclass RawMustacheTag extends Tag {\n    init(block) {\n        this.cannotUseInnerHTML();\n        this.var = block.getUniqueName('raw');\n        block.addDependencies(this.metadata.dependencies);\n    }\n    build(block, parentNode, parentNodes) {\n        const name = this.var;\n        const needsAnchorBefore = this.prev ? this.prev.type !== 'Element' : !parentNode;\n        const needsAnchorAfter = this.next ? this.next.type !== 'Element' : !parentNode;\n        const anchorBefore = needsAnchorBefore\n            ? block.getUniqueName(`${name}_before`)\n            : (this.prev && this.prev.var) || 'null';\n        const anchorAfter = needsAnchorAfter\n            ? block.getUniqueName(`${name}_after`)\n            : (this.next && this.next.var) || 'null';\n        let detach;\n        let insert;\n        let useInnerHTML = false;\n        if (anchorBefore === 'null' && anchorAfter === 'null') {\n            useInnerHTML = true;\n            detach = `${parentNode}.innerHTML = '';`;\n            insert = content => `${parentNode}.innerHTML = ${content};`;\n        }\n        else if (anchorBefore === 'null') {\n            detach = `@detachBefore(${anchorAfter});`;\n            insert = content => `${anchorAfter}.insertAdjacentHTML(\"beforebegin\", ${content});`;\n        }\n        else if (anchorAfter === 'null') {\n            detach = `@detachAfter(${anchorBefore});`;\n            insert = content => `${anchorBefore}.insertAdjacentHTML(\"afterend\", ${content});`;\n        }\n        else {\n            detach = `@detachBetween(${anchorBefore}, ${anchorAfter});`;\n            insert = content => `${anchorBefore}.insertAdjacentHTML(\"afterend\", ${content});`;\n        }\n        const { init } = this.renameThisMethod(block, content => deindent `\n\t\t\t\t${!useInnerHTML && detach}\n\t\t\t\t${insert(content)}\n\t\t\t`);\n        // we would have used comments here, but the `insertAdjacentHTML` api only\n        // exists for `Element`s.\n        if (needsAnchorBefore) {\n            block.addElement(anchorBefore, `@createElement('noscript')`, parentNodes && `@createElement('noscript')`, parentNode);\n        }\n        function addAnchorAfter() {\n            block.addElement(anchorAfter, `@createElement('noscript')`, parentNodes && `@createElement('noscript')`, parentNode);\n        }\n        if (needsAnchorAfter && anchorBefore === 'null') {\n            // anchorAfter needs to be in the DOM before we\n            // insert the HTML...\n            addAnchorAfter();\n        }\n        block.builders.mount.addLine(insert(init));\n        block.builders.detachRaw.addBlock(detach);\n        if (needsAnchorAfter && anchorBefore !== 'null') {\n            // ...otherwise it should go afterwards\n            addAnchorAfter();\n        }\n    }\n    remount(name) {\n        return `@appendNode(${this.var}, ${name}._slotted${this.generator.legacy ? `[\"default\"]` : `.default`});`;\n    }\n}\n\nclass Ref extends Node$1 {\n}\n\nclass Slot extends Element {\n    init(block, stripWhitespace, nextSibling) {\n        this.cannotUseInnerHTML();\n        this.var = block.getUniqueName('slot');\n        if (this.children.length) {\n            this.initChildren(block, stripWhitespace, nextSibling);\n        }\n    }\n    build(block, parentNode, parentNodes) {\n        const { generator } = this;\n        const slotName = this.getStaticAttributeValue('name') || 'default';\n        generator.slots.add(slotName);\n        const content_name = block.getUniqueName(`slot_content_${slotName}`);\n        const prop = !isValidIdentifier(slotName) || (generator.legacy && reservedNames.has(slotName)) ? `[\"${slotName}\"]` : `.${slotName}`;\n        block.addVariable(content_name, `#component._slotted${prop}`);\n        const needsAnchorBefore = this.prev ? this.prev.type !== 'Element' : !parentNode;\n        const needsAnchorAfter = this.next ? this.next.type !== 'Element' : !parentNode;\n        const anchorBefore = needsAnchorBefore\n            ? block.getUniqueName(`${content_name}_before`)\n            : (this.prev && this.prev.var) || 'null';\n        const anchorAfter = needsAnchorAfter\n            ? block.getUniqueName(`${content_name}_after`)\n            : (this.next && this.next.var) || 'null';\n        if (needsAnchorBefore)\n            block.addVariable(anchorBefore);\n        if (needsAnchorAfter)\n            block.addVariable(anchorAfter);\n        let mountBefore = block.builders.mount.toString();\n        let unmountBefore = block.builders.unmount.toString();\n        block.builders.create.pushCondition(`!${content_name}`);\n        block.builders.hydrate.pushCondition(`!${content_name}`);\n        block.builders.mount.pushCondition(`!${content_name}`);\n        block.builders.update.pushCondition(`!${content_name}`);\n        block.builders.unmount.pushCondition(`!${content_name}`);\n        block.builders.destroy.pushCondition(`!${content_name}`);\n        this.children.forEach((child) => {\n            child.build(block, parentNode, parentNodes);\n        });\n        block.builders.create.popCondition();\n        block.builders.hydrate.popCondition();\n        block.builders.mount.popCondition();\n        block.builders.update.popCondition();\n        block.builders.unmount.popCondition();\n        block.builders.destroy.popCondition();\n        const mountLeadin = block.builders.mount.toString() !== mountBefore\n            ? `else`\n            : `if (${content_name})`;\n        if (parentNode) {\n            block.builders.mount.addBlock(deindent `\n\t\t\t\t${mountLeadin} {\n\t\t\t\t\t${needsAnchorBefore && `@appendNode(${anchorBefore} || (${anchorBefore} = @createComment()), ${parentNode});`}\n\t\t\t\t\t@appendNode(${content_name}, ${parentNode});\n\t\t\t\t\t${needsAnchorAfter && `@appendNode(${anchorAfter} || (${anchorAfter} = @createComment()), ${parentNode});`}\n\t\t\t\t}\n\t\t\t`);\n        }\n        else {\n            block.builders.mount.addBlock(deindent `\n\t\t\t\t${mountLeadin} {\n\t\t\t\t\t${needsAnchorBefore && `@insertNode(${anchorBefore} || (${anchorBefore} = @createComment()), #target, anchor);`}\n\t\t\t\t\t@insertNode(${content_name}, #target, anchor);\n\t\t\t\t\t${needsAnchorAfter && `@insertNode(${anchorAfter} || (${anchorAfter} = @createComment()), #target, anchor);`}\n\t\t\t\t}\n\t\t\t`);\n        }\n        // if the slot is unmounted, move nodes back into the document fragment,\n        // so that it can be reinserted later\n        // TODO so that this can work with public API, component._slotted should\n        // be all fragments, derived from options.slots. Not === options.slots\n        const unmountLeadin = block.builders.unmount.toString() !== unmountBefore\n            ? `else`\n            : `if (${content_name})`;\n        if (anchorBefore === 'null' && anchorAfter === 'null') {\n            block.builders.unmount.addBlock(deindent `\n\t\t\t\t${unmountLeadin} {\n\t\t\t\t\t@reinsertChildren(${parentNode}, ${content_name});\n\t\t\t\t}\n\t\t\t`);\n        }\n        else if (anchorBefore === 'null') {\n            block.builders.unmount.addBlock(deindent `\n\t\t\t\t${unmountLeadin} {\n\t\t\t\t\t@reinsertBefore(${anchorAfter}, ${content_name});\n\t\t\t\t}\n\t\t\t`);\n        }\n        else if (anchorAfter === 'null') {\n            block.builders.unmount.addBlock(deindent `\n\t\t\t\t${unmountLeadin} {\n\t\t\t\t\t@reinsertAfter(${anchorBefore}, ${content_name});\n\t\t\t\t}\n\t\t\t`);\n        }\n        else {\n            block.builders.unmount.addBlock(deindent `\n\t\t\t\t${unmountLeadin} {\n\t\t\t\t\t@reinsertBetween(${anchorBefore}, ${anchorAfter}, ${content_name});\n\t\t\t\t\t@detachNode(${anchorBefore});\n\t\t\t\t\t@detachNode(${anchorAfter});\n\t\t\t\t}\n\t\t\t`);\n        }\n    }\n    getStaticAttributeValue(name) {\n        const attribute = this.attributes.find((attr) => attr.name.toLowerCase() === name);\n        if (!attribute)\n            return null;\n        if (attribute.value === true)\n            return true;\n        if (attribute.value.length === 0)\n            return '';\n        if (attribute.value.length === 1 && attribute.value[0].type === 'Text') {\n            return attribute.value[0].data;\n        }\n        return null;\n    }\n}\n\n// Whitespace inside one of these elements will not result in\n// a whitespace node being created in any circumstances. (This\n// list is almost certainly very incomplete)\nconst elementsWithoutText = new Set([\n    'audio',\n    'datalist',\n    'dl',\n    'ol',\n    'optgroup',\n    'select',\n    'ul',\n    'video',\n]);\nfunction shouldSkip$1(node) {\n    if (/\\S/.test(node.data))\n        return false;\n    const parentElement = node.findNearest(/(?:Element|Component|Head)/);\n    if (!parentElement)\n        return false;\n    if (parentElement.type === 'Head')\n        return true;\n    if (parentElement.type === 'Component')\n        return parentElement.children.length === 1 && node === parentElement.children[0];\n    return parentElement.namespace || elementsWithoutText.has(parentElement.name);\n}\nclass Text extends Node$1 {\n    init(block) {\n        const parentElement = this.findNearest(/(?:Element|Component)/);\n        if (shouldSkip$1(this)) {\n            this.shouldSkip = true;\n            return;\n        }\n        this.var = block.getUniqueName(`text`);\n    }\n    build(block, parentNode, parentNodes) {\n        if (this.shouldSkip)\n            return;\n        block.addElement(this.var, `@createText(${stringify(this.data)})`, parentNodes && `@claimText(${parentNodes}, ${stringify(this.data)})`, parentNode);\n    }\n    remount(name) {\n        return `@appendNode(${this.var}, ${name}._slotted${this.generator.legacy ? `[\"default\"]` : `.default`});`;\n    }\n}\n\nclass ThenBlock extends Node$1 {\n}\n\nclass Title extends Node$1 {\n    build(block, parentNode, parentNodes) {\n        const isDynamic = !!this.children.find(node => node.type !== 'Text');\n        if (isDynamic) {\n            let value;\n            const allDependencies = new Set();\n            let shouldCache;\n            // TODO some of this code is repeated in Tag.ts — would be good to\n            // DRY it out if that's possible without introducing crazy indirection\n            if (this.children.length === 1) {\n                // single {{tag}} — may be a non-string\n                const { expression } = this.children[0];\n                const { indexes } = block.contextualise(expression);\n                const { dependencies, snippet } = this.children[0].metadata;\n                value = snippet;\n                dependencies.forEach(d => {\n                    allDependencies.add(d);\n                });\n                shouldCache = (expression.type !== 'Identifier' ||\n                    block.contexts.has(expression.name));\n            }\n            else {\n                // '{{foo}} {{bar}}' — treat as string concatenation\n                value =\n                    (this.children[0].type === 'Text' ? '' : `\"\" + `) +\n                        this.children\n                            .map((chunk) => {\n                            if (chunk.type === 'Text') {\n                                return stringify(chunk.data);\n                            }\n                            else {\n                                const { indexes } = block.contextualise(chunk.expression);\n                                const { dependencies, snippet } = chunk.metadata;\n                                dependencies.forEach(d => {\n                                    allDependencies.add(d);\n                                });\n                                return getExpressionPrecedence(chunk.expression) <= 13 ? `(${snippet})` : snippet;\n                            }\n                        })\n                            .join(' + ');\n                shouldCache = true;\n            }\n            const last = shouldCache && block.getUniqueName(`title_value`);\n            if (shouldCache)\n                block.addVariable(last);\n            let updater;\n            const init = shouldCache ? `${last} = ${value}` : value;\n            block.builders.init.addLine(`document.title = ${init};`);\n            updater = `document.title = ${shouldCache ? last : value};`;\n            if (allDependencies.size) {\n                const dependencies = Array.from(allDependencies);\n                const changedCheck = ((block.hasOutroMethod ? `#outroing || ` : '') +\n                    dependencies.map(dependency => `changed.${dependency}`).join(' || '));\n                const updateCachedValue = `${last} !== (${last} = ${value})`;\n                const condition = shouldCache ?\n                    (dependencies.length ? `(${changedCheck}) && ${updateCachedValue}` : updateCachedValue) :\n                    changedCheck;\n                block.builders.update.addConditional(condition, updater);\n            }\n        }\n        else {\n            const value = stringify(this.children[0].data);\n            block.builders.hydrate.addLine(`document.title = ${value};`);\n        }\n    }\n}\n\nclass Transition extends Node$1 {\n}\n\nconst associatedEvents = {\n    innerWidth: 'resize',\n    innerHeight: 'resize',\n    outerWidth: 'resize',\n    outerHeight: 'resize',\n    scrollX: 'scroll',\n    scrollY: 'scroll',\n};\nconst properties = {\n    scrollX: 'pageXOffset',\n    scrollY: 'pageYOffset'\n};\nconst readonly = new Set([\n    'innerWidth',\n    'innerHeight',\n    'outerWidth',\n    'outerHeight',\n    'online',\n]);\nclass Window extends Node$1 {\n    build(block, parentNode, parentNodes) {\n        const { generator } = this;\n        const events = {};\n        const bindings = {};\n        this.attributes.forEach((attribute) => {\n            if (attribute.type === 'EventHandler') {\n                // TODO verify that it's a valid callee (i.e. built-in or declared method)\n                generator.addSourcemapLocations(attribute.expression);\n                const isCustomEvent = generator.events.has(attribute.name);\n                let usesState = false;\n                attribute.expression.arguments.forEach((arg) => {\n                    block.contextualise(arg, null, true);\n                    const { dependencies } = arg.metadata;\n                    if (dependencies.length)\n                        usesState = true;\n                });\n                const flattened = flatten(attribute.expression.callee);\n                if (flattened.name !== 'event' && flattened.name !== 'this') {\n                    // allow event.stopPropagation(), this.select() etc\n                    generator.code.prependRight(attribute.expression.start, `${block.alias('component')}.`);\n                }\n                const handlerName = block.getUniqueName(`onwindow${attribute.name}`);\n                const handlerBody = deindent `\n\t\t\t\t\t${usesState && `var state = #component.get();`}\n\t\t\t\t\t[✂${attribute.expression.start}-${attribute.expression.end}✂];\n\t\t\t\t`;\n                if (isCustomEvent) {\n                    // TODO dry this out\n                    block.addVariable(handlerName);\n                    block.builders.hydrate.addBlock(deindent `\n\t\t\t\t\t\t${handlerName} = %events-${attribute.name}.call(#component, window, function(event) {\n\t\t\t\t\t\t\t${handlerBody}\n\t\t\t\t\t\t});\n\t\t\t\t\t`);\n                    if (generator.options.dev) {\n                        block.builders.hydrate.addBlock(deindent `\n\t\t\t\t\t\t\tif (${handlerName}.teardown) {\n\t\t\t\t\t\t\t\tconsole.warn(\"Return 'destroy()' from custom event handlers. Returning 'teardown()' has been deprecated and will be unsupported in Svelte 2\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t`);\n                    }\n                    block.builders.destroy.addLine(deindent `\n\t\t\t\t\t\t${handlerName}[${handlerName}.destroy ? 'destroy' : 'teardown']();\n\t\t\t\t\t`);\n                }\n                else {\n                    block.builders.init.addBlock(deindent `\n\t\t\t\t\t\tfunction ${handlerName}(event) {\n\t\t\t\t\t\t\t${handlerBody}\n\t\t\t\t\t\t}\n\t\t\t\t\t\twindow.addEventListener(\"${attribute.name}\", ${handlerName});\n\t\t\t\t\t`);\n                    block.builders.destroy.addBlock(deindent `\n\t\t\t\t\t\twindow.removeEventListener(\"${attribute.name}\", ${handlerName});\n\t\t\t\t\t`);\n                }\n            }\n            if (attribute.type === 'Binding') {\n                // in dev mode, throw if read-only values are written to\n                if (readonly.has(attribute.name)) {\n                    generator.readonly.add(attribute.value.name);\n                }\n                bindings[attribute.name] = attribute.value.name;\n                // bind:online is a special case, we need to listen for two separate events\n                if (attribute.name === 'online')\n                    return;\n                const associatedEvent = associatedEvents[attribute.name];\n                const property = properties[attribute.name] || attribute.name;\n                if (!events[associatedEvent])\n                    events[associatedEvent] = [];\n                events[associatedEvent].push(`${attribute.value.name}: this.${property}`);\n                // add initial value\n                generator.metaBindings.push(`this._state.${attribute.value.name} = window.${property};`);\n            }\n        });\n        const lock = block.getUniqueName(`window_updating`);\n        const clear = block.getUniqueName(`clear_window_updating`);\n        const timeout = block.getUniqueName(`window_updating_timeout`);\n        Object.keys(events).forEach(event => {\n            const handlerName = block.getUniqueName(`onwindow${event}`);\n            const props = events[event].join(',\\n');\n            if (event === 'scroll') {\n                // TODO other bidirectional bindings...\n                block.addVariable(lock, 'false');\n                block.addVariable(clear, `function() { ${lock} = false; }`);\n                block.addVariable(timeout);\n            }\n            const handlerBody = deindent `\n\t\t\t\t${event === 'scroll' && deindent `\n\t\t\t\t\tif (${lock}) return;\n\t\t\t\t\t${lock} = true;\n\t\t\t\t`}\n\t\t\t\t${generator.options.dev && `component._updatingReadonlyProperty = true;`}\n\n\t\t\t\t#component.set({\n\t\t\t\t\t${props}\n\t\t\t\t});\n\n\t\t\t\t${generator.options.dev && `component._updatingReadonlyProperty = false;`}\n\t\t\t\t${event === 'scroll' && `${lock} = false;`}\n\t\t\t`;\n            block.builders.init.addBlock(deindent `\n\t\t\t\tfunction ${handlerName}(event) {\n\t\t\t\t\t${handlerBody}\n\t\t\t\t}\n\t\t\t\twindow.addEventListener(\"${event}\", ${handlerName});\n\t\t\t`);\n            block.builders.destroy.addBlock(deindent `\n\t\t\t\twindow.removeEventListener(\"${event}\", ${handlerName});\n\t\t\t`);\n        });\n        // special case... might need to abstract this out if we add more special cases\n        if (bindings.scrollX && bindings.scrollY) {\n            const observerCallback = block.getUniqueName(`scrollobserver`);\n            block.builders.init.addBlock(deindent `\n\t\t\t\tfunction ${observerCallback}() {\n\t\t\t\t\t${lock} = true;\n\t\t\t\t\tclearTimeout(${timeout});\n\t\t\t\t\tvar x = ${bindings.scrollX\n                ? `#component.get(\"${bindings.scrollX}\")`\n                : `window.pageXOffset`};\n\t\t\t\t\tvar y = ${bindings.scrollY\n                ? `#component.get(\"${bindings.scrollY}\")`\n                : `window.pageYOffset`};\n\t\t\t\t\twindow.scrollTo(x, y);\n\t\t\t\t\t${timeout} = setTimeout(${clear}, 100);\n\t\t\t\t}\n\t\t\t`);\n            if (bindings.scrollX)\n                block.builders.init.addLine(`#component.observe(\"${bindings.scrollX}\", ${observerCallback});`);\n            if (bindings.scrollY)\n                block.builders.init.addLine(`#component.observe(\"${bindings.scrollY}\", ${observerCallback});`);\n        }\n        else if (bindings.scrollX || bindings.scrollY) {\n            const isX = !!bindings.scrollX;\n            block.builders.init.addBlock(deindent `\n\t\t\t\t#component.observe(\"${bindings.scrollX || bindings.scrollY}\", function(${isX ? 'x' : 'y'}) {\n\t\t\t\t\t${lock} = true;\n\t\t\t\t\tclearTimeout(${timeout});\n\t\t\t\t\twindow.scrollTo(${isX ? 'x, window.pageYOffset' : 'window.pageXOffset, y'});\n\t\t\t\t\t${timeout} = setTimeout(${clear}, 100);\n\t\t\t\t});\n\t\t\t`);\n        }\n        // another special case. (I'm starting to think these are all special cases.)\n        if (bindings.online) {\n            const handlerName = block.getUniqueName(`onlinestatuschanged`);\n            block.builders.init.addBlock(deindent `\n\t\t\t\tfunction ${handlerName}(event) {\n\t\t\t\t\t#component.set({ ${bindings.online}: navigator.onLine });\n\t\t\t\t}\n\t\t\t\twindow.addEventListener(\"online\", ${handlerName});\n\t\t\t\twindow.addEventListener(\"offline\", ${handlerName});\n\t\t\t`);\n            // add initial value\n            generator.metaBindings.push(`this._state.${bindings.online} = navigator.onLine;`);\n            block.builders.destroy.addBlock(deindent `\n\t\t\t\twindow.removeEventListener(\"online\", ${handlerName});\n\t\t\t\twindow.removeEventListener(\"offline\", ${handlerName});\n\t\t\t`);\n        }\n    }\n}\n\nconst nodes = {\n    Attribute,\n    AwaitBlock,\n    Action,\n    Binding,\n    CatchBlock,\n    Comment: Comment$1,\n    Component,\n    EachBlock,\n    Element,\n    ElseBlock,\n    EventHandler,\n    Fragment,\n    Head,\n    IfBlock,\n    MustacheTag,\n    PendingBlock,\n    RawMustacheTag,\n    Ref,\n    Slot,\n    Text,\n    ThenBlock,\n    Title,\n    Transition,\n    Window\n};\n\nfunction detectIndentation(str) {\n    const pattern = /^[\\t\\s]{1,4}/gm;\n    let match;\n    while (match = pattern.exec(str)) {\n        if (match[0][0] === '\\t')\n            return '\\t';\n        if (match[0].length === 2)\n            return '  ';\n    }\n    return '    ';\n}\nfunction getIndentationLevel(str, b) {\n    let a = b;\n    while (a > 0 && str[a - 1] !== '\\n')\n        a -= 1;\n    return /^\\s*/.exec(str.slice(a, b))[0];\n}\nfunction getIndentExclusionRanges(node) {\n    const ranges = [];\n    walk(node, {\n        enter(node) {\n            if (node.type === 'TemplateElement')\n                ranges.push(node);\n        }\n    });\n    return ranges;\n}\nfunction removeIndentation(code, start, end, indentationLevel, ranges) {\n    const str = code.original.slice(start, end);\n    const pattern = new RegExp(`^${indentationLevel}`, 'gm');\n    let match;\n    while (match = pattern.exec(str)) {\n        // TODO bail if we're inside an exclusion range\n        code.remove(start + match.index, start + match.index + indentationLevel.length);\n    }\n}\n// We need to tell estree-walker that it should always\n// look for an `else` block, otherwise it might get\n// the wrong idea about the shape of each/if blocks\nchildKeys.EachBlock = childKeys.IfBlock = ['children', 'else'];\nchildKeys.Attribute = ['value'];\nclass Generator {\n    constructor(parsed, source, name, stylesheet, options, stats, dom) {\n        stats.start('compile');\n        this.stats = stats;\n        this.v2 = options.parser === 'v2';\n        this.ast = clone(parsed);\n        this.parsed = parsed;\n        this.source = source;\n        this.options = options;\n        this.imports = [];\n        this.helpers = new Set();\n        this.components = new Set();\n        this.events = new Set();\n        this.transitions = new Set();\n        this.actions = new Set();\n        this.importedComponents = new Map();\n        this.slots = new Set();\n        this.bindingGroups = [];\n        this.indirectDependencies = new Map();\n        this.locate = getLocator(this.source);\n        // track which properties are needed, so we can provide useful info\n        // in dev mode\n        this.expectedProperties = new Set();\n        this.code = new MagicString$1(source);\n        this.usesRefs = false;\n        // styles\n        this.stylesheet = stylesheet;\n        // allow compiler to deconflict user's `import { get } from 'whatever'` and\n        // Svelte's builtin `import { get, ... } from 'svelte/shared.ts'`;\n        this.userVars = new Set();\n        this.templateVars = new Map();\n        this.aliases = new Map();\n        this.usedNames = new Set();\n        this.computations = [];\n        this.templateProperties = {};\n        this.walkJs(dom);\n        this.name = this.alias(name);\n        if (options.customElement === true) {\n            this.customElement = {\n                tag: this.tag,\n                props: this.props\n            };\n        }\n        else {\n            this.customElement = options.customElement;\n        }\n        if (this.customElement && !this.customElement.tag) {\n            throw new Error(`No tag name specified`); // TODO better error\n        }\n        this.walkTemplate();\n        if (!this.customElement)\n            this.stylesheet.reify();\n    }\n    addSourcemapLocations(node) {\n        walk(node, {\n            enter: (node) => {\n                this.code.addSourcemapLocation(node.start);\n                this.code.addSourcemapLocation(node.end);\n            },\n        });\n    }\n    alias(name) {\n        if (!this.aliases.has(name)) {\n            this.aliases.set(name, this.getUniqueName(name));\n        }\n        return this.aliases.get(name);\n    }\n    contextualise(contexts, indexes, expression, context, isEventHandler) {\n        // this.addSourcemapLocations(expression);\n        const usedContexts = new Set();\n        const usedIndexes = new Set();\n        const { code, helpers } = this;\n        let scope;\n        let lexicalDepth = 0;\n        const self = this;\n        walk(expression, {\n            enter(node, parent, key) {\n                if (/^Function/.test(node.type))\n                    lexicalDepth += 1;\n                if (node._scope) {\n                    scope = node._scope;\n                    return;\n                }\n                if (node.type === 'ThisExpression') {\n                    if (lexicalDepth === 0 && context)\n                        code.overwrite(node.start, node.end, context, {\n                            storeName: true,\n                            contentOnly: false,\n                        });\n                }\n                else if (isReference(node, parent)) {\n                    const { name } = flatten(node);\n                    if (scope && scope.has(name))\n                        return;\n                    if (name === 'event' && isEventHandler) {\n                        // noop\n                    }\n                    else if (contexts.has(name)) {\n                        const contextName = contexts.get(name);\n                        if (contextName !== name) {\n                            // this is true for 'reserved' names like `state` and `component`,\n                            // also destructured contexts\n                            code.overwrite(node.start, node.start + name.length, contextName, { storeName: true, contentOnly: false });\n                            const destructuredName = contextName.replace(/\\[\\d+\\]/, '');\n                            if (destructuredName !== contextName) {\n                                // so that hoisting the context works correctly\n                                usedContexts.add(destructuredName);\n                            }\n                        }\n                        usedContexts.add(name);\n                    }\n                    else if (helpers.has(name)) {\n                        let object = node;\n                        while (object.type === 'MemberExpression')\n                            object = object.object;\n                        const alias = self.templateVars.get(`helpers-${name}`);\n                        if (alias !== name)\n                            code.overwrite(object.start, object.end, alias);\n                    }\n                    else if (indexes.has(name)) {\n                        const context = indexes.get(name);\n                        usedContexts.add(context); // TODO is this right?\n                        usedIndexes.add(name);\n                    }\n                    else {\n                        // handle shorthand properties\n                        if (parent && parent.type === 'Property' && parent.shorthand) {\n                            if (key === 'key') {\n                                code.appendLeft(node.start, `${name}: `);\n                                return;\n                            }\n                        }\n                        code.prependRight(node.start, `state.`);\n                        usedContexts.add('state');\n                    }\n                    this.skip();\n                }\n            },\n            leave(node) {\n                if (/^Function/.test(node.type))\n                    lexicalDepth -= 1;\n                if (node._scope)\n                    scope = scope.parent;\n            },\n        });\n        return {\n            contexts: usedContexts,\n            indexes: usedIndexes\n        };\n    }\n    generate(result, options, { banner = '', sharedPath, helpers, name, format }) {\n        const pattern = /\\[✂(\\d+)-(\\d+)$/;\n        const module = wrapModule(result, format, name, options, banner, sharedPath, helpers, this.imports, this.source);\n        const parts = module.split('✂]');\n        const finalChunk = parts.pop();\n        const compiled = new Bundle({ separator: '' });\n        function addString(str) {\n            compiled.addSource({\n                content: new MagicString$1(str),\n            });\n        }\n        const { filename } = options;\n        // special case — the source file doesn't actually get used anywhere. we need\n        // to add an empty file to populate map.sources and map.sourcesContent\n        if (!parts.length) {\n            compiled.addSource({\n                filename,\n                content: new MagicString$1(this.source).remove(0, this.source.length),\n            });\n        }\n        parts.forEach((str) => {\n            const chunk = str.replace(pattern, '');\n            if (chunk)\n                addString(chunk);\n            const match = pattern.exec(str);\n            const snippet = this.code.snip(+match[1], +match[2]);\n            compiled.addSource({\n                filename,\n                content: snippet,\n            });\n        });\n        addString(finalChunk);\n        const css = this.customElement ?\n            { code: null, map: null } :\n            this.stylesheet.render(options.cssOutputFilename, true);\n        const js = {\n            code: compiled.toString(),\n            map: compiled.generateMap({\n                includeContent: true,\n                file: options.outputFilename,\n            })\n        };\n        Object.getOwnPropertyNames(String.prototype).forEach(name => {\n            const descriptor = Object.getOwnPropertyDescriptor(String.prototype, name);\n            if (typeof descriptor.value === 'function') {\n                Object.defineProperty(css, name, {\n                    value: (...args) => {\n                        return css.code === null\n                            ? null\n                            : css.code[name].call(css.code, ...args);\n                    }\n                });\n            }\n        });\n        this.stats.stop('compile');\n        return {\n            ast: this.ast,\n            js,\n            css,\n            stats: this.stats.render(this),\n            // TODO deprecate\n            code: js.code,\n            map: js.map,\n            cssMap: css.map\n        };\n    }\n    getUniqueName(name) {\n        if (test)\n            name = `${name}$`;\n        let alias = name;\n        for (let i = 1; reservedNames.has(alias) ||\n            this.userVars.has(alias) ||\n            this.usedNames.has(alias); alias = `${name}_${i++}`)\n            ;\n        this.usedNames.add(alias);\n        return alias;\n    }\n    getUniqueNameMaker(names) {\n        const localUsedNames = new Set();\n        function add(name) {\n            localUsedNames.add(name);\n        }\n        reservedNames.forEach(add);\n        this.userVars.forEach(add);\n        names.forEach(add);\n        return (name) => {\n            if (test)\n                name = `${name}$`;\n            let alias = name;\n            for (let i = 1; this.usedNames.has(alias) ||\n                localUsedNames.has(alias); alias = `${name}_${i++}`)\n                ;\n            localUsedNames.add(alias);\n            return alias;\n        };\n    }\n    walkJs(dom) {\n        const { code, source, computations, templateProperties, imports } = this;\n        const { js } = this.parsed;\n        const componentDefinition = new CodeBuilder();\n        if (js) {\n            this.addSourcemapLocations(js.content);\n            const indentation = detectIndentation(source.slice(js.start, js.end));\n            const indentationLevel = getIndentationLevel(source, js.content.body[0].start);\n            const indentExclusionRanges = getIndentExclusionRanges(js.content);\n            const { scope, globals } = annotateWithScopes(js.content);\n            scope.declarations.forEach(name => {\n                this.userVars.add(name);\n            });\n            globals.forEach(name => {\n                this.userVars.add(name);\n            });\n            const body = js.content.body.slice(); // slice, because we're going to be mutating the original\n            // imports need to be hoisted out of the IIFE\n            for (let i = 0; i < body.length; i += 1) {\n                const node = body[i];\n                if (node.type === 'ImportDeclaration') {\n                    removeNode(code, js.content, node);\n                    imports.push(node);\n                    node.specifiers.forEach((specifier) => {\n                        this.userVars.add(specifier.local.name);\n                    });\n                }\n            }\n            const defaultExport = this.defaultExport = body.find((node) => node.type === 'ExportDefaultDeclaration');\n            if (defaultExport) {\n                defaultExport.declaration.properties.forEach((prop) => {\n                    templateProperties[getMethodName(prop.key)] = prop;\n                });\n                ['helpers', 'events', 'components', 'transitions', 'actions'].forEach(key => {\n                    if (templateProperties[key]) {\n                        templateProperties[key].value.properties.forEach((prop) => {\n                            this[key].add(getMethodName(prop.key));\n                        });\n                    }\n                });\n                const addArrowFunctionExpression = (name, node) => {\n                    const { body, params, async } = node;\n                    const fnKeyword = async ? 'async function' : 'function';\n                    const paramString = params.length ?\n                        `[✂${params[0].start}-${params[params.length - 1].end}✂]` :\n                        ``;\n                    if (body.type === 'BlockStatement') {\n                        componentDefinition.addBlock(deindent `\n\t\t\t\t\t\t\t${fnKeyword} ${name}(${paramString}) [✂${body.start}-${body.end}✂]\n\t\t\t\t\t\t`);\n                    }\n                    else {\n                        componentDefinition.addBlock(deindent `\n\t\t\t\t\t\t\t${fnKeyword} ${name}(${paramString}) {\n\t\t\t\t\t\t\t\treturn [✂${body.start}-${body.end}✂];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t`);\n                    }\n                };\n                const addFunctionExpression = (name, node) => {\n                    const { async } = node;\n                    const fnKeyword = async ? 'async function' : 'function';\n                    let c = node.start;\n                    while (this.source[c] !== '(')\n                        c += 1;\n                    componentDefinition.addBlock(deindent `\n\t\t\t\t\t\t${fnKeyword} ${name}[✂${c}-${node.end}✂];\n\t\t\t\t\t`);\n                };\n                const addValue = (name, node) => {\n                    componentDefinition.addBlock(deindent `\n\t\t\t\t\t\tvar ${name} = [✂${node.start}-${node.end}✂];\n\t\t\t\t\t`);\n                };\n                const addDeclaration = (key, node, disambiguator, conflicts) => {\n                    const qualified = disambiguator ? `${disambiguator}-${key}` : key;\n                    if (node.type === 'Identifier' && node.name === key) {\n                        this.templateVars.set(qualified, key);\n                        return;\n                    }\n                    let deconflicted = key;\n                    if (conflicts)\n                        while (deconflicted in conflicts)\n                            deconflicted += '_';\n                    let name = this.getUniqueName(deconflicted);\n                    this.templateVars.set(qualified, name);\n                    // deindent\n                    const indentationLevel = getIndentationLevel(source, node.start);\n                    if (indentationLevel) {\n                        removeIndentation(code, node.start, node.end, indentationLevel, indentExclusionRanges);\n                    }\n                    if (node.type === 'ArrowFunctionExpression') {\n                        addArrowFunctionExpression(name, node);\n                    }\n                    else if (node.type === 'FunctionExpression') {\n                        addFunctionExpression(name, node);\n                    }\n                    else {\n                        addValue(name, node);\n                    }\n                };\n                if (templateProperties.components) {\n                    templateProperties.components.value.properties.forEach((property) => {\n                        addDeclaration(getMethodName(property.key), property.value, 'components');\n                    });\n                }\n                if (templateProperties.computed) {\n                    const dependencies = new Map();\n                    templateProperties.computed.value.properties.forEach((prop) => {\n                        const key = getMethodName(prop.key);\n                        const value = prop.value;\n                        const deps = this.v2\n                            ? value.params[0].properties.map(prop => prop.key.name)\n                            : value.params.map(param => param.type === 'AssignmentPattern' ? param.left.name : param.name);\n                        deps.forEach(dep => {\n                            this.expectedProperties.add(dep);\n                        });\n                        dependencies.set(key, deps);\n                    });\n                    const visited = new Set();\n                    const visit = (key) => {\n                        if (!dependencies.has(key))\n                            return; // not a computation\n                        if (visited.has(key))\n                            return;\n                        visited.add(key);\n                        const deps = dependencies.get(key);\n                        deps.forEach(visit);\n                        computations.push({ key, deps });\n                        const prop = templateProperties.computed.value.properties.find((prop) => getMethodName(prop.key) === key);\n                        addDeclaration(key, prop.value, 'computed', {\n                            state: true,\n                            changed: true\n                        });\n                    };\n                    templateProperties.computed.value.properties.forEach((prop) => visit(getMethodName(prop.key)));\n                }\n                if (templateProperties.data) {\n                    addDeclaration('data', templateProperties.data.value);\n                }\n                if (templateProperties.events && dom) {\n                    templateProperties.events.value.properties.forEach((property) => {\n                        addDeclaration(getMethodName(property.key), property.value, 'events');\n                    });\n                }\n                if (templateProperties.helpers) {\n                    templateProperties.helpers.value.properties.forEach((property) => {\n                        addDeclaration(getMethodName(property.key), property.value, 'helpers');\n                    });\n                }\n                if (templateProperties.methods && dom) {\n                    addDeclaration('methods', templateProperties.methods.value);\n                }\n                if (templateProperties.namespace) {\n                    const ns = nodeToString(templateProperties.namespace.value);\n                    this.namespace = namespaces[ns] || ns;\n                }\n                if (templateProperties.onrender)\n                    templateProperties.oncreate = templateProperties.onrender; // remove after v2\n                if (templateProperties.oncreate && dom) {\n                    addDeclaration('oncreate', templateProperties.oncreate.value);\n                }\n                if (templateProperties.onteardown)\n                    templateProperties.ondestroy = templateProperties.onteardown; // remove after v2\n                if (templateProperties.ondestroy && dom) {\n                    addDeclaration('ondestroy', templateProperties.ondestroy.value);\n                }\n                if (templateProperties.onstate && dom) {\n                    addDeclaration('onstate', templateProperties.onstate.value);\n                }\n                if (templateProperties.onupdate && dom) {\n                    addDeclaration('onupdate', templateProperties.onupdate.value);\n                }\n                if (templateProperties.preload) {\n                    addDeclaration('preload', templateProperties.preload.value);\n                }\n                if (templateProperties.props) {\n                    this.props = templateProperties.props.value.elements.map((element) => nodeToString(element));\n                }\n                if (templateProperties.setup) {\n                    addDeclaration('setup', templateProperties.setup.value);\n                }\n                if (templateProperties.store) {\n                    addDeclaration('store', templateProperties.store.value);\n                }\n                if (templateProperties.tag) {\n                    this.tag = nodeToString(templateProperties.tag.value);\n                }\n                if (templateProperties.transitions) {\n                    templateProperties.transitions.value.properties.forEach((property) => {\n                        addDeclaration(getMethodName(property.key), property.value, 'transitions');\n                    });\n                }\n                if (templateProperties.actions) {\n                    templateProperties.actions.value.properties.forEach((property) => {\n                        addDeclaration(getMethodName(property.key), property.value, 'actions');\n                    });\n                }\n            }\n            if (indentationLevel) {\n                if (defaultExport) {\n                    removeIndentation(code, js.content.start, defaultExport.start, indentationLevel, indentExclusionRanges);\n                    removeIndentation(code, defaultExport.end, js.content.end, indentationLevel, indentExclusionRanges);\n                }\n                else {\n                    removeIndentation(code, js.content.start, js.content.end, indentationLevel, indentExclusionRanges);\n                }\n            }\n            let a = js.content.start;\n            while (/\\s/.test(source[a]))\n                a += 1;\n            let b = js.content.end;\n            while (/\\s/.test(source[b - 1]))\n                b -= 1;\n            if (defaultExport) {\n                this.javascript = '';\n                if (a !== defaultExport.start)\n                    this.javascript += `[✂${a}-${defaultExport.start}✂]`;\n                if (!componentDefinition.isEmpty())\n                    this.javascript += componentDefinition;\n                if (defaultExport.end !== b)\n                    this.javascript += `[✂${defaultExport.end}-${b}✂]`;\n            }\n            else {\n                this.javascript = a === b ? null : `[✂${a}-${b}✂]`;\n            }\n        }\n    }\n    walkTemplate() {\n        const generator = this;\n        const { code, expectedProperties, helpers } = this;\n        const { html: html$$1 } = this.parsed;\n        const contextualise = (node, contextDependencies, indexes, isEventHandler) => {\n            this.addSourcemapLocations(node); // TODO this involves an additional walk — can we roll it in somewhere else?\n            let { scope } = annotateWithScopes(node);\n            const dependencies = new Set();\n            walk(node, {\n                enter(node, parent) {\n                    code.addSourcemapLocation(node.start);\n                    code.addSourcemapLocation(node.end);\n                    if (node._scope) {\n                        scope = node._scope;\n                        return;\n                    }\n                    if (isReference(node, parent)) {\n                        const { name } = flatten(node);\n                        if (scope && scope.has(name) || helpers.has(name) || (name === 'event' && isEventHandler))\n                            return;\n                        if (contextDependencies.has(name)) {\n                            contextDependencies.get(name).forEach(dependency => {\n                                dependencies.add(dependency);\n                            });\n                        }\n                        else if (!indexes.has(name)) {\n                            dependencies.add(name);\n                        }\n                        this.skip();\n                    }\n                },\n                leave(node, parent) {\n                    if (node._scope)\n                        scope = scope.parent;\n                }\n            });\n            dependencies.forEach(dependency => {\n                expectedProperties.add(dependency);\n            });\n            return {\n                snippet: `[✂${node.start}-${node.end}✂]`,\n                dependencies: Array.from(dependencies)\n            };\n        };\n        let contextDependencies = new Map();\n        const contextDependenciesStack = [contextDependencies];\n        let indexes = new Set();\n        const indexesStack = [indexes];\n        function parentIsHead(node) {\n            if (!node)\n                return false;\n            if (node.type === 'Component' || node.type === 'Element')\n                return false;\n            if (node.type === 'Head')\n                return true;\n            return parentIsHead(node.parent);\n        }\n        walk(html$$1, {\n            enter(node, parent, key) {\n                // TODO this is hacky as hell\n                if (key === 'parent')\n                    return this.skip();\n                node.parent = parent;\n                node.generator = generator;\n                if (node.type === 'Element' && (node.name === ':Component' || node.name === ':Self' || node.name === 'svelte:component' || node.name === 'svelte:self' || generator.components.has(node.name))) {\n                    node.type = 'Component';\n                    Object.setPrototypeOf(node, nodes.Component.prototype);\n                }\n                else if (node.type === 'Element' && node.name === 'title' && parentIsHead(parent)) {\n                    node.type = 'Title';\n                    Object.setPrototypeOf(node, nodes.Title.prototype);\n                }\n                else if (node.type === 'Element' && node.name === 'slot' && !generator.customElement) {\n                    node.type = 'Slot';\n                    Object.setPrototypeOf(node, nodes.Slot.prototype);\n                }\n                else if (node.type in nodes) {\n                    Object.setPrototypeOf(node, nodes[node.type].prototype);\n                }\n                if (node.type === 'Element') {\n                    generator.stylesheet.apply(node);\n                }\n                if (node.type === 'EachBlock') {\n                    node.metadata = contextualise(node.expression, contextDependencies, indexes, false);\n                    contextDependencies = new Map(contextDependencies);\n                    contextDependencies.set(node.context, node.metadata.dependencies);\n                    if (node.destructuredContexts) {\n                        node.destructuredContexts.forEach((name) => {\n                            contextDependencies.set(name, node.metadata.dependencies);\n                        });\n                    }\n                    contextDependenciesStack.push(contextDependencies);\n                    if (node.index) {\n                        indexes = new Set(indexes);\n                        indexes.add(node.index);\n                        indexesStack.push(indexes);\n                    }\n                }\n                if (node.type === 'AwaitBlock') {\n                    node.metadata = contextualise(node.expression, contextDependencies, indexes, false);\n                    contextDependencies = new Map(contextDependencies);\n                    contextDependencies.set(node.value, node.metadata.dependencies);\n                    contextDependencies.set(node.error, node.metadata.dependencies);\n                    contextDependenciesStack.push(contextDependencies);\n                }\n                if (node.type === 'IfBlock') {\n                    node.metadata = contextualise(node.expression, contextDependencies, indexes, false);\n                }\n                if (node.type === 'MustacheTag' || node.type === 'RawMustacheTag' || node.type === 'AttributeShorthand') {\n                    node.metadata = contextualise(node.expression, contextDependencies, indexes, false);\n                    this.skip();\n                }\n                if (node.type === 'Binding') {\n                    node.metadata = contextualise(node.value, contextDependencies, indexes, false);\n                    this.skip();\n                }\n                if (node.type === 'EventHandler' && node.expression) {\n                    node.expression.arguments.forEach((arg) => {\n                        arg.metadata = contextualise(arg, contextDependencies, indexes, true);\n                    });\n                    this.skip();\n                }\n                if (node.type === 'Transition' && node.expression) {\n                    node.metadata = contextualise(node.expression, contextDependencies, indexes, false);\n                    this.skip();\n                }\n                if (node.type === 'Action' && node.expression) {\n                    node.metadata = contextualise(node.expression, contextDependencies, indexes, false);\n                    if (node.expression.type === 'CallExpression') {\n                        node.expression.arguments.forEach((arg) => {\n                            arg.metadata = contextualise(arg, contextDependencies, indexes, true);\n                        });\n                    }\n                    this.skip();\n                }\n                if (node.type === 'Component' && (node.name === ':Component' || node.name === 'svelte:component')) {\n                    node.metadata = contextualise(node.expression, contextDependencies, indexes, false);\n                }\n                if (node.type === 'Spread') {\n                    node.metadata = contextualise(node.expression, contextDependencies, indexes, false);\n                }\n            },\n            leave(node, parent) {\n                if (node.type === 'EachBlock') {\n                    contextDependenciesStack.pop();\n                    contextDependencies = contextDependenciesStack[contextDependenciesStack.length - 1];\n                    if (node.index) {\n                        indexesStack.pop();\n                        indexes = indexesStack[indexesStack.length - 1];\n                    }\n                }\n                if (node.type === 'Element' && node.name === 'option') {\n                    // Special case — treat these the same way:\n                    //   <option>{{foo}}</option>\n                    //   <option value='{{foo}}'>{{foo}}</option>\n                    const valueAttribute = node.attributes.find((attribute) => attribute.name === 'value');\n                    if (!valueAttribute) {\n                        node.attributes.push(new nodes.Attribute({\n                            generator,\n                            name: 'value',\n                            value: node.children,\n                            parent: node\n                        }));\n                    }\n                }\n            }\n        });\n    }\n}\n\nclass DomGenerator extends Generator {\n    constructor(parsed, source, name, stylesheet, options, stats) {\n        super(parsed, source, name, stylesheet, options, stats, true);\n        this.blocks = [];\n        this.readonly = new Set();\n        this.hydratable = options.hydratable;\n        this.legacy = options.legacy;\n        this.needsEncapsulateHelper = false;\n        // initial values for e.g. window.innerWidth, if there's a <:Window> meta tag\n        this.metaBindings = [];\n    }\n}\nfunction dom(parsed, source, stylesheet, options, stats) {\n    const format = options.format || 'es';\n    const generator = new DomGenerator(parsed, source, options.name || 'SvelteComponent', stylesheet, options, stats);\n    const { computations, name, templateProperties, namespace, } = generator;\n    parsed.html.build();\n    const { block } = parsed.html;\n    // prevent fragment being created twice (#1063)\n    if (options.customElement)\n        block.builders.create.addLine(`this.c = @noop;`);\n    generator.stylesheet.warnOnUnusedSelectors(options.onwarn);\n    const builder = new CodeBuilder();\n    const computationBuilder = new CodeBuilder();\n    const computationDeps = new Set();\n    if (computations.length) {\n        computations.forEach(({ key, deps }) => {\n            deps.forEach(dep => {\n                computationDeps.add(dep);\n            });\n            if (generator.readonly.has(key)) {\n                // <:Window> bindings\n                throw new Error(`Cannot have a computed value '${key}' that clashes with a read-only property`);\n            }\n            generator.readonly.add(key);\n            const condition = `${deps.map(dep => `changed.${dep}`).join(' || ')}`;\n            const call = generator.v2\n                ? `%computed-${key}(state)`\n                : `%computed-${key}(${deps.map(dep => `state.${dep}`).join(', ')})`;\n            const statement = `if (this._differs(state.${key}, (state.${key} = ${call}))) changed.${key} = true;`;\n            computationBuilder.addConditional(condition, statement);\n        });\n    }\n    if (generator.javascript) {\n        builder.addBlock(generator.javascript);\n    }\n    const css = generator.stylesheet.render(options.filename, !generator.customElement);\n    const styles = generator.stylesheet.hasStyles && stringify(options.dev ?\n        `${css.code}\\n/*# sourceMappingURL=${css.map.toUrl()} */` :\n        css.code, { onlyEscapeAtSymbol: true });\n    if (styles && generator.options.css !== false && !generator.customElement) {\n        builder.addBlock(deindent `\n\t\t\tfunction @add_css() {\n\t\t\t\tvar style = @createElement(\"style\");\n\t\t\t\tstyle.id = '${generator.stylesheet.id}-style';\n\t\t\t\tstyle.textContent = ${styles};\n\t\t\t\t@appendNode(style, document.head);\n\t\t\t}\n\t\t`);\n    }\n    generator.blocks.forEach(block => {\n        builder.addBlock(block.toString());\n    });\n    const sharedPath = options.shared === true\n        ? 'svelte/shared.js'\n        : options.shared || '';\n    let prototypeBase = `${name}.prototype`;\n    const proto = sharedPath\n        ? `@proto`\n        : deindent `\n\t\t{\n\t\t\t${['destroy', 'get', 'fire', 'observe', 'on', 'set', 'teardown', '_set', '_mount', '_unmount', '_differs']\n            .map(n => `${n}: @${n === 'teardown' ? 'destroy' : n}`)\n            .join(',\\n')}\n\t\t}`;\n    const debugName = `<${generator.customElement ? generator.tag : name}>`;\n    // generate initial state object\n    const expectedProperties = Array.from(generator.expectedProperties);\n    const globals = expectedProperties.filter(prop => globalWhitelist.has(prop));\n    const storeProps = options.store || templateProperties.store ? expectedProperties.filter(prop => prop[0] === '$') : [];\n    const initialState = [];\n    if (globals.length > 0) {\n        initialState.push(`{ ${globals.map(prop => `${prop} : ${prop}`).join(', ')} }`);\n    }\n    if (storeProps.length > 0) {\n        initialState.push(`this.store._init([${storeProps.map(prop => `\"${prop.slice(1)}\"`)}])`);\n    }\n    if (templateProperties.data) {\n        initialState.push(`%data()`);\n    }\n    else if (globals.length === 0 && storeProps.length === 0) {\n        initialState.push('{}');\n    }\n    initialState.push(`options.data`);\n    const hasInitHooks = !!(templateProperties.oncreate || templateProperties.onstate || templateProperties.onupdate);\n    const constructorBody = deindent `\n\t\t${options.dev && `this._debugName = '${debugName}';`}\n\t\t${options.dev && !generator.customElement &&\n        `if (!options || (!options.target && !options.root)) throw new Error(\"'target' is a required option\");`}\n\t\t@init(this, options);\n\t\t${templateProperties.store && `this.store = %store();`}\n\t\t${generator.usesRefs && `this.refs = {};`}\n\t\tthis._state = ${initialState.reduce((state, piece) => `@assign(${state}, ${piece})`)};\n\t\t${storeProps.length > 0 && `this.store._add(this, [${storeProps.map(prop => `\"${prop.slice(1)}\"`)}]);`}\n\t\t${generator.metaBindings}\n\t\t${computations.length && `this._recompute({ ${Array.from(computationDeps).map(dep => `${dep}: 1`).join(', ')} }, this._state);`}\n\t\t${options.dev &&\n        Array.from(generator.expectedProperties).map(prop => {\n            if (globalWhitelist.has(prop))\n                return;\n            if (computations.find(c => c.key === prop))\n                return;\n            const message = generator.components.has(prop) ?\n                `${debugName} expected to find '${prop}' in \\`data\\`, but found it in \\`components\\` instead` :\n                `${debugName} was created without expected data property '${prop}'`;\n            const conditions = [`!('${prop}' in this._state)`];\n            if (generator.customElement)\n                conditions.push(`!('${prop}' in this.attributes)`);\n            return `if (${conditions.join(' && ')}) console.warn(\"${message}\");`;\n        })}\n\t\t${generator.bindingGroups.length &&\n        `this._bindingGroups = [${Array(generator.bindingGroups.length).fill('[]').join(', ')}];`}\n\n\t\t${templateProperties.onstate && `this._handlers.state = [%onstate];`}\n\t\t${templateProperties.onupdate && `this._handlers.update = [%onupdate];`}\n\n\t\t${(templateProperties.ondestroy || storeProps.length) && (`this._handlers.destroy = [${[templateProperties.ondestroy && `%ondestroy`, storeProps.length && `@removeFromStore`].filter(Boolean).join(', ')}];`)}\n\n\t\t${generator.slots.size && `this._slotted = options.slots || {};`}\n\n\t\t${generator.customElement ?\n        deindent `\n\t\t\t\tthis.attachShadow({ mode: 'open' });\n\t\t\t\t${css.code && `this.shadowRoot.innerHTML = \\`<style>${escape(css.code, { onlyEscapeAtSymbol: true }).replace(/\\\\/g, '\\\\\\\\')}${options.dev ? `\\n/*# sourceMappingURL=${css.map.toUrl()} */` : ''}</style>\\`;`}\n\t\t\t` :\n        (generator.stylesheet.hasStyles && options.css !== false &&\n            `if (!document.getElementById(\"${generator.stylesheet.id}-style\")) @add_css();`)}\n\n\t\t${hasInitHooks && deindent `\n\t\t\tvar self = this;\n\t\t\tvar _oncreate = function() {\n\t\t\t\tvar changed = { ${expectedProperties.map(p => `${p}: 1`).join(', ')} };\n\t\t\t\t${templateProperties.onstate && `%onstate.call(self, { changed: changed, current: self._state });`}\n\t\t\t\t${templateProperties.oncreate && `%oncreate.call(self);`}\n\t\t\t\tself.fire(\"update\", { changed: changed, current: self._state });\n\t\t\t};\n\t\t`}\n\n\t\t${(hasInitHooks || generator.hasComponents || generator.hasComplexBindings || generator.hasIntroTransitions) && deindent `\n\t\t\tif (!options.root) {\n\t\t\t\tthis._oncreate = [];\n\t\t\t\t${(generator.hasComponents || generator.hasComplexBindings) && `this._beforecreate = [];`}\n\t\t\t\t${(generator.hasComponents || generator.hasIntroTransitions) && `this._aftercreate = [];`}\n\t\t\t}\n\t\t`}\n\n\t\t${generator.slots.size && `this.slots = {};`}\n\n\t\tthis._fragment = @create_main_fragment(this, this._state);\n\n\t\t${hasInitHooks && deindent `\n\t\t\tthis.root._oncreate.push(_oncreate);\n\t\t`}\n\n\t\t${generator.customElement ? deindent `\n\t\t\tthis._fragment.c();\n\t\t\tthis._fragment.${block.hasIntroMethod ? 'i' : 'm'}(this.shadowRoot, null);\n\n\t\t\tif (options.target) this._mount(options.target, options.anchor);\n\t\t` : deindent `\n\t\t\tif (options.target) {\n\t\t\t\t${generator.hydratable\n        ? deindent `\n\t\t\t\t\t\tvar nodes = @children(options.target);\n\t\t\t\t\t\toptions.hydrate ? this._fragment.l(nodes) : this._fragment.c();\n\t\t\t\t\t\tnodes.forEach(@detachNode);\n\t\t\t\t\t` :\n        deindent `\n\t\t\t\t\t\t${options.dev && `if (options.hydrate) throw new Error(\"options.hydrate only works if the component was compiled with the \\`hydratable: true\\` option\");`}\n\t\t\t\t\t\tthis._fragment.c();\n\t\t\t\t\t`}\n\t\t\t\tthis._mount(options.target, options.anchor);\n\n\t\t\t\t${(generator.hasComponents || generator.hasComplexBindings || hasInitHooks || generator.hasIntroTransitions) && deindent `\n\t\t\t\t\t${generator.hasComponents && `this._lock = true;`}\n\t\t\t\t\t${(generator.hasComponents || generator.hasComplexBindings) && `@callAll(this._beforecreate);`}\n\t\t\t\t\t${(generator.hasComponents || hasInitHooks) && `@callAll(this._oncreate);`}\n\t\t\t\t\t${(generator.hasComponents || generator.hasIntroTransitions) && `@callAll(this._aftercreate);`}\n\t\t\t\t\t${generator.hasComponents && `this._lock = false;`}\n\t\t\t\t`}\n\t\t\t}\n\t\t`}\n\t`;\n    if (generator.customElement) {\n        const props = generator.props || Array.from(generator.expectedProperties);\n        builder.addBlock(deindent `\n\t\t\tclass ${name} extends HTMLElement {\n\t\t\t\tconstructor(options = {}) {\n\t\t\t\t\tsuper();\n\t\t\t\t\t${constructorBody}\n\t\t\t\t}\n\n\t\t\t\tstatic get observedAttributes() {\n\t\t\t\t\treturn ${JSON.stringify(props)};\n\t\t\t\t}\n\n\t\t\t\t${props.map(prop => deindent `\n\t\t\t\t\tget ${prop}() {\n\t\t\t\t\t\treturn this.get('${prop}');\n\t\t\t\t\t}\n\n\t\t\t\t\tset ${prop}(value) {\n\t\t\t\t\t\tthis.set({ ${prop}: value });\n\t\t\t\t\t}\n\t\t\t\t`).join('\\n\\n')}\n\n\t\t\t\t${generator.slots.size && deindent `\n\t\t\t\t\tconnectedCallback() {\n\t\t\t\t\t\tObject.keys(this._slotted).forEach(key => {\n\t\t\t\t\t\t\tthis.appendChild(this._slotted[key]);\n\t\t\t\t\t\t});\n\t\t\t\t\t}`}\n\n\t\t\t\tattributeChangedCallback(attr, oldValue, newValue) {\n\t\t\t\t\tthis.set({ [attr]: newValue });\n\t\t\t\t}\n\n\t\t\t\t${(generator.hasComponents || generator.hasComplexBindings || templateProperties.oncreate || generator.hasIntroTransitions) && deindent `\n\t\t\t\t\tconnectedCallback() {\n\t\t\t\t\t\t${generator.hasComponents && `this._lock = true;`}\n\t\t\t\t\t\t${(generator.hasComponents || generator.hasComplexBindings) && `@callAll(this._beforecreate);`}\n\t\t\t\t\t\t${(generator.hasComponents || templateProperties.oncreate) && `@callAll(this._oncreate);`}\n\t\t\t\t\t\t${(generator.hasComponents || generator.hasIntroTransitions) && `@callAll(this._aftercreate);`}\n\t\t\t\t\t\t${generator.hasComponents && `this._lock = false;`}\n\t\t\t\t\t}\n\t\t\t\t`}\n\t\t\t}\n\n\t\t\tcustomElements.define(\"${generator.tag}\", ${name});\n\t\t\t@assign(@assign(${prototypeBase}, ${proto}), {\n\t\t\t\t_mount(target, anchor) {\n\t\t\t\t\ttarget.insertBefore(this, anchor);\n\t\t\t\t},\n\n\t\t\t\t_unmount() {\n\t\t\t\t\tthis.parentNode.removeChild(this);\n\t\t\t\t}\n\t\t\t});\n\t\t`);\n    }\n    else {\n        builder.addBlock(deindent `\n\t\t\tfunction ${name}(options) {\n\t\t\t\t${constructorBody}\n\t\t\t}\n\n\t\t\t@assign(${prototypeBase}, ${proto});\n\t\t\t${templateProperties.methods && `@assign(${prototypeBase}, %methods);`}\n\t\t`);\n    }\n    const immutable = templateProperties.immutable ? templateProperties.immutable.value.value : options.immutable;\n    builder.addBlock(deindent `\n\t\t${options.dev && deindent `\n\t\t\t${name}.prototype._checkReadOnly = function _checkReadOnly(newState) {\n\t\t\t\t${Array.from(generator.readonly).map(prop => `if ('${prop}' in newState && !this._updatingReadonlyProperty) throw new Error(\"${debugName}: Cannot set read-only property '${prop}'\");`)}\n\t\t\t};\n\t\t`}\n\n\t\t${computations.length ? deindent `\n\t\t\t${name}.prototype._recompute = function _recompute(changed, state) {\n\t\t\t\t${computationBuilder}\n\t\t\t}\n\t\t` : (!sharedPath && `${name}.prototype._recompute = @noop;`)}\n\n\t\t${templateProperties.setup && `%setup(${name});`}\n\n\t\t${templateProperties.preload && `${name}.preload = %preload;`}\n\n\t\t${immutable && `${name}.prototype._differs = @_differsImmutable;`}\n\t`);\n    const usedHelpers = new Set();\n    let result = builder\n        .toString()\n        .replace(/(%+|@+)(\\w*(?:-\\w*)?)/g, (match, sigil, name) => {\n        if (sigil === '@') {\n            if (name in shared) {\n                if (options.dev && `${name}Dev` in shared)\n                    name = `${name}Dev`;\n                usedHelpers.add(name);\n            }\n            return generator.alias(name);\n        }\n        if (sigil === '%') {\n            return generator.templateVars.get(name);\n        }\n        return sigil.slice(1) + name;\n    });\n    let helpers;\n    if (sharedPath) {\n        if (format !== 'es' && format !== 'cjs') {\n            throw new Error(`Components with shared helpers must be compiled with \\`format: 'es'\\` or \\`format: 'cjs'\\``);\n        }\n        const used = Array.from(usedHelpers).sort();\n        helpers = used.map(name => {\n            const alias = generator.alias(name);\n            return { name, alias };\n        });\n    }\n    else {\n        let inlineHelpers = '';\n        usedHelpers.forEach(key => {\n            const str = shared[key];\n            const code = new MagicString$1(str);\n            const expression = parseExpressionAt(str, 0);\n            let { scope } = annotateWithScopes(expression);\n            walk(expression, {\n                enter(node, parent) {\n                    if (node._scope)\n                        scope = node._scope;\n                    if (node.type === 'Identifier' &&\n                        isReference(node, parent) &&\n                        !scope.has(node.name)) {\n                        if (node.name in shared) {\n                            // this helper function depends on another one\n                            const dependency = node.name;\n                            usedHelpers.add(dependency);\n                            const alias = generator.alias(dependency);\n                            if (alias !== node.name)\n                                code.overwrite(node.start, node.end, alias);\n                        }\n                    }\n                },\n                leave(node) {\n                    if (node._scope)\n                        scope = scope.parent;\n                },\n            });\n            if (key === 'transitionManager') {\n                // special case\n                const global = `_svelteTransitionManager`;\n                inlineHelpers += `\\n\\nvar ${generator.alias('transitionManager')} = window.${global} || (window.${global} = ${code});\\n\\n`;\n            }\n            else {\n                const alias = generator.alias(expression.id.name);\n                if (alias !== expression.id.name)\n                    code.overwrite(expression.id.start, expression.id.end, alias);\n                inlineHelpers += `\\n\\n${code}`;\n            }\n        });\n        result += inlineHelpers;\n    }\n    const filename = options.filename && (typeof process !== 'undefined' ? options.filename.replace(process.cwd(), '').replace(/^[\\/\\\\]/, '') : options.filename);\n    return generator.generate(result, options, {\n        banner: `/* ${filename ? `${filename} ` : ``}generated by Svelte v${\"1.64.1\"} */`,\n        sharedPath,\n        helpers,\n        name,\n        format,\n    });\n}\n\nlet Block$2 = class Block {\n    constructor(options) {\n        Object.assign(this, options);\n    }\n    addBinding(binding, name) {\n        const conditions = [`!('${binding.name}' in state)`].concat(\n        // TODO handle contextual bindings...\n        this.conditions.map(c => `(${c})`));\n        const { name: prop } = getObject(binding.value);\n        this.generator.bindings.push(deindent `\n\t\t\tif (${conditions.join('&&')}) {\n\t\t\t\ttmp = ${name}.data();\n\t\t\t\tif ('${prop}' in tmp) {\n\t\t\t\t\tstate.${binding.name} = tmp.${prop};\n\t\t\t\t\tsettled = false;\n\t\t\t\t}\n\t\t\t}\n\t\t`);\n    }\n    child(options) {\n        return new Block$2(Object.assign({}, this, options, { parent: this }));\n    }\n    contextualise(expression, context, isEventHandler) {\n        return this.generator.contextualise(this.contexts, this.indexes, expression, context, isEventHandler);\n    }\n};\n\nfunction visitAwaitBlock(generator, block, node) {\n    block.contextualise(node.expression);\n    const { dependencies, snippet } = node.metadata;\n    // TODO should this be the generator's job? It's duplicated between\n    // here and the equivalent DOM compiler visitor\n    const contexts = new Map(block.contexts);\n    contexts.set(node.value, '__value');\n    const contextDependencies = new Map(block.contextDependencies);\n    contextDependencies.set(node.value, dependencies);\n    const childBlock = block.child({\n        contextDependencies,\n        contexts\n    });\n    generator.append('${(function(__value) { if(__isPromise(__value)) return `');\n    node.pending.children.forEach((child) => {\n        visit$1(generator, childBlock, child);\n    });\n    generator.append('`; return `');\n    node.then.children.forEach((child) => {\n        visit$1(generator, childBlock, child);\n    });\n    generator.append(`\\`;}(${snippet})) }`);\n}\n\nfunction visitComment(generator, block, node) {\n    // Allow option to preserve comments, otherwise ignore\n    if (generator && generator.options && generator.options.preserveComments) {\n        generator.append(`\x3c!--${node.data}--\x3e`);\n    }\n}\n\nfunction visitComponent(generator, block, node) {\n    function stringifyAttribute(chunk) {\n        if (chunk.type === 'Text') {\n            return escapeTemplate(escape(chunk.data));\n        }\n        if (chunk.type === 'MustacheTag') {\n            block.contextualise(chunk.expression);\n            const { snippet } = chunk.metadata;\n            return '${__escape( ' + snippet + ')}';\n        }\n    }\n    const attributes = [];\n    const bindings = [];\n    let usesSpread;\n    node.attributes.forEach((attribute) => {\n        if (attribute.type === 'Attribute' || attribute.type === 'Spread') {\n            if (attribute.type === 'Spread')\n                usesSpread = true;\n            attributes.push(attribute);\n        }\n        else if (attribute.type === 'Binding') {\n            bindings.push(attribute);\n        }\n    });\n    const bindingProps = bindings.map(binding => {\n        const { name } = getObject(binding.value);\n        const tail = binding.value.type === 'MemberExpression'\n            ? getTailSnippet(binding.value)\n            : '';\n        const keypath = block.contexts.has(name)\n            ? `${name}${tail}`\n            : `state.${name}${tail}`;\n        return `${binding.name}: ${keypath}`;\n    });\n    function getAttributeValue(attribute) {\n        if (attribute.value === true)\n            return `true`;\n        if (attribute.value.length === 0)\n            return `''`;\n        if (attribute.value.length === 1) {\n            const chunk = attribute.value[0];\n            if (chunk.type === 'Text') {\n                return isNaN(chunk.data) ? stringify(chunk.data) : chunk.data;\n            }\n            block.contextualise(chunk.expression);\n            const { snippet } = chunk.metadata;\n            return snippet;\n        }\n        return '`' + attribute.value.map(stringifyAttribute).join('') + '`';\n    }\n    const props = usesSpread\n        ? `Object.assign(${attributes\n            .map(attribute => {\n            if (attribute.type === 'Spread') {\n                block.contextualise(attribute.expression);\n                return attribute.metadata.snippet;\n            }\n            else {\n                return `{ ${attribute.name}: ${getAttributeValue(attribute)} }`;\n            }\n        })\n            .concat(bindingProps.map(p => `{ ${p} }`))\n            .join(', ')})`\n        : `{ ${attributes\n            .map(attribute => `${attribute.name}: ${getAttributeValue(attribute)}`)\n            .concat(bindingProps)\n            .join(', ')} }`;\n    const isDynamicComponent = node.name === ':Component' || node.name === 'svelte:component';\n    if (isDynamicComponent)\n        block.contextualise(node.expression);\n    const expression = ((node.name === ':Self' || node.name === 'svelte:self') ? generator.name :\n        isDynamicComponent ? `((${node.metadata.snippet}) || __missingComponent)` :\n            `%components-${node.name}`);\n    bindings.forEach(binding => {\n        block.addBinding(binding, expression);\n    });\n    let open = `\\${${expression}._render(__result, ${props}`;\n    const options = [];\n    if (generator.options.store) {\n        options.push(`store: options.store`);\n    }\n    if (node.children.length) {\n        const appendTarget = {\n            slots: { default: '' },\n            slotStack: ['default']\n        };\n        generator.appendTargets.push(appendTarget);\n        node.children.forEach((child) => {\n            visit$1(generator, block, child);\n        });\n        const slotted = Object.keys(appendTarget.slots)\n            .map(name => `${name}: () => \\`${appendTarget.slots[name]}\\``)\n            .join(', ');\n        options.push(`slotted: { ${slotted} }`);\n        generator.appendTargets.pop();\n    }\n    if (options.length) {\n        open += `, { ${options.join(', ')} }`;\n    }\n    generator.append(open);\n    generator.append(')}');\n}\n\nfunction visitEachBlock(generator, block, node) {\n    block.contextualise(node.expression);\n    const { dependencies, snippet } = node.metadata;\n    const open = `\\${ ${node.else ? `${snippet}.length ? ` : ''}${snippet}.map(${node.index ? `(${node.context}, ${node.index})` : `(${node.context})`} => \\``;\n    generator.append(open);\n    // TODO should this be the generator's job? It's duplicated between\n    // here and the equivalent DOM compiler visitor\n    const contexts = new Map(block.contexts);\n    contexts.set(node.context, node.context);\n    const indexes = new Map(block.indexes);\n    if (node.index)\n        indexes.set(node.index, node.context);\n    const contextDependencies = new Map(block.contextDependencies);\n    contextDependencies.set(node.context, dependencies);\n    if (node.destructuredContexts) {\n        for (let i = 0; i < node.destructuredContexts.length; i += 1) {\n            contexts.set(node.destructuredContexts[i], `${node.context}[${i}]`);\n            contextDependencies.set(node.destructuredContexts[i], dependencies);\n        }\n    }\n    const childBlock = block.child({\n        contexts,\n        indexes,\n        contextDependencies,\n    });\n    node.children.forEach((child) => {\n        visit$1(generator, childBlock, child);\n    });\n    const close = `\\`).join(\"\")`;\n    generator.append(close);\n    if (node.else) {\n        generator.append(` : \\``);\n        node.else.children.forEach((child) => {\n            visit$1(generator, block, child);\n        });\n        generator.append(`\\``);\n    }\n    generator.append('}');\n}\n\nfunction visitSlot(generator, block, node) {\n    const name = node.attributes.find((attribute) => attribute.name);\n    const slotName = name && name.value[0].data || 'default';\n    generator.append(`\\${options && options.slotted && options.slotted.${slotName} ? options.slotted.${slotName}() : \\``);\n    node.children.forEach((child) => {\n        visit$1(generator, block, child);\n    });\n    generator.append(`\\`}`);\n}\n\nfunction stringifyAttributeValue$1(block, chunks) {\n    return chunks\n        .map((chunk) => {\n        if (chunk.type === 'Text') {\n            return escapeTemplate(escape(chunk.data).replace(/\"/g, '&quot;'));\n        }\n        block.contextualise(chunk.expression);\n        const { snippet } = chunk.metadata;\n        return '${__escape(' + snippet + ')}';\n    })\n        .join('');\n}\n\n// source: https://gist.github.com/ArjanSchouten/0b8574a6ad7f5065a5e7\nconst booleanAttributes = new Set('async autocomplete autofocus autoplay border challenge checked compact contenteditable controls default defer disabled formnovalidate frameborder hidden indeterminate ismap loop multiple muted nohref noresize noshade novalidate nowrap open readonly required reversed scoped scrolling seamless selected sortable spellcheck translate'.split(' '));\nfunction visitElement(generator, block, node) {\n    if (node.name === 'slot') {\n        visitSlot(generator, block, node);\n        return;\n    }\n    let openingTag = `<${node.name}`;\n    let textareaContents; // awkward special case\n    const slot = node.getStaticAttributeValue('slot');\n    if (slot && node.hasAncestor('Component')) {\n        const slot = node.attributes.find((attribute) => attribute.name === 'slot');\n        const slotName = slot.value[0].data;\n        const appendTarget = generator.appendTargets[generator.appendTargets.length - 1];\n        appendTarget.slotStack.push(slotName);\n        appendTarget.slots[slotName] = '';\n    }\n    if (node.attributes.find(attr => attr.type === 'Spread')) {\n        // TODO dry this out\n        const args = [];\n        node.attributes.forEach((attribute) => {\n            if (attribute.type === 'Spread') {\n                block.contextualise(attribute.expression);\n                args.push(attribute.metadata.snippet);\n            }\n            else if (attribute.type === 'Attribute') {\n                if (attribute.name === 'value' && node.name === 'textarea') {\n                    textareaContents = stringifyAttributeValue$1(block, attribute.value);\n                }\n                else if (attribute.value === true) {\n                    args.push(`{ ${quoteIfNecessary(attribute.name)}: true }`);\n                }\n                else if (booleanAttributes.has(attribute.name) &&\n                    attribute.value.length === 1 &&\n                    attribute.value[0].type !== 'Text') {\n                    // a boolean attribute with one non-Text chunk\n                    block.contextualise(attribute.value[0].expression);\n                    args.push(`{ ${quoteIfNecessary(attribute.name)}: ${attribute.value[0].metadata.snippet} }`);\n                }\n                else {\n                    args.push(`{ ${quoteIfNecessary(attribute.name)}: \\`${stringifyAttributeValue$1(block, attribute.value)}\\` }`);\n                }\n            }\n        });\n        openingTag += \"${__spread([\" + args.join(', ') + \"])}\";\n    }\n    else {\n        node.attributes.forEach((attribute) => {\n            if (attribute.type !== 'Attribute')\n                return;\n            if (attribute.name === 'value' && node.name === 'textarea') {\n                textareaContents = stringifyAttributeValue$1(block, attribute.value);\n            }\n            else if (attribute.value === true) {\n                openingTag += ` ${attribute.name}`;\n            }\n            else if (booleanAttributes.has(attribute.name) &&\n                attribute.value.length === 1 &&\n                attribute.value[0].type !== 'Text') {\n                // a boolean attribute with one non-Text chunk\n                block.contextualise(attribute.value[0].expression);\n                openingTag += '${' + attribute.value[0].metadata.snippet + ' ? \" ' + attribute.name + '\" : \"\" }';\n            }\n            else {\n                openingTag += ` ${attribute.name}=\"${stringifyAttributeValue$1(block, attribute.value)}\"`;\n            }\n        });\n    }\n    if (node._cssRefAttribute) {\n        openingTag += ` svelte-ref-${node._cssRefAttribute}`;\n    }\n    openingTag += '>';\n    generator.append(openingTag);\n    if (node.name === 'textarea' && textareaContents !== undefined) {\n        generator.append(textareaContents);\n    }\n    else {\n        node.children.forEach((child) => {\n            visit$1(generator, block, child);\n        });\n    }\n    if (!isVoidElementName(node.name)) {\n        generator.append(`</${node.name}>`);\n    }\n}\n\nfunction visitDocument(generator, block, node) {\n    generator.append('${(__result.head += `');\n    node.children.forEach((child) => {\n        visit$1(generator, block, child);\n    });\n    generator.append('`, \"\")}');\n}\n\nfunction visitIfBlock(generator, block, node) {\n    block.contextualise(node.expression);\n    const { snippet } = node.metadata;\n    generator.append('${ ' + snippet + ' ? `');\n    const childBlock = block.child({\n        conditions: block.conditions.concat(snippet),\n    });\n    node.children.forEach((child) => {\n        visit$1(generator, childBlock, child);\n    });\n    generator.append('` : `');\n    if (node.else) {\n        node.else.children.forEach((child) => {\n            visit$1(generator, childBlock, child);\n        });\n    }\n    generator.append('` }');\n}\n\nfunction visitMustacheTag(generator, block, node) {\n    block.contextualise(node.expression);\n    const { snippet } = node.metadata;\n    generator.append(node.parent &&\n        node.parent.type === 'Element' &&\n        node.parent.name === 'style'\n        ? '${' + snippet + '}'\n        : '${__escape(' + snippet + ')}');\n}\n\nfunction visitRawMustacheTag(generator, block, node) {\n    block.contextualise(node.expression);\n    const { snippet } = node.metadata;\n    generator.append('${' + snippet + '}');\n}\n\nfunction visitText(generator, block, node) {\n    let text = node.data;\n    if (!node.parent ||\n        node.parent.type !== 'Element' ||\n        (node.parent.name !== 'script' && node.parent.name !== 'style')) {\n        // unless this Text node is inside a <script> or <style> element, escape &,<,>\n        text = escapeHTML(text);\n    }\n    generator.append(escape(escapeTemplate(text)));\n}\n\nfunction visitTitle(generator, block, node) {\n    generator.append(`<title>`);\n    node.children.forEach((child) => {\n        visit$1(generator, block, child);\n    });\n    generator.append(`</title>`);\n}\n\nfunction visitWindow() {\n    // noop\n}\n\nvar visitors = {\n    AwaitBlock: visitAwaitBlock,\n    Comment: visitComment,\n    Component: visitComponent,\n    EachBlock: visitEachBlock,\n    Element: visitElement,\n    Head: visitDocument,\n    IfBlock: visitIfBlock,\n    MustacheTag: visitMustacheTag,\n    RawMustacheTag: visitRawMustacheTag,\n    Slot: visitSlot,\n    Text: visitText,\n    Title: visitTitle,\n    Window: visitWindow\n};\n\nfunction visit$1(generator, block, node) {\n    const visitor = visitors[node.type];\n    visitor(generator, block, node);\n}\n\nclass SsrGenerator extends Generator {\n    constructor(parsed, source, name, stylesheet, options, stats) {\n        super(parsed, source, name, stylesheet, options, stats, false);\n        this.bindings = [];\n        this.renderCode = '';\n        this.appendTargets = [];\n        this.stylesheet.warnOnUnusedSelectors(options.onwarn);\n    }\n    append(code) {\n        if (this.appendTargets.length) {\n            const appendTarget = this.appendTargets[this.appendTargets.length - 1];\n            const slotName = appendTarget.slotStack[appendTarget.slotStack.length - 1];\n            appendTarget.slots[slotName] += code;\n        }\n        else {\n            this.renderCode += code;\n        }\n    }\n}\nfunction ssr(parsed, source, stylesheet, options, stats) {\n    const format = options.format || 'cjs';\n    const generator = new SsrGenerator(parsed, source, options.name || 'SvelteComponent', stylesheet, options, stats);\n    const { computations, name, templateProperties } = generator;\n    // create main render() function\n    const mainBlock = new Block$2({\n        generator,\n        contexts: new Map(),\n        indexes: new Map(),\n        conditions: [],\n    });\n    trim(parsed.html.children).forEach((node) => {\n        visit$1(generator, mainBlock, node);\n    });\n    const css = generator.customElement ?\n        { code: null, map: null } :\n        generator.stylesheet.render(options.filename, true);\n    // generate initial state object\n    const expectedProperties = Array.from(generator.expectedProperties);\n    const globals = expectedProperties.filter(prop => globalWhitelist.has(prop));\n    const storeProps = options.store || templateProperties.store ? expectedProperties.filter(prop => prop[0] === '$') : [];\n    const initialState = [];\n    if (globals.length > 0) {\n        initialState.push(`{ ${globals.map(prop => `${prop} : ${prop}`).join(', ')} }`);\n    }\n    if (storeProps.length > 0) {\n        const initialize = `_init([${storeProps.map(prop => `\"${prop.slice(1)}\"`)}])`;\n        if (options.store || templateProperties.store) {\n            initialState.push(`options.store.${initialize}`);\n        }\n    }\n    if (templateProperties.data) {\n        initialState.push(`%data()`);\n    }\n    else if (globals.length === 0 && storeProps.length === 0) {\n        initialState.push('{}');\n    }\n    initialState.push('state');\n    // TODO concatenate CSS maps\n    const result = deindent `\n\t\t${generator.javascript}\n\n\t\tvar ${name} = {};\n\n\t\t${options.filename && `${name}.filename = ${stringify(options.filename)}`};\n\n\t\t${name}.data = function() {\n\t\t\treturn ${templateProperties.data ? `%data()` : `{}`};\n\t\t};\n\n\t\t${name}.render = function(state, options = {}) {\n\t\t\tvar components = new Set();\n\n\t\t\tfunction addComponent(component) {\n\t\t\t\tcomponents.add(component);\n\t\t\t}\n\n\t\t\tvar result = { head: '', addComponent };\n\t\t\tvar html = ${name}._render(result, state, options);\n\n\t\t\tvar cssCode = Array.from(components).map(c => c.css && c.css.code).filter(Boolean).join('\\\\n');\n\n\t\t\treturn {\n\t\t\t\thtml,\n\t\t\t\thead: result.head,\n\t\t\t\tcss: { code: cssCode, map: null },\n\t\t\t\ttoString() {\n\t\t\t\t\treturn html;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\t${name}._render = function(__result, state, options) {\n\t\t\t${templateProperties.store && `options.store = %store();`}\n\t\t\t__result.addComponent(${name});\n\n\t\t\tstate = Object.assign(${initialState.join(', ')});\n\n\t\t\t${computations.map(({ key, deps }) => `state.${key} = %computed-${key}(${generator.v2 ? 'state' : deps.map(dep => `state.${dep}`).join(', ')});`)}\n\n\t\t\t${generator.bindings.length &&\n        deindent `\n\t\t\t\tvar settled = false;\n\t\t\t\tvar tmp;\n\n\t\t\t\twhile (!settled) {\n\t\t\t\t\tsettled = true;\n\n\t\t\t\t\t${generator.bindings.join('\\n\\n')}\n\t\t\t\t}\n\t\t\t`}\n\n\t\t\treturn \\`${generator.renderCode}\\`;\n\t\t};\n\n\t\t${name}.css = {\n\t\t\tcode: ${css.code ? stringify(css.code) : `''`},\n\t\t\tmap: ${css.map ? stringify(css.map.toString()) : 'null'}\n\t\t};\n\n\t\tvar warned = false;\n\t\t${name}.renderCss = function() {\n\t\t\tif (!warned) {\n\t\t\t\tconsole.error('Component.renderCss(...) is deprecated and will be removed in v2 — use Component.render(...).css instead');\n\t\t\t\twarned = true;\n\t\t\t}\n\n\t\t\tvar components = [];\n\n\t\t\t${generator.stylesheet.hasStyles &&\n        deindent `\n\t\t\t\tcomponents.push({\n\t\t\t\t\tfilename: ${name}.filename,\n\t\t\t\t\tcss: ${name}.css && ${name}.css.code,\n\t\t\t\t\tmap: ${name}.css && ${name}.css.map\n\t\t\t\t});\n\t\t\t`}\n\n\t\t\t${templateProperties.components &&\n        deindent `\n\t\t\t\tvar seen = {};\n\n\t\t\t\tfunction addComponent(component) {\n\t\t\t\t\tvar result = component.renderCss();\n\t\t\t\t\tresult.components.forEach(x => {\n\t\t\t\t\t\tif (seen[x.filename]) return;\n\t\t\t\t\t\tseen[x.filename] = true;\n\t\t\t\t\t\tcomponents.push(x);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t${templateProperties.components.value.properties.map((prop) => {\n            return `addComponent(%components-${getMethodName(prop.key)});`;\n        })}\n\t\t\t`}\n\n\t\t\treturn {\n\t\t\t\tcss: components.map(x => x.css).join('\\\\n'),\n\t\t\t\tmap: null,\n\t\t\t\tcomponents\n\t\t\t};\n\t\t};\n\n\t\t${templateProperties.preload && `${name}.preload = %preload;`}\n\n\t\t${\n    // TODO this is a bit hacky\n    /__escape/.test(generator.renderCode) && deindent `\n\t\t\t\tvar escaped = {\n\t\t\t\t\t'\"': '&quot;',\n\t\t\t\t\t\"'\": '&##39;',\n\t\t\t\t\t'&': '&amp;',\n\t\t\t\t\t'<': '&lt;',\n\t\t\t\t\t'>': '&gt;'\n\t\t\t\t};\n\n\t\t\t\tfunction __escape(html) {\n\t\t\t\t\treturn String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n\t\t\t\t}\n\t\t\t`}\n\n\t\t${/__isPromise/.test(generator.renderCode) && deindent `\n\t\t\t\tfunction __isPromise(value) {\n\t\t\t\t\treturn value && typeof value.then === 'function';\n\t\t\t\t}\n\t\t\t`}\n\n\t\t${/__missingComponent/.test(generator.renderCode) && deindent `\n\t\t\t\tvar __missingComponent = {\n\t\t\t\t\t_render: () => ''\n\t\t\t\t};\n\t\t\t`}\n\n\t\t${/__spread/.test(generator.renderCode) && deindent `\n\t\t\t\tfunction __spread(args) {\n\t\t\t\t\tconst attributes = Object.assign({}, ...args);\n\t\t\t\t\tlet str = '';\n\n\t\t\t\t\tObject.keys(attributes).forEach(name => {\n\t\t\t\t\t\tconst value = attributes[name];\n\t\t\t\t\t\tif (value === undefined) return;\n\t\t\t\t\t\tif (value === true) str += \" \" + name;\n\t\t\t\t\t\tstr += \" \" + name + \"=\" + JSON.stringify(value);\n\t\t\t\t\t});\n\n\t\t\t\t\treturn str;\n\t\t\t\t}\n\t\t\t`}\n\t`.replace(/(@+|#+|%+)(\\w*(?:-\\w*)?)/g, (match, sigil, name) => {\n        if (sigil === '@')\n            return generator.alias(name);\n        if (sigil === '%')\n            return generator.templateVars.get(name);\n        return sigil.slice(1) + name;\n    });\n    return generator.generate(result, options, { name, format });\n}\nfunction trim(nodes) {\n    let start = 0;\n    for (; start < nodes.length; start += 1) {\n        const node = nodes[start];\n        if (node.type !== 'Text')\n            break;\n        node.data = node.data.replace(/^\\s+/, '');\n        if (node.data)\n            break;\n    }\n    let end = nodes.length;\n    for (; end > start; end -= 1) {\n        const node = nodes[end - 1];\n        if (node.type !== 'Text')\n            break;\n        node.data = node.data.replace(/\\s+$/, '');\n        if (node.data)\n            break;\n    }\n    return nodes.slice(start, end);\n}\n\nconst now = (typeof process !== 'undefined' && process.hrtime)\n    ? () => {\n        const t = process.hrtime();\n        return t[0] * 1e3 + t[1] / 1e6;\n    }\n    : () => window.performance.now();\nfunction collapseTimings(timings) {\n    const result = {};\n    timings.forEach(timing => {\n        result[timing.label] = Object.assign({\n            total: timing.end - timing.start\n        }, timing.children && collapseTimings(timing.children));\n    });\n    return result;\n}\nlet Stats$1 = class Stats {\n    constructor() {\n        this.startTime = now();\n        this.stack = [];\n        this.currentChildren = this.timings = [];\n        this.warnings = [];\n    }\n    start(label) {\n        const timing = {\n            label,\n            start: now(),\n            end: null,\n            children: []\n        };\n        this.currentChildren.push(timing);\n        this.stack.push(timing);\n        this.currentTiming = timing;\n        this.currentChildren = timing.children;\n    }\n    stop(label) {\n        if (label !== this.currentTiming.label) {\n            throw new Error(`Mismatched timing labels`);\n        }\n        this.currentTiming.end = now();\n        this.stack.pop();\n        this.currentTiming = this.stack[this.stack.length - 1];\n        this.currentChildren = this.currentTiming ? this.currentTiming.children : this.timings;\n    }\n    render(generator) {\n        const timings = Object.assign({\n            total: now() - this.startTime\n        }, collapseTimings(this.timings));\n        const imports = generator.imports.map(node => {\n            return {\n                source: node.source.value,\n                specifiers: node.specifiers.map(specifier => {\n                    return {\n                        name: (specifier.type === 'ImportDefaultSpecifier' ? 'default' :\n                            specifier.type === 'ImportNamespaceSpecifier' ? '*' :\n                                specifier.imported.name),\n                        as: specifier.local.name\n                    };\n                })\n            };\n        });\n        const hooks = {};\n        if (generator.templateProperties.oncreate)\n            hooks.oncreate = true;\n        if (generator.templateProperties.ondestroy)\n            hooks.ondestroy = true;\n        return {\n            timings,\n            warnings: this.warnings,\n            imports,\n            hooks\n        };\n    }\n};\n\nfunction assign$1(tar, src) {\n\tfor (var k in src) tar[k] = src[k];\n\treturn tar;\n}\n\nconst UNKNOWN = {};\nfunction gatherPossibleValues(node, set) {\n    if (node.type === 'Literal') {\n        set.add(node.value);\n    }\n    else if (node.type === 'ConditionalExpression') {\n        gatherPossibleValues(node.consequent, set);\n        gatherPossibleValues(node.alternate, set);\n    }\n    else {\n        set.add(UNKNOWN);\n    }\n}\n\nlet Selector$1 = class Selector {\n    constructor(node, stylesheet) {\n        this.node = node;\n        this.stylesheet = stylesheet;\n        this.blocks = groupSelectors(node);\n        // take trailing :global(...) selectors out of consideration\n        let i = this.blocks.length;\n        while (i > 0) {\n            if (!this.blocks[i - 1].global)\n                break;\n            i -= 1;\n        }\n        this.localBlocks = this.blocks.slice(0, i);\n        this.used = this.blocks[0].global;\n    }\n    apply(node, stack) {\n        const toEncapsulate = [];\n        applySelector(this.localBlocks.slice(), node, stack.slice(), toEncapsulate);\n        if (toEncapsulate.length > 0) {\n            toEncapsulate.filter((_, i) => i === 0 || i === toEncapsulate.length - 1).forEach(({ node, block }) => {\n                this.stylesheet.nodesWithCssClass.add(node);\n                block.shouldEncapsulate = true;\n            });\n            this.used = true;\n        }\n    }\n    minify(code) {\n        let c = null;\n        this.blocks.forEach((block, i) => {\n            if (i > 0) {\n                if (block.start - c > 1) {\n                    code.overwrite(c, block.start, block.combinator.name || ' ');\n                }\n            }\n            c = block.end;\n        });\n    }\n    transform(code, attr) {\n        function encapsulateBlock(block) {\n            let i = block.selectors.length;\n            while (i--) {\n                const selector = block.selectors[i];\n                if (selector.type === 'PseudoElementSelector' || selector.type === 'PseudoClassSelector')\n                    continue;\n                if (selector.type === 'TypeSelector' && selector.name === '*') {\n                    code.overwrite(selector.start, selector.end, attr);\n                }\n                else {\n                    code.appendLeft(selector.end, attr);\n                }\n                break;\n            }\n            i = block.selectors.length;\n            while (i--) {\n                const selector = block.selectors[i];\n                if (selector.type === 'RefSelector') {\n                    code.overwrite(selector.start, selector.end, `[svelte-ref-${selector.name}]`, {\n                        contentOnly: true,\n                        storeName: false\n                    });\n                }\n            }\n        }\n        this.blocks.forEach((block, i) => {\n            if (block.global) {\n                const selector = block.selectors[0];\n                const first = selector.children[0];\n                const last = selector.children[selector.children.length - 1];\n                code.remove(selector.start, first.start).remove(last.end, selector.end);\n            }\n            if (block.shouldEncapsulate)\n                encapsulateBlock(block);\n        });\n    }\n    validate(validator) {\n        this.blocks.forEach((block) => {\n            let i = block.selectors.length;\n            while (i-- > 1) {\n                const selector = block.selectors[i];\n                if (selector.type === 'PseudoClassSelector' && selector.name === 'global') {\n                    validator.error(selector, {\n                        code: `css-invalid-global`,\n                        message: `:global(...) must be the first element in a compound selector`\n                    });\n                }\n            }\n        });\n        let start = 0;\n        let end = this.blocks.length;\n        for (; start < end; start += 1) {\n            if (!this.blocks[start].global)\n                break;\n        }\n        for (; end > start; end -= 1) {\n            if (!this.blocks[end - 1].global)\n                break;\n        }\n        for (let i = start; i < end; i += 1) {\n            if (this.blocks[i].global) {\n                validator.error(this.blocks[i].selectors[0], {\n                    code: `css-invalid-global`,\n                    message: `:global(...) can be at the start or end of a selector sequence, but not in the middle`\n                });\n            }\n        }\n    }\n};\nfunction applySelector(blocks, node, stack, toEncapsulate) {\n    const block = blocks.pop();\n    if (!block)\n        return false;\n    if (!node) {\n        return blocks.every(block => block.global);\n    }\n    let i = block.selectors.length;\n    let j = stack.length;\n    while (i--) {\n        const selector = block.selectors[i];\n        if (selector.type === 'PseudoClassSelector' && selector.name === 'global') {\n            // TODO shouldn't see this here... maybe we should enforce that :global(...)\n            // cannot be sandwiched between non-global selectors?\n            return false;\n        }\n        if (selector.type === 'PseudoClassSelector' || selector.type === 'PseudoElementSelector') {\n            continue;\n        }\n        if (selector.type === 'ClassSelector') {\n            if (!attributeMatches(node, 'class', selector.name, '~=', false))\n                return false;\n        }\n        else if (selector.type === 'IdSelector') {\n            if (!attributeMatches(node, 'id', selector.name, '=', false))\n                return false;\n        }\n        else if (selector.type === 'AttributeSelector') {\n            if (!attributeMatches(node, selector.name.name, selector.value && unquote(selector.value), selector.matcher, selector.flags))\n                return false;\n        }\n        else if (selector.type === 'TypeSelector') {\n            // remove toLowerCase() in v2, when uppercase elements will be forbidden\n            if (node.name.toLowerCase() !== selector.name.toLowerCase() && selector.name !== '*')\n                return false;\n        }\n        else if (selector.type === 'RefSelector') {\n            if (node.attributes.some((attr) => attr.type === 'Ref' && attr.name === selector.name)) {\n                node._cssRefAttribute = selector.name;\n                toEncapsulate.push({ node, block });\n                return true;\n            }\n            return;\n        }\n        else {\n            // bail. TODO figure out what these could be\n            toEncapsulate.push({ node, block });\n            return true;\n        }\n    }\n    if (block.combinator) {\n        if (block.combinator.type === 'WhiteSpace') {\n            while (stack.length) {\n                if (applySelector(blocks.slice(), stack.pop(), stack, toEncapsulate)) {\n                    toEncapsulate.push({ node, block });\n                    return true;\n                }\n            }\n            return false;\n        }\n        else if (block.combinator.name === '>') {\n            if (applySelector(blocks, stack.pop(), stack, toEncapsulate)) {\n                toEncapsulate.push({ node, block });\n                return true;\n            }\n            return false;\n        }\n        // TODO other combinators\n        toEncapsulate.push({ node, block });\n        return true;\n    }\n    toEncapsulate.push({ node, block });\n    return true;\n}\nconst operators = {\n    '=': (value, flags) => new RegExp(`^${value}$`, flags),\n    '~=': (value, flags) => new RegExp(`\\\\b${value}\\\\b`, flags),\n    '|=': (value, flags) => new RegExp(`^${value}(-.+)?$`, flags),\n    '^=': (value, flags) => new RegExp(`^${value}`, flags),\n    '$=': (value, flags) => new RegExp(`${value}$`, flags),\n    '*=': (value, flags) => new RegExp(value, flags)\n};\nfunction attributeMatches(node, name, expectedValue, operator, caseInsensitive) {\n    const spread = node.attributes.find(attr => attr.type === 'Spread');\n    if (spread)\n        return true;\n    const attr = node.attributes.find((attr) => attr.name === name);\n    if (!attr)\n        return false;\n    if (attr.value === true)\n        return operator === null;\n    if (attr.value.length > 1)\n        return true;\n    if (!expectedValue)\n        return true;\n    const pattern = operators[operator](expectedValue, caseInsensitive ? 'i' : '');\n    const value = attr.value[0];\n    if (!value)\n        return false;\n    if (value.type === 'Text')\n        return pattern.test(value.data);\n    const possibleValues = new Set();\n    gatherPossibleValues(value.expression, possibleValues);\n    if (possibleValues.has(UNKNOWN))\n        return true;\n    for (const x of Array.from(possibleValues)) {\n        if (pattern.test(x))\n            return true;\n    }\n    return false;\n}\nfunction unquote(value) {\n    if (value.type === 'Identifier')\n        return value.name;\n    const str = value.value;\n    if (str[0] === str[str.length - 1] && str[0] === \"'\" || str[0] === '\"') {\n        return str.slice(1, str.length - 1);\n    }\n    return str;\n}\nlet Block$3 = class Block {\n    constructor(combinator) {\n        this.combinator = combinator;\n        this.global = false;\n        this.selectors = [];\n        this.start = null;\n        this.end = null;\n        this.shouldEncapsulate = false;\n    }\n    add(selector) {\n        if (this.selectors.length === 0) {\n            this.start = selector.start;\n            this.global = selector.type === 'PseudoClassSelector' && selector.name === 'global';\n        }\n        this.selectors.push(selector);\n        this.end = selector.end;\n    }\n};\nfunction groupSelectors(selector) {\n    let block = new Block$3(null);\n    const blocks = [block];\n    selector.children.forEach((child, i) => {\n        if (child.type === 'WhiteSpace' || child.type === 'Combinator') {\n            block = new Block$3(child);\n            blocks.push(block);\n        }\n        else {\n            block.add(child);\n        }\n    });\n    return blocks;\n}\n\nlet Rule$1 = class Rule {\n    constructor(node, stylesheet, parent) {\n        this.node = node;\n        this.parent = parent;\n        this.selectors = node.selector.children.map((node) => new Selector$1(node, stylesheet));\n        this.declarations = node.block.children.map((node) => new Declaration$1(node));\n    }\n    apply(node, stack) {\n        this.selectors.forEach(selector => selector.apply(node, stack)); // TODO move the logic in here?\n    }\n    isUsed(dev) {\n        if (this.parent && this.parent.node.type === 'Atrule' && this.parent.node.name === 'keyframes')\n            return true;\n        if (this.declarations.length === 0)\n            return dev;\n        return this.selectors.some(s => s.used);\n    }\n    minify(code, cascade, dev) {\n        let c = this.node.start;\n        let started = false;\n        this.selectors.forEach((selector, i) => {\n            if (cascade || selector.used) {\n                const separator = started ? ',' : '';\n                if ((selector.node.start - c) > separator.length) {\n                    code.overwrite(c, selector.node.start, separator);\n                }\n                if (!cascade)\n                    selector.minify(code);\n                c = selector.node.end;\n                started = true;\n            }\n        });\n        code.remove(c, this.node.block.start);\n        c = this.node.block.start + 1;\n        this.declarations.forEach((declaration, i) => {\n            const separator = i > 0 ? ';' : '';\n            if ((declaration.node.start - c) > separator.length) {\n                code.overwrite(c, declaration.node.start, separator);\n            }\n            declaration.minify(code);\n            c = declaration.node.end;\n        });\n        code.remove(c, this.node.block.end - 1);\n    }\n    transform(code, id, keyframes, cascade) {\n        if (this.parent && this.parent.node.type === 'Atrule' && this.parent.node.name === 'keyframes')\n            return true;\n        const attr = `.${id}`;\n        if (cascade) {\n            this.selectors.forEach(selector => {\n                // TODO disable cascading (without :global(...)) in v2\n                const { start, end, children } = selector.node;\n                const css = code.original;\n                const selectorString = css.slice(start, end);\n                const firstToken = children[0];\n                let transformed;\n                if (firstToken.type === 'TypeSelector') {\n                    const insert = firstToken.end;\n                    const head = firstToken.name === '*' ? '' : css.slice(start, insert);\n                    const tail = css.slice(insert, end);\n                    transformed = `${head}${attr}${tail},${attr} ${selectorString}`;\n                }\n                else {\n                    transformed = `${attr}${selectorString},${attr} ${selectorString}`;\n                }\n                code.overwrite(start, end, transformed);\n            });\n        }\n        else {\n            this.selectors.forEach(selector => selector.transform(code, attr));\n        }\n        this.declarations.forEach(declaration => declaration.transform(code, keyframes));\n    }\n    validate(validator) {\n        this.selectors.forEach(selector => {\n            selector.validate(validator);\n        });\n    }\n    warnOnUnusedSelector(handler) {\n        this.selectors.forEach(selector => {\n            if (!selector.used)\n                handler(selector);\n        });\n    }\n};\nlet Declaration$1 = class Declaration {\n    constructor(node) {\n        this.node = node;\n    }\n    transform(code, keyframes) {\n        const property = this.node.property && this.node.property.toLowerCase();\n        if (property === 'animation' || property === 'animation-name') {\n            this.node.value.children.forEach((block) => {\n                if (block.type === 'Identifier') {\n                    const name = block.name;\n                    if (keyframes.has(name)) {\n                        code.overwrite(block.start, block.end, keyframes.get(name));\n                    }\n                }\n            });\n        }\n    }\n    minify(code) {\n        if (!this.node.property)\n            return; // @apply, and possibly other weird cases?\n        const c = this.node.start + this.node.property.length;\n        const first = this.node.value.children ?\n            this.node.value.children[0] :\n            this.node.value;\n        let start = first.start;\n        while (/\\s/.test(code.original[start]))\n            start += 1;\n        if (start - c > 1) {\n            code.overwrite(c, start, ':');\n        }\n    }\n};\nlet Atrule$1 = class Atrule {\n    constructor(node) {\n        this.node = node;\n        this.children = [];\n    }\n    apply(node, stack) {\n        if (this.node.name === 'media' || this.node.name === 'supports') {\n            this.children.forEach(child => {\n                child.apply(node, stack);\n            });\n        }\n        else if (this.node.name === 'keyframes') {\n            this.children.forEach((rule) => {\n                rule.selectors.forEach(selector => {\n                    selector.used = true;\n                });\n            });\n        }\n    }\n    isUsed(dev) {\n        return true; // TODO\n    }\n    minify(code, cascade, dev) {\n        if (this.node.name === 'media') {\n            const expressionChar = code.original[this.node.expression.start];\n            let c = this.node.start + (expressionChar === '(' ? 6 : 7);\n            if (this.node.expression.start > c)\n                code.remove(c, this.node.expression.start);\n            this.node.expression.children.forEach((query) => {\n                // TODO minify queries\n                c = query.end;\n            });\n            code.remove(c, this.node.block.start);\n        }\n        else if (this.node.name === 'keyframes') {\n            let c = this.node.start + 10;\n            if (this.node.expression.start - c > 1)\n                code.overwrite(c, this.node.expression.start, ' ');\n            c = this.node.expression.end;\n            if (this.node.block.start - c > 0)\n                code.remove(c, this.node.block.start);\n        }\n        else if (this.node.name === 'supports') {\n            let c = this.node.start + 9;\n            if (this.node.expression.start - c > 1)\n                code.overwrite(c, this.node.expression.start, ' ');\n            this.node.expression.children.forEach((query) => {\n                // TODO minify queries\n                c = query.end;\n            });\n            code.remove(c, this.node.block.start);\n        }\n        // TODO other atrules\n        if (this.node.block) {\n            let c = this.node.block.start + 1;\n            this.children.forEach(child => {\n                if (cascade || child.isUsed(dev)) {\n                    code.remove(c, child.node.start);\n                    child.minify(code, cascade, dev);\n                    c = child.node.end;\n                }\n            });\n            code.remove(c, this.node.block.end - 1);\n        }\n    }\n    transform(code, id, keyframes, cascade) {\n        if (this.node.name === 'keyframes') {\n            this.node.expression.children.forEach(({ type, name, start, end }) => {\n                if (type === 'Identifier') {\n                    if (name.startsWith('-global-')) {\n                        code.remove(start, start + 8);\n                    }\n                    else {\n                        code.overwrite(start, end, keyframes.get(name));\n                    }\n                }\n            });\n        }\n        this.children.forEach(child => {\n            child.transform(code, id, keyframes, cascade);\n        });\n    }\n    validate(validator) {\n        this.children.forEach(child => {\n            child.validate(validator);\n        });\n    }\n    warnOnUnusedSelector(handler) {\n        if (this.node.name !== 'media')\n            return;\n        this.children.forEach(child => {\n            child.warnOnUnusedSelector(handler);\n        });\n    }\n};\nclass Stylesheet {\n    constructor(source, parsed, filename, cascade, dev) {\n        this.source = source;\n        this.parsed = parsed;\n        this.cascade = cascade;\n        this.filename = filename;\n        this.dev = dev;\n        this.children = [];\n        this.keyframes = new Map();\n        this.nodesWithCssClass = new Set();\n        if (parsed.css && parsed.css.children.length) {\n            this.id = `svelte-${hash(parsed.css.content.styles)}`;\n            this.hasStyles = true;\n            const stack = [];\n            let currentAtrule = null;\n            walk(this.parsed.css, {\n                enter: (node) => {\n                    if (node.type === 'Atrule') {\n                        const last = stack[stack.length - 1];\n                        const atrule = new Atrule$1(node);\n                        stack.push(atrule);\n                        // this is an awkward special case — @apply (and\n                        // possibly other future constructs)\n                        if (last && !(last instanceof Atrule$1))\n                            return;\n                        if (currentAtrule) {\n                            currentAtrule.children.push(atrule);\n                        }\n                        else {\n                            this.children.push(atrule);\n                        }\n                        if (node.name === 'keyframes') {\n                            node.expression.children.forEach((expression) => {\n                                if (expression.type === 'Identifier' && !expression.name.startsWith('-global-')) {\n                                    this.keyframes.set(expression.name, `${this.id}-${expression.name}`);\n                                }\n                            });\n                        }\n                        currentAtrule = atrule;\n                    }\n                    if (node.type === 'Rule') {\n                        const rule = new Rule$1(node, this, currentAtrule);\n                        stack.push(rule);\n                        if (currentAtrule) {\n                            currentAtrule.children.push(rule);\n                        }\n                        else {\n                            this.children.push(rule);\n                        }\n                    }\n                },\n                leave: (node) => {\n                    if (node.type === 'Rule' || node.type === 'Atrule')\n                        stack.pop();\n                    if (node.type === 'Atrule')\n                        currentAtrule = stack[stack.length - 1];\n                }\n            });\n        }\n        else {\n            this.hasStyles = false;\n        }\n    }\n    apply(node) {\n        if (!this.hasStyles)\n            return;\n        const stack = [];\n        let parent = node;\n        while (parent = parent.parent) {\n            if (parent.type === 'Element')\n                stack.unshift(parent);\n        }\n        if (this.cascade) {\n            if (stack.length === 0)\n                this.nodesWithCssClass.add(node);\n            return;\n        }\n        for (let i = 0; i < this.children.length; i += 1) {\n            const child = this.children[i];\n            child.apply(node, stack);\n        }\n    }\n    reify() {\n        this.nodesWithCssClass.forEach((node) => {\n            node.addCssClass();\n        });\n    }\n    render(cssOutputFilename, shouldTransformSelectors) {\n        if (!this.hasStyles) {\n            return { code: null, map: null };\n        }\n        const code = new MagicString$1(this.source);\n        walk(this.parsed.css, {\n            enter: (node) => {\n                code.addSourcemapLocation(node.start);\n                code.addSourcemapLocation(node.end);\n            }\n        });\n        if (shouldTransformSelectors) {\n            this.children.forEach((child) => {\n                child.transform(code, this.id, this.keyframes, this.cascade);\n            });\n        }\n        let c = 0;\n        this.children.forEach(child => {\n            if (this.cascade || child.isUsed(this.dev)) {\n                code.remove(c, child.node.start);\n                child.minify(code, this.cascade, this.dev);\n                c = child.node.end;\n            }\n        });\n        code.remove(c, this.source.length);\n        return {\n            code: code.toString(),\n            map: code.generateMap({\n                includeContent: true,\n                source: this.filename,\n                file: cssOutputFilename\n            })\n        };\n    }\n    validate(validator) {\n        this.children.forEach(child => {\n            child.validate(validator);\n        });\n    }\n    warnOnUnusedSelectors(onwarn) {\n        if (this.cascade)\n            return;\n        let locator;\n        const handler = (selector) => {\n            const pos = selector.node.start;\n            if (!locator)\n                locator = getLocator(this.source);\n            const { line, column } = locator(pos);\n            const frame = getCodeFrame(this.source, line, column);\n            const message = `Unused CSS selector`;\n            onwarn({\n                code: `css-unused-selector`,\n                message,\n                frame,\n                loc: { line: line + 1, column },\n                pos,\n                filename: this.filename,\n                toString: () => `${message} (${line + 1}:${column})\\n${frame}`,\n            });\n        };\n        this.children.forEach(child => {\n            child.warnOnUnusedSelector(handler);\n        });\n    }\n}\n\nconst version$1 = '1.64.1';\nfunction normalizeOptions(options) {\n    let normalizedOptions = assign$1({ generate: 'dom' }, options);\n    const { onwarn, onerror } = normalizedOptions;\n    normalizedOptions.onwarn = onwarn\n        ? (warning) => onwarn(warning, defaultOnwarn)\n        : defaultOnwarn;\n    normalizedOptions.onerror = onerror\n        ? (error) => onerror(error, defaultOnerror)\n        : defaultOnerror;\n    return normalizedOptions;\n}\nfunction defaultOnwarn(warning) {\n    if (warning.loc) {\n        console.warn(`(${warning.loc.line}:${warning.loc.column}) – ${warning.message}`); // eslint-disable-line no-console\n    }\n    else {\n        console.warn(warning.message); // eslint-disable-line no-console\n    }\n}\nfunction defaultOnerror(error) {\n    throw error;\n}\nfunction parseAttributeValue(value) {\n    return /^['\"]/.test(value) ?\n        value.slice(1, -1) :\n        value;\n}\nfunction parseAttributes(str) {\n    const attrs = {};\n    str.split(/\\s+/).filter(Boolean).forEach(attr => {\n        const [name, value] = attr.split('=');\n        attrs[name] = value ? parseAttributeValue(value) : true;\n    });\n    return attrs;\n}\nfunction replaceTagContents(source, type, preprocessor, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const exp = new RegExp(`<${type}([\\\\S\\\\s]*?)>([\\\\S\\\\s]*?)<\\\\/${type}>`, 'ig');\n        const match = exp.exec(source);\n        if (match) {\n            const attributes = parseAttributes(match[1]);\n            const content = match[2];\n            const processed = yield preprocessor({\n                content,\n                attributes,\n                filename: options.filename\n            });\n            if (processed && processed.code) {\n                return (source.slice(0, match.index) +\n                    `<${type}>${processed.code}</${type}>` +\n                    source.slice(match.index + match[0].length));\n            }\n        }\n        return source;\n    });\n}\nfunction preprocess(source, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { markup, style, script } = options;\n        if (!!markup) {\n            const processed = yield markup({\n                content: source,\n                filename: options.filename\n            });\n            source = processed.code;\n        }\n        if (!!style) {\n            source = yield replaceTagContents(source, 'style', style, options);\n        }\n        if (!!script) {\n            source = yield replaceTagContents(source, 'script', script, options);\n        }\n        return {\n            // TODO return separated output, in future version where svelte.compile supports it:\n            // style: { code: styleCode, map: styleMap },\n            // script { code: scriptCode, map: scriptMap },\n            // markup { code: markupCode, map: markupMap },\n            toString() {\n                return source;\n            }\n        };\n    });\n}\nfunction compile(source, _options) {\n    const options = normalizeOptions(_options);\n    let parsed;\n    const stats = new Stats$1();\n    try {\n        stats.start('parse');\n        parsed = parse$1(source, options);\n        stats.stop('parse');\n    }\n    catch (err) {\n        options.onerror(err);\n        return;\n    }\n    stats.start('stylesheet');\n    const stylesheet = new Stylesheet(source, parsed, options.filename, options.cascade !== false, options.dev);\n    stats.stop('stylesheet');\n    stats.start('validate');\n    // TODO remove this when we remove svelte.validate from public API — we\n    // can use the stats object instead\n    const onwarn = options.onwarn;\n    options.onwarn = warning => {\n        stats.warnings.push(warning);\n        onwarn(warning);\n    };\n    validate(parsed, source, stylesheet, options);\n    stats.stop('validate');\n    const compiler = options.generate === 'ssr' ? ssr : dom;\n    return compiler(parsed, source, stylesheet, options, stats);\n}\nfunction create$1(source, _options = {}) {\n    _options.format = 'eval';\n    const compiled = compile(source, _options);\n    if (!compiled || !compiled.code) {\n        return;\n    }\n    try {\n        return (eval)(compiled.code);\n    }\n    catch (err) {\n        if (_options.onerror) {\n            _options.onerror(err);\n            return;\n        }\n        else {\n            throw err;\n        }\n    }\n}\n\nexports.preprocess = preprocess;\nexports.compile = compile;\nexports.create = create$1;\nexports.parse = parse$1;\nexports.validate = validate;\nexports.Stylesheet = Stylesheet;\nexports.VERSION = version$1;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=svelte.js.map\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack://JsCodeRunner/./node_modules/svelte/compiler/svelte.js?")}}]);