(window.webpackJsonpJsCodeRunner=window.webpackJsonpJsCodeRunner||[]).push([[3],{"./node_modules/less/dist/less.js":
/*!****************************************!*\
  !*** ./node_modules/less/dist/less.js ***!
  \****************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(Buffer) {/**\n * Less - Leaner CSS v3.10.3\n * http://lesscss.org\n * \n * Copyright (c) 2009-2019, Alexis Sellier <self@cloudhead.net>\n * Licensed under the Apache-2.0 License.\n *\n * @license Apache-2.0\n */\n\n(function (global, factory) {\n   true ? module.exports = factory() :\n  undefined;\n}(this, function () { 'use strict';\n\n  // Export a new default each time\n  var defaultOptions = (function () {\n    return {\n      /* Inline Javascript - @plugin still allowed */\n      javascriptEnabled: false,\n\n      /* Outputs a makefile import dependency list to stdout. */\n      depends: false,\n\n      /* (DEPRECATED) Compress using less built-in compression. \n      * This does an okay job but does not utilise all the tricks of \n      * dedicated css compression. */\n      compress: false,\n\n      /* Runs the less parser and just reports errors without any output. */\n      lint: false,\n\n      /* Sets available include paths.\n      * If the file in an @import rule does not exist at that exact location, \n      * less will look for it at the location(s) passed to this option. \n      * You might use this for instance to specify a path to a library which \n      * you want to be referenced simply and relatively in the less files. */\n      paths: [],\n\n      /* color output in the terminal */\n      color: true,\n\n      /* The strictImports controls whether the compiler will allow an @import inside of either \n      * @media blocks or (a later addition) other selector blocks.\n      * See: https://github.com/less/less.js/issues/656 */\n      strictImports: false,\n\n      /* Allow Imports from Insecure HTTPS Hosts */\n      insecure: false,\n\n      /* Allows you to add a path to every generated import and url in your css. \n      * This does not affect less import statements that are processed, just ones \n      * that are left in the output css. */\n      rootpath: '',\n\n      /* By default URLs are kept as-is, so if you import a file in a sub-directory \n      * that references an image, exactly the same URL will be output in the css. \n      * This option allows you to re-write URL's in imported files so that the \n      * URL is always relative to the base imported file */\n      rewriteUrls: false,\n\n      /* How to process math \n      *   0 always           - eagerly try to solve all operations\n      *   1 parens-division  - require parens for division \"/\"\n      *   2 parens | strict  - require parens for all operations\n      *   3 strict-legacy    - legacy strict behavior (super-strict)\n      */\n      math: 0,\n\n      /* Without this option, less attempts to guess at the output unit when it does maths. */\n      strictUnits: false,\n\n      /* Effectively the declaration is put at the top of your base Less file, \n      * meaning it can be used but it also can be overridden if this variable \n      * is defined in the file. */\n      globalVars: null,\n\n      /* As opposed to the global variable option, this puts the declaration at the\n      * end of your base file, meaning it will override anything defined in your Less file. */\n      modifyVars: null,\n\n      /* This option allows you to specify a argument to go on to every URL.  */\n      urlArgs: ''\n    };\n  });\n\n  function extractId(href) {\n    return href.replace(/^[a-z-]+:\\/+?[^\\/]+/, '') // Remove protocol & domain\n    .replace(/[\\?\\&]livereload=\\w+/, '') // Remove LiveReload cachebuster\n    .replace(/^\\//, '') // Remove root /\n    .replace(/\\.[a-zA-Z]+$/, '') // Remove simple extension\n    .replace(/[^\\.\\w-]+/g, '-') // Replace illegal characters\n    .replace(/\\./g, ':'); // Replace dots with colons(for valid id)\n  }\n  function addDataAttr(options, tag) {\n    for (var opt in tag.dataset) {\n      if (tag.dataset.hasOwnProperty(opt)) {\n        if (opt === 'env' || opt === 'dumpLineNumbers' || opt === 'rootpath' || opt === 'errorReporting') {\n          options[opt] = tag.dataset[opt];\n        } else {\n          try {\n            options[opt] = JSON.parse(tag.dataset[opt]);\n          } catch (_) {}\n        }\n      }\n    }\n  }\n\n  var browser = {\n    createCSS: function createCSS(document, styles, sheet) {\n      // Strip the query-string\n      var href = sheet.href || ''; // If there is no title set, use the filename, minus the extension\n\n      var id = \"less:\".concat(sheet.title || extractId(href)); // If this has already been inserted into the DOM, we may need to replace it\n\n      var oldStyleNode = document.getElementById(id);\n      var keepOldStyleNode = false; // Create a new stylesheet node for insertion or (if necessary) replacement\n\n      var styleNode = document.createElement('style');\n      styleNode.setAttribute('type', 'text/css');\n\n      if (sheet.media) {\n        styleNode.setAttribute('media', sheet.media);\n      }\n\n      styleNode.id = id;\n\n      if (!styleNode.styleSheet) {\n        styleNode.appendChild(document.createTextNode(styles)); // If new contents match contents of oldStyleNode, don't replace oldStyleNode\n\n        keepOldStyleNode = oldStyleNode !== null && oldStyleNode.childNodes.length > 0 && styleNode.childNodes.length > 0 && oldStyleNode.firstChild.nodeValue === styleNode.firstChild.nodeValue;\n      }\n\n      var head = document.getElementsByTagName('head')[0]; // If there is no oldStyleNode, just append; otherwise, only append if we need\n      // to replace oldStyleNode with an updated stylesheet\n\n      if (oldStyleNode === null || keepOldStyleNode === false) {\n        var nextEl = sheet && sheet.nextSibling || null;\n\n        if (nextEl) {\n          nextEl.parentNode.insertBefore(styleNode, nextEl);\n        } else {\n          head.appendChild(styleNode);\n        }\n      }\n\n      if (oldStyleNode && keepOldStyleNode === false) {\n        oldStyleNode.parentNode.removeChild(oldStyleNode);\n      } // For IE.\n      // This needs to happen *after* the style element is added to the DOM, otherwise IE 7 and 8 may crash.\n      // See http://social.msdn.microsoft.com/Forums/en-US/7e081b65-878a-4c22-8e68-c10d39c2ed32/internet-explorer-crashes-appending-style-element-to-head\n\n\n      if (styleNode.styleSheet) {\n        try {\n          styleNode.styleSheet.cssText = styles;\n        } catch (e) {\n          throw new Error('Couldn\\'t reassign styleSheet.cssText.');\n        }\n      }\n    },\n    currentScript: function currentScript(window) {\n      var document = window.document;\n      return document.currentScript || function () {\n        var scripts = document.getElementsByTagName('script');\n        return scripts[scripts.length - 1];\n      }();\n    }\n  };\n\n  var addDefaultOptions = (function (window, options) {\n    // use options from the current script tag data attribues\n    addDataAttr(options, browser.currentScript(window));\n\n    if (options.isFileProtocol === undefined) {\n      options.isFileProtocol = /^(file|(chrome|safari)(-extension)?|resource|qrc|app):/.test(window.location.protocol);\n    } // Load styles asynchronously (default: false)\n    //\n    // This is set to `false` by default, so that the body\n    // doesn't start loading before the stylesheets are parsed.\n    // Setting this to `true` can result in flickering.\n    //\n\n\n    options.async = options.async || false;\n    options.fileAsync = options.fileAsync || false; // Interval between watch polls\n\n    options.poll = options.poll || (options.isFileProtocol ? 1000 : 1500);\n    options.env = options.env || (window.location.hostname == '127.0.0.1' || window.location.hostname == '0.0.0.0' || window.location.hostname == 'localhost' || window.location.port && window.location.port.length > 0 || options.isFileProtocol ? 'development' : 'production');\n    var dumpLineNumbers = /!dumpLineNumbers:(comments|mediaquery|all)/.exec(window.location.hash);\n\n    if (dumpLineNumbers) {\n      options.dumpLineNumbers = dumpLineNumbers[1];\n    }\n\n    if (options.useFileCache === undefined) {\n      options.useFileCache = true;\n    }\n\n    if (options.onReady === undefined) {\n      options.onReady = true;\n    }\n\n    if (options.relativeUrls) {\n      options.rewriteUrls = 'all';\n    }\n  });\n\n  function _typeof(obj) {\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n  }\n\n  function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n  }\n\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n\n    return _setPrototypeOf(o, p);\n  }\n\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function _construct(Parent, args, Class) {\n    if (isNativeReflectConstruct()) {\n      _construct = Reflect.construct;\n    } else {\n      _construct = function _construct(Parent, args, Class) {\n        var a = [null];\n        a.push.apply(a, args);\n        var Constructor = Function.bind.apply(Parent, a);\n        var instance = new Constructor();\n        if (Class) _setPrototypeOf(instance, Class.prototype);\n        return instance;\n      };\n    }\n\n    return _construct.apply(null, arguments);\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  function _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n      return call;\n    }\n\n    return _assertThisInitialized(self);\n  }\n\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n  }\n\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n      return arr2;\n    }\n  }\n\n  function _iterableToArray(iter) {\n    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n  }\n\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n  }\n\n  var colors = {\n    'aliceblue': '#f0f8ff',\n    'antiquewhite': '#faebd7',\n    'aqua': '#00ffff',\n    'aquamarine': '#7fffd4',\n    'azure': '#f0ffff',\n    'beige': '#f5f5dc',\n    'bisque': '#ffe4c4',\n    'black': '#000000',\n    'blanchedalmond': '#ffebcd',\n    'blue': '#0000ff',\n    'blueviolet': '#8a2be2',\n    'brown': '#a52a2a',\n    'burlywood': '#deb887',\n    'cadetblue': '#5f9ea0',\n    'chartreuse': '#7fff00',\n    'chocolate': '#d2691e',\n    'coral': '#ff7f50',\n    'cornflowerblue': '#6495ed',\n    'cornsilk': '#fff8dc',\n    'crimson': '#dc143c',\n    'cyan': '#00ffff',\n    'darkblue': '#00008b',\n    'darkcyan': '#008b8b',\n    'darkgoldenrod': '#b8860b',\n    'darkgray': '#a9a9a9',\n    'darkgrey': '#a9a9a9',\n    'darkgreen': '#006400',\n    'darkkhaki': '#bdb76b',\n    'darkmagenta': '#8b008b',\n    'darkolivegreen': '#556b2f',\n    'darkorange': '#ff8c00',\n    'darkorchid': '#9932cc',\n    'darkred': '#8b0000',\n    'darksalmon': '#e9967a',\n    'darkseagreen': '#8fbc8f',\n    'darkslateblue': '#483d8b',\n    'darkslategray': '#2f4f4f',\n    'darkslategrey': '#2f4f4f',\n    'darkturquoise': '#00ced1',\n    'darkviolet': '#9400d3',\n    'deeppink': '#ff1493',\n    'deepskyblue': '#00bfff',\n    'dimgray': '#696969',\n    'dimgrey': '#696969',\n    'dodgerblue': '#1e90ff',\n    'firebrick': '#b22222',\n    'floralwhite': '#fffaf0',\n    'forestgreen': '#228b22',\n    'fuchsia': '#ff00ff',\n    'gainsboro': '#dcdcdc',\n    'ghostwhite': '#f8f8ff',\n    'gold': '#ffd700',\n    'goldenrod': '#daa520',\n    'gray': '#808080',\n    'grey': '#808080',\n    'green': '#008000',\n    'greenyellow': '#adff2f',\n    'honeydew': '#f0fff0',\n    'hotpink': '#ff69b4',\n    'indianred': '#cd5c5c',\n    'indigo': '#4b0082',\n    'ivory': '#fffff0',\n    'khaki': '#f0e68c',\n    'lavender': '#e6e6fa',\n    'lavenderblush': '#fff0f5',\n    'lawngreen': '#7cfc00',\n    'lemonchiffon': '#fffacd',\n    'lightblue': '#add8e6',\n    'lightcoral': '#f08080',\n    'lightcyan': '#e0ffff',\n    'lightgoldenrodyellow': '#fafad2',\n    'lightgray': '#d3d3d3',\n    'lightgrey': '#d3d3d3',\n    'lightgreen': '#90ee90',\n    'lightpink': '#ffb6c1',\n    'lightsalmon': '#ffa07a',\n    'lightseagreen': '#20b2aa',\n    'lightskyblue': '#87cefa',\n    'lightslategray': '#778899',\n    'lightslategrey': '#778899',\n    'lightsteelblue': '#b0c4de',\n    'lightyellow': '#ffffe0',\n    'lime': '#00ff00',\n    'limegreen': '#32cd32',\n    'linen': '#faf0e6',\n    'magenta': '#ff00ff',\n    'maroon': '#800000',\n    'mediumaquamarine': '#66cdaa',\n    'mediumblue': '#0000cd',\n    'mediumorchid': '#ba55d3',\n    'mediumpurple': '#9370d8',\n    'mediumseagreen': '#3cb371',\n    'mediumslateblue': '#7b68ee',\n    'mediumspringgreen': '#00fa9a',\n    'mediumturquoise': '#48d1cc',\n    'mediumvioletred': '#c71585',\n    'midnightblue': '#191970',\n    'mintcream': '#f5fffa',\n    'mistyrose': '#ffe4e1',\n    'moccasin': '#ffe4b5',\n    'navajowhite': '#ffdead',\n    'navy': '#000080',\n    'oldlace': '#fdf5e6',\n    'olive': '#808000',\n    'olivedrab': '#6b8e23',\n    'orange': '#ffa500',\n    'orangered': '#ff4500',\n    'orchid': '#da70d6',\n    'palegoldenrod': '#eee8aa',\n    'palegreen': '#98fb98',\n    'paleturquoise': '#afeeee',\n    'palevioletred': '#d87093',\n    'papayawhip': '#ffefd5',\n    'peachpuff': '#ffdab9',\n    'peru': '#cd853f',\n    'pink': '#ffc0cb',\n    'plum': '#dda0dd',\n    'powderblue': '#b0e0e6',\n    'purple': '#800080',\n    'rebeccapurple': '#663399',\n    'red': '#ff0000',\n    'rosybrown': '#bc8f8f',\n    'royalblue': '#4169e1',\n    'saddlebrown': '#8b4513',\n    'salmon': '#fa8072',\n    'sandybrown': '#f4a460',\n    'seagreen': '#2e8b57',\n    'seashell': '#fff5ee',\n    'sienna': '#a0522d',\n    'silver': '#c0c0c0',\n    'skyblue': '#87ceeb',\n    'slateblue': '#6a5acd',\n    'slategray': '#708090',\n    'slategrey': '#708090',\n    'snow': '#fffafa',\n    'springgreen': '#00ff7f',\n    'steelblue': '#4682b4',\n    'tan': '#d2b48c',\n    'teal': '#008080',\n    'thistle': '#d8bfd8',\n    'tomato': '#ff6347',\n    'turquoise': '#40e0d0',\n    'violet': '#ee82ee',\n    'wheat': '#f5deb3',\n    'white': '#ffffff',\n    'whitesmoke': '#f5f5f5',\n    'yellow': '#ffff00',\n    'yellowgreen': '#9acd32'\n  };\n\n  var unitConversions = {\n    length: {\n      'm': 1,\n      'cm': 0.01,\n      'mm': 0.001,\n      'in': 0.0254,\n      'px': 0.0254 / 96,\n      'pt': 0.0254 / 72,\n      'pc': 0.0254 / 72 * 12\n    },\n    duration: {\n      's': 1,\n      'ms': 0.001\n    },\n    angle: {\n      'rad': 1 / (2 * Math.PI),\n      'deg': 1 / 360,\n      'grad': 1 / 400,\n      'turn': 1\n    }\n  };\n\n  var data = {\n    colors: colors,\n    unitConversions: unitConversions\n  };\n\n  var Node =\n  /*#__PURE__*/\n  function () {\n    function Node() {\n      _classCallCheck(this, Node);\n\n      this.parent = null;\n      this.visibilityBlocks = undefined;\n      this.nodeVisible = undefined;\n      this.rootNode = null;\n      this.parsed = null;\n      var self = this;\n      Object.defineProperty(this, 'currentFileInfo', {\n        get: function get() {\n          return self.fileInfo();\n        }\n      });\n      Object.defineProperty(this, 'index', {\n        get: function get() {\n          return self.getIndex();\n        }\n      });\n    }\n\n    _createClass(Node, [{\n      key: \"setParent\",\n      value: function setParent(nodes, parent) {\n        function set(node) {\n          if (node && node instanceof Node) {\n            node.parent = parent;\n          }\n        }\n\n        if (Array.isArray(nodes)) {\n          nodes.forEach(set);\n        } else {\n          set(nodes);\n        }\n      }\n    }, {\n      key: \"getIndex\",\n      value: function getIndex() {\n        return this._index || this.parent && this.parent.getIndex() || 0;\n      }\n    }, {\n      key: \"fileInfo\",\n      value: function fileInfo() {\n        return this._fileInfo || this.parent && this.parent.fileInfo() || {};\n      }\n    }, {\n      key: \"isRulesetLike\",\n      value: function isRulesetLike() {\n        return false;\n      }\n    }, {\n      key: \"toCSS\",\n      value: function toCSS(context) {\n        var strs = [];\n        this.genCSS(context, {\n          add: function add(chunk, fileInfo, index) {\n            strs.push(chunk);\n          },\n          isEmpty: function isEmpty() {\n            return strs.length === 0;\n          }\n        });\n        return strs.join('');\n      }\n    }, {\n      key: \"genCSS\",\n      value: function genCSS(context, output) {\n        output.add(this.value);\n      }\n    }, {\n      key: \"accept\",\n      value: function accept(visitor) {\n        this.value = visitor.visit(this.value);\n      }\n    }, {\n      key: \"eval\",\n      value: function _eval() {\n        return this;\n      }\n    }, {\n      key: \"_operate\",\n      value: function _operate(context, op, a, b) {\n        switch (op) {\n          case '+':\n            return a + b;\n\n          case '-':\n            return a - b;\n\n          case '*':\n            return a * b;\n\n          case '/':\n            return a / b;\n        }\n      }\n    }, {\n      key: \"fround\",\n      value: function fround(context, value) {\n        var precision = context && context.numPrecision; // add \"epsilon\" to ensure numbers like 1.000000005 (represented as 1.000000004999...) are properly rounded:\n\n        return precision ? Number((value + 2e-16).toFixed(precision)) : value;\n      } // Returns true if this node represents root of ast imported by reference\n\n    }, {\n      key: \"blocksVisibility\",\n      value: function blocksVisibility() {\n        if (this.visibilityBlocks == null) {\n          this.visibilityBlocks = 0;\n        }\n\n        return this.visibilityBlocks !== 0;\n      }\n    }, {\n      key: \"addVisibilityBlock\",\n      value: function addVisibilityBlock() {\n        if (this.visibilityBlocks == null) {\n          this.visibilityBlocks = 0;\n        }\n\n        this.visibilityBlocks = this.visibilityBlocks + 1;\n      }\n    }, {\n      key: \"removeVisibilityBlock\",\n      value: function removeVisibilityBlock() {\n        if (this.visibilityBlocks == null) {\n          this.visibilityBlocks = 0;\n        }\n\n        this.visibilityBlocks = this.visibilityBlocks - 1;\n      } // Turns on node visibility - if called node will be shown in output regardless\n      // of whether it comes from import by reference or not\n\n    }, {\n      key: \"ensureVisibility\",\n      value: function ensureVisibility() {\n        this.nodeVisible = true;\n      } // Turns off node visibility - if called node will NOT be shown in output regardless\n      // of whether it comes from import by reference or not\n\n    }, {\n      key: \"ensureInvisibility\",\n      value: function ensureInvisibility() {\n        this.nodeVisible = false;\n      } // return values:\n      // false - the node must not be visible\n      // true - the node must be visible\n      // undefined or null - the node has the same visibility as its parent\n\n    }, {\n      key: \"isVisible\",\n      value: function isVisible() {\n        return this.nodeVisible;\n      }\n    }, {\n      key: \"visibilityInfo\",\n      value: function visibilityInfo() {\n        return {\n          visibilityBlocks: this.visibilityBlocks,\n          nodeVisible: this.nodeVisible\n        };\n      }\n    }, {\n      key: \"copyVisibilityInfo\",\n      value: function copyVisibilityInfo(info) {\n        if (!info) {\n          return;\n        }\n\n        this.visibilityBlocks = info.visibilityBlocks;\n        this.nodeVisible = info.nodeVisible;\n      }\n    }]);\n\n    return Node;\n  }();\n\n  Node.compare = function (a, b) {\n    /* returns:\n     -1: a < b\n     0: a = b\n     1: a > b\n     and *any* other value for a != b (e.g. undefined, NaN, -2 etc.) */\n    if (a.compare && // for \"symmetric results\" force toCSS-based comparison\n    // of Quoted or Anonymous if either value is one of those\n    !(b.type === 'Quoted' || b.type === 'Anonymous')) {\n      return a.compare(b);\n    } else if (b.compare) {\n      return -b.compare(a);\n    } else if (a.type !== b.type) {\n      return undefined;\n    }\n\n    a = a.value;\n    b = b.value;\n\n    if (!Array.isArray(a)) {\n      return a === b ? 0 : undefined;\n    }\n\n    if (a.length !== b.length) {\n      return undefined;\n    }\n\n    for (var i = 0; i < a.length; i++) {\n      if (Node.compare(a[i], b[i]) !== 0) {\n        return undefined;\n      }\n    }\n\n    return 0;\n  };\n\n  Node.numericCompare = function (a, b) {\n    return a < b ? -1 : a === b ? 0 : a > b ? 1 : undefined;\n  };\n\n  // RGB Colors - #ff0014, #eee\n  //\n\n  var Color =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(Color, _Node);\n\n    function Color(rgb, a, originalForm) {\n      var _this;\n\n      _classCallCheck(this, Color);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Color).call(this));\n\n      var self = _assertThisInitialized(_this); //\n      // The end goal here, is to parse the arguments\n      // into an integer triplet, such as `128, 255, 0`\n      //\n      // This facilitates operations and conversions.\n      //\n\n\n      if (Array.isArray(rgb)) {\n        _this.rgb = rgb;\n      } else if (rgb.length >= 6) {\n        _this.rgb = [];\n        rgb.match(/.{2}/g).map(function (c, i) {\n          if (i < 3) {\n            self.rgb.push(parseInt(c, 16));\n          } else {\n            self.alpha = parseInt(c, 16) / 255;\n          }\n        });\n      } else {\n        _this.rgb = [];\n        rgb.split('').map(function (c, i) {\n          if (i < 3) {\n            self.rgb.push(parseInt(c + c, 16));\n          } else {\n            self.alpha = parseInt(c + c, 16) / 255;\n          }\n        });\n      }\n\n      _this.alpha = _this.alpha || (typeof a === 'number' ? a : 1);\n\n      if (typeof originalForm !== 'undefined') {\n        _this.value = originalForm;\n      }\n\n      return _this;\n    }\n\n    _createClass(Color, [{\n      key: \"luma\",\n      value: function luma() {\n        var r = this.rgb[0] / 255;\n        var g = this.rgb[1] / 255;\n        var b = this.rgb[2] / 255;\n        r = r <= 0.03928 ? r / 12.92 : Math.pow((r + 0.055) / 1.055, 2.4);\n        g = g <= 0.03928 ? g / 12.92 : Math.pow((g + 0.055) / 1.055, 2.4);\n        b = b <= 0.03928 ? b / 12.92 : Math.pow((b + 0.055) / 1.055, 2.4);\n        return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n      }\n    }, {\n      key: \"genCSS\",\n      value: function genCSS(context, output) {\n        output.add(this.toCSS(context));\n      }\n    }, {\n      key: \"toCSS\",\n      value: function toCSS(context, doNotCompress) {\n        var compress = context && context.compress && !doNotCompress;\n        var color;\n        var alpha;\n        var colorFunction;\n        var args = []; // `value` is set if this color was originally\n        // converted from a named color string so we need\n        // to respect this and try to output named color too.\n\n        alpha = this.fround(context, this.alpha);\n\n        if (this.value) {\n          if (this.value.indexOf('rgb') === 0) {\n            if (alpha < 1) {\n              colorFunction = 'rgba';\n            }\n          } else if (this.value.indexOf('hsl') === 0) {\n            if (alpha < 1) {\n              colorFunction = 'hsla';\n            } else {\n              colorFunction = 'hsl';\n            }\n          } else {\n            return this.value;\n          }\n        } else {\n          if (alpha < 1) {\n            colorFunction = 'rgba';\n          }\n        }\n\n        switch (colorFunction) {\n          case 'rgba':\n            args = this.rgb.map(function (c) {\n              return clamp(Math.round(c), 255);\n            }).concat(clamp(alpha, 1));\n            break;\n\n          case 'hsla':\n            args.push(clamp(alpha, 1));\n\n          case 'hsl':\n            color = this.toHSL();\n            args = [this.fround(context, color.h), \"\".concat(this.fround(context, color.s * 100), \"%\"), \"\".concat(this.fround(context, color.l * 100), \"%\")].concat(args);\n        }\n\n        if (colorFunction) {\n          // Values are capped between `0` and `255`, rounded and zero-padded.\n          return \"\".concat(colorFunction, \"(\").concat(args.join(\",\".concat(compress ? '' : ' ')), \")\");\n        }\n\n        color = this.toRGB();\n\n        if (compress) {\n          var splitcolor = color.split(''); // Convert color to short format\n\n          if (splitcolor[1] === splitcolor[2] && splitcolor[3] === splitcolor[4] && splitcolor[5] === splitcolor[6]) {\n            color = \"#\".concat(splitcolor[1]).concat(splitcolor[3]).concat(splitcolor[5]);\n          }\n        }\n\n        return color;\n      } //\n      // Operations have to be done per-channel, if not,\n      // channels will spill onto each other. Once we have\n      // our result, in the form of an integer triplet,\n      // we create a new Color node to hold the result.\n      //\n\n    }, {\n      key: \"operate\",\n      value: function operate(context, op, other) {\n        var rgb = new Array(3);\n        var alpha = this.alpha * (1 - other.alpha) + other.alpha;\n\n        for (var c = 0; c < 3; c++) {\n          rgb[c] = this._operate(context, op, this.rgb[c], other.rgb[c]);\n        }\n\n        return new Color(rgb, alpha);\n      }\n    }, {\n      key: \"toRGB\",\n      value: function toRGB() {\n        return toHex(this.rgb);\n      }\n    }, {\n      key: \"toHSL\",\n      value: function toHSL() {\n        var r = this.rgb[0] / 255;\n        var g = this.rgb[1] / 255;\n        var b = this.rgb[2] / 255;\n        var a = this.alpha;\n        var max = Math.max(r, g, b);\n        var min = Math.min(r, g, b);\n        var h;\n        var s;\n        var l = (max + min) / 2;\n        var d = max - min;\n\n        if (max === min) {\n          h = s = 0;\n        } else {\n          s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n          switch (max) {\n            case r:\n              h = (g - b) / d + (g < b ? 6 : 0);\n              break;\n\n            case g:\n              h = (b - r) / d + 2;\n              break;\n\n            case b:\n              h = (r - g) / d + 4;\n              break;\n          }\n\n          h /= 6;\n        }\n\n        return {\n          h: h * 360,\n          s: s,\n          l: l,\n          a: a\n        };\n      } // Adapted from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\n\n    }, {\n      key: \"toHSV\",\n      value: function toHSV() {\n        var r = this.rgb[0] / 255;\n        var g = this.rgb[1] / 255;\n        var b = this.rgb[2] / 255;\n        var a = this.alpha;\n        var max = Math.max(r, g, b);\n        var min = Math.min(r, g, b);\n        var h;\n        var s;\n        var v = max;\n        var d = max - min;\n\n        if (max === 0) {\n          s = 0;\n        } else {\n          s = d / max;\n        }\n\n        if (max === min) {\n          h = 0;\n        } else {\n          switch (max) {\n            case r:\n              h = (g - b) / d + (g < b ? 6 : 0);\n              break;\n\n            case g:\n              h = (b - r) / d + 2;\n              break;\n\n            case b:\n              h = (r - g) / d + 4;\n              break;\n          }\n\n          h /= 6;\n        }\n\n        return {\n          h: h * 360,\n          s: s,\n          v: v,\n          a: a\n        };\n      }\n    }, {\n      key: \"toARGB\",\n      value: function toARGB() {\n        return toHex([this.alpha * 255].concat(this.rgb));\n      }\n    }, {\n      key: \"compare\",\n      value: function compare(x) {\n        return x.rgb && x.rgb[0] === this.rgb[0] && x.rgb[1] === this.rgb[1] && x.rgb[2] === this.rgb[2] && x.alpha === this.alpha ? 0 : undefined;\n      }\n    }]);\n\n    return Color;\n  }(Node);\n\n  Color.prototype.type = 'Color';\n\n  function clamp(v, max) {\n    return Math.min(Math.max(v, 0), max);\n  }\n\n  function toHex(v) {\n    return \"#\".concat(v.map(function (c) {\n      c = clamp(Math.round(c), 255);\n      return (c < 16 ? '0' : '') + c.toString(16);\n    }).join(''));\n  }\n\n  Color.fromKeyword = function (keyword) {\n    var c;\n    var key = keyword.toLowerCase();\n\n    if (colors.hasOwnProperty(key)) {\n      c = new Color(colors[key].slice(1));\n    } else if (key === 'transparent') {\n      c = new Color([0, 0, 0], 0);\n    }\n\n    if (c) {\n      c.value = keyword;\n      return c;\n    }\n  };\n\n  var Paren =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(Paren, _Node);\n\n    function Paren(node) {\n      var _this;\n\n      _classCallCheck(this, Paren);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Paren).call(this));\n      _this.value = node;\n      return _this;\n    }\n\n    _createClass(Paren, [{\n      key: \"genCSS\",\n      value: function genCSS(context, output) {\n        output.add('(');\n        this.value.genCSS(context, output);\n        output.add(')');\n      }\n    }, {\n      key: \"eval\",\n      value: function _eval(context) {\n        return new Paren(this.value.eval(context));\n      }\n    }]);\n\n    return Paren;\n  }(Node);\n\n  Paren.prototype.type = 'Paren';\n\n  var _noSpaceCombinators = {\n    '': true,\n    ' ': true,\n    '|': true\n  };\n\n  var Combinator =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(Combinator, _Node);\n\n    function Combinator(value) {\n      var _this;\n\n      _classCallCheck(this, Combinator);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Combinator).call(this));\n\n      if (value === ' ') {\n        _this.value = ' ';\n        _this.emptyOrWhitespace = true;\n      } else {\n        _this.value = value ? value.trim() : '';\n        _this.emptyOrWhitespace = _this.value === '';\n      }\n\n      return _this;\n    }\n\n    _createClass(Combinator, [{\n      key: \"genCSS\",\n      value: function genCSS(context, output) {\n        var spaceOrEmpty = context.compress || _noSpaceCombinators[this.value] ? '' : ' ';\n        output.add(spaceOrEmpty + this.value + spaceOrEmpty);\n      }\n    }]);\n\n    return Combinator;\n  }(Node);\n\n  Combinator.prototype.type = 'Combinator';\n\n  var Element =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(Element, _Node);\n\n    function Element(combinator, value, isVariable, index, currentFileInfo, visibilityInfo) {\n      var _this;\n\n      _classCallCheck(this, Element);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Element).call(this));\n      _this.combinator = combinator instanceof Combinator ? combinator : new Combinator(combinator);\n\n      if (typeof value === 'string') {\n        _this.value = value.trim();\n      } else if (value) {\n        _this.value = value;\n      } else {\n        _this.value = '';\n      }\n\n      _this.isVariable = isVariable;\n      _this._index = index;\n      _this._fileInfo = currentFileInfo;\n\n      _this.copyVisibilityInfo(visibilityInfo);\n\n      _this.setParent(_this.combinator, _assertThisInitialized(_this));\n\n      return _this;\n    }\n\n    _createClass(Element, [{\n      key: \"accept\",\n      value: function accept(visitor) {\n        var value = this.value;\n        this.combinator = visitor.visit(this.combinator);\n\n        if (_typeof(value) === 'object') {\n          this.value = visitor.visit(value);\n        }\n      }\n    }, {\n      key: \"eval\",\n      value: function _eval(context) {\n        return new Element(this.combinator, this.value.eval ? this.value.eval(context) : this.value, this.isVariable, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new Element(this.combinator, this.value, this.isVariable, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n      }\n    }, {\n      key: \"genCSS\",\n      value: function genCSS(context, output) {\n        output.add(this.toCSS(context), this.fileInfo(), this.getIndex());\n      }\n    }, {\n      key: \"toCSS\",\n      value: function toCSS() {\n        var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var value = this.value;\n        var firstSelector = context.firstSelector;\n\n        if (value instanceof Paren) {\n          // selector in parens should not be affected by outer selector\n          // flags (breaks only interpolated selectors - see #1973)\n          context.firstSelector = true;\n        }\n\n        value = value.toCSS ? value.toCSS(context) : value;\n        context.firstSelector = firstSelector;\n\n        if (value === '' && this.combinator.value.charAt(0) === '&') {\n          return '';\n        } else {\n          return this.combinator.toCSS(context) + value;\n        }\n      }\n    }]);\n\n    return Element;\n  }(Node);\n\n  Element.prototype.type = 'Element';\n\n  var Math$1 = {\n    ALWAYS: 0,\n    PARENS_DIVISION: 1,\n    PARENS: 2,\n    STRICT_LEGACY: 3\n  };\n  var RewriteUrls = {\n    OFF: 0,\n    LOCAL: 1,\n    ALL: 2\n  };\n\n  function createCommonjsModule(fn, module) {\n  \treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n  }\n\n  var clone_1 = createCommonjsModule(function (module) {\n  var clone = (function() {\n\n  function _instanceof(obj, type) {\n    return type != null && obj instanceof type;\n  }\n\n  var nativeMap;\n  try {\n    nativeMap = Map;\n  } catch(_) {\n    // maybe a reference error because no `Map`. Give it a dummy value that no\n    // value will ever be an instanceof.\n    nativeMap = function() {};\n  }\n\n  var nativeSet;\n  try {\n    nativeSet = Set;\n  } catch(_) {\n    nativeSet = function() {};\n  }\n\n  var nativePromise;\n  try {\n    nativePromise = Promise;\n  } catch(_) {\n    nativePromise = function() {};\n  }\n\n  /**\n   * Clones (copies) an Object using deep copying.\n   *\n   * This function supports circular references by default, but if you are certain\n   * there are no circular references in your object, you can save some CPU time\n   * by calling clone(obj, false).\n   *\n   * Caution: if `circular` is false and `parent` contains circular references,\n   * your program may enter an infinite loop and crash.\n   *\n   * @param `parent` - the object to be cloned\n   * @param `circular` - set to true if the object to be cloned may contain\n   *    circular references. (optional - true by default)\n   * @param `depth` - set to a number if the object is only to be cloned to\n   *    a particular depth. (optional - defaults to Infinity)\n   * @param `prototype` - sets the prototype to be used when cloning an object.\n   *    (optional - defaults to parent prototype).\n   * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n   *    should be cloned as well. Non-enumerable properties on the prototype\n   *    chain will be ignored. (optional - false by default)\n  */\n  function clone(parent, circular, depth, prototype, includeNonEnumerable) {\n    if (typeof circular === 'object') {\n      depth = circular.depth;\n      prototype = circular.prototype;\n      includeNonEnumerable = circular.includeNonEnumerable;\n      circular = circular.circular;\n    }\n    // maintain two arrays for circular references, where corresponding parents\n    // and children have the same index\n    var allParents = [];\n    var allChildren = [];\n\n    var useBuffer = typeof Buffer != 'undefined';\n\n    if (typeof circular == 'undefined')\n      circular = true;\n\n    if (typeof depth == 'undefined')\n      depth = Infinity;\n\n    // recurse this function so we don't reset allParents and allChildren\n    function _clone(parent, depth) {\n      // cloning null always returns null\n      if (parent === null)\n        return null;\n\n      if (depth === 0)\n        return parent;\n\n      var child;\n      var proto;\n      if (typeof parent != 'object') {\n        return parent;\n      }\n\n      if (_instanceof(parent, nativeMap)) {\n        child = new nativeMap();\n      } else if (_instanceof(parent, nativeSet)) {\n        child = new nativeSet();\n      } else if (_instanceof(parent, nativePromise)) {\n        child = new nativePromise(function (resolve, reject) {\n          parent.then(function(value) {\n            resolve(_clone(value, depth - 1));\n          }, function(err) {\n            reject(_clone(err, depth - 1));\n          });\n        });\n      } else if (clone.__isArray(parent)) {\n        child = [];\n      } else if (clone.__isRegExp(parent)) {\n        child = new RegExp(parent.source, __getRegExpFlags(parent));\n        if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n      } else if (clone.__isDate(parent)) {\n        child = new Date(parent.getTime());\n      } else if (useBuffer && Buffer.isBuffer(parent)) {\n        if (Buffer.allocUnsafe) {\n          // Node.js >= 4.5.0\n          child = Buffer.allocUnsafe(parent.length);\n        } else {\n          // Older Node.js versions\n          child = new Buffer(parent.length);\n        }\n        parent.copy(child);\n        return child;\n      } else if (_instanceof(parent, Error)) {\n        child = Object.create(parent);\n      } else {\n        if (typeof prototype == 'undefined') {\n          proto = Object.getPrototypeOf(parent);\n          child = Object.create(proto);\n        }\n        else {\n          child = Object.create(prototype);\n          proto = prototype;\n        }\n      }\n\n      if (circular) {\n        var index = allParents.indexOf(parent);\n\n        if (index != -1) {\n          return allChildren[index];\n        }\n        allParents.push(parent);\n        allChildren.push(child);\n      }\n\n      if (_instanceof(parent, nativeMap)) {\n        parent.forEach(function(value, key) {\n          var keyChild = _clone(key, depth - 1);\n          var valueChild = _clone(value, depth - 1);\n          child.set(keyChild, valueChild);\n        });\n      }\n      if (_instanceof(parent, nativeSet)) {\n        parent.forEach(function(value) {\n          var entryChild = _clone(value, depth - 1);\n          child.add(entryChild);\n        });\n      }\n\n      for (var i in parent) {\n        var attrs;\n        if (proto) {\n          attrs = Object.getOwnPropertyDescriptor(proto, i);\n        }\n\n        if (attrs && attrs.set == null) {\n          continue;\n        }\n        child[i] = _clone(parent[i], depth - 1);\n      }\n\n      if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(parent);\n        for (var i = 0; i < symbols.length; i++) {\n          // Don't need to worry about cloning a symbol because it is a primitive,\n          // like a number or string.\n          var symbol = symbols[i];\n          var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n          if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n            continue;\n          }\n          child[symbol] = _clone(parent[symbol], depth - 1);\n          if (!descriptor.enumerable) {\n            Object.defineProperty(child, symbol, {\n              enumerable: false\n            });\n          }\n        }\n      }\n\n      if (includeNonEnumerable) {\n        var allPropertyNames = Object.getOwnPropertyNames(parent);\n        for (var i = 0; i < allPropertyNames.length; i++) {\n          var propertyName = allPropertyNames[i];\n          var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n          if (descriptor && descriptor.enumerable) {\n            continue;\n          }\n          child[propertyName] = _clone(parent[propertyName], depth - 1);\n          Object.defineProperty(child, propertyName, {\n            enumerable: false\n          });\n        }\n      }\n\n      return child;\n    }\n\n    return _clone(parent, depth);\n  }\n\n  /**\n   * Simple flat clone using prototype, accepts only objects, usefull for property\n   * override on FLAT configuration object (no nested props).\n   *\n   * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n   * works.\n   */\n  clone.clonePrototype = function clonePrototype(parent) {\n    if (parent === null)\n      return null;\n\n    var c = function () {};\n    c.prototype = parent;\n    return new c();\n  };\n\n  // private utility functions\n\n  function __objToStr(o) {\n    return Object.prototype.toString.call(o);\n  }\n  clone.__objToStr = __objToStr;\n\n  function __isDate(o) {\n    return typeof o === 'object' && __objToStr(o) === '[object Date]';\n  }\n  clone.__isDate = __isDate;\n\n  function __isArray(o) {\n    return typeof o === 'object' && __objToStr(o) === '[object Array]';\n  }\n  clone.__isArray = __isArray;\n\n  function __isRegExp(o) {\n    return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n  }\n  clone.__isRegExp = __isRegExp;\n\n  function __getRegExpFlags(re) {\n    var flags = '';\n    if (re.global) flags += 'g';\n    if (re.ignoreCase) flags += 'i';\n    if (re.multiline) flags += 'm';\n    return flags;\n  }\n  clone.__getRegExpFlags = __getRegExpFlags;\n\n  return clone;\n  })();\n\n  if ( module.exports) {\n    module.exports = clone;\n  }\n  });\n\n  /* jshint proto: true */\n  function getLocation(index, inputStream) {\n    var n = index + 1;\n    var line = null;\n    var column = -1;\n\n    while (--n >= 0 && inputStream.charAt(n) !== '\\n') {\n      column++;\n    }\n\n    if (typeof index === 'number') {\n      line = (inputStream.slice(0, index).match(/\\n/g) || '').length;\n    }\n\n    return {\n      line: line,\n      column: column\n    };\n  }\n  function copyArray(arr) {\n    var i;\n    var length = arr.length;\n    var copy = new Array(length);\n\n    for (i = 0; i < length; i++) {\n      copy[i] = arr[i];\n    }\n\n    return copy;\n  }\n  function clone(obj) {\n    var cloned = {};\n\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        cloned[prop] = obj[prop];\n      }\n    }\n\n    return cloned;\n  }\n  function defaults(obj1, obj2) {\n    var newObj = obj2 || {};\n\n    if (!obj2._defaults) {\n      newObj = {};\n\n      var _defaults = clone_1(obj1);\n\n      newObj._defaults = _defaults;\n      var cloned = obj2 ? clone_1(obj2) : {};\n      Object.assign(newObj, _defaults, cloned);\n    }\n\n    return newObj;\n  }\n  function copyOptions(obj1, obj2) {\n    if (obj2 && obj2._defaults) {\n      return obj2;\n    }\n\n    var opts = defaults(obj1, obj2);\n\n    if (opts.strictMath) {\n      opts.math = Math$1.STRICT_LEGACY;\n    } // Back compat with changed relativeUrls option\n\n\n    if (opts.relativeUrls) {\n      opts.rewriteUrls = RewriteUrls.ALL;\n    }\n\n    if (typeof opts.math === 'string') {\n      switch (opts.math.toLowerCase()) {\n        case 'always':\n          opts.math = Math$1.ALWAYS;\n          break;\n\n        case 'parens-division':\n          opts.math = Math$1.PARENS_DIVISION;\n          break;\n\n        case 'strict':\n        case 'parens':\n          opts.math = Math$1.PARENS;\n          break;\n\n        case 'strict-legacy':\n          opts.math = Math$1.STRICT_LEGACY;\n      }\n    }\n\n    if (typeof opts.rewriteUrls === 'string') {\n      switch (opts.rewriteUrls.toLowerCase()) {\n        case 'off':\n          opts.rewriteUrls = RewriteUrls.OFF;\n          break;\n\n        case 'local':\n          opts.rewriteUrls = RewriteUrls.LOCAL;\n          break;\n\n        case 'all':\n          opts.rewriteUrls = RewriteUrls.ALL;\n          break;\n      }\n    }\n\n    return opts;\n  }\n  function merge(obj1, obj2) {\n    for (var prop in obj2) {\n      if (obj2.hasOwnProperty(prop)) {\n        obj1[prop] = obj2[prop];\n      }\n    }\n\n    return obj1;\n  }\n  function flattenArray(arr) {\n    var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    for (var i = 0, length = arr.length; i < length; i++) {\n      var value = arr[i];\n\n      if (Array.isArray(value)) {\n        flattenArray(value, result);\n      } else {\n        if (value !== undefined) {\n          result.push(value);\n        }\n      }\n    }\n\n    return result;\n  }\n\n  var utils = /*#__PURE__*/Object.freeze({\n    getLocation: getLocation,\n    copyArray: copyArray,\n    clone: clone,\n    defaults: defaults,\n    copyOptions: copyOptions,\n    merge: merge,\n    flattenArray: flattenArray\n  });\n\n  /**\n   * This is a centralized class of any error that could be thrown internally (mostly by the parser).\n   * Besides standard .message it keeps some additional data like a path to the file where the error\n   * occurred along with line and column numbers.\n   *\n   * @class\n   * @extends Error\n   * @type {module.LessError}\n   *\n   * @prop {string} type\n   * @prop {string} filename\n   * @prop {number} index\n   * @prop {number} line\n   * @prop {number} column\n   * @prop {number} callLine\n   * @prop {number} callExtract\n   * @prop {string[]} extract\n   *\n   * @param {Object} e              - An error object to wrap around or just a descriptive object\n   * @param {Object} fileContentMap - An object with file contents in 'contents' property (like importManager) @todo - move to fileManager?\n   * @param {string} [currentFilename]\n   */\n\n  var LessError = function LessError(e, fileContentMap, currentFilename) {\n    Error.call(this);\n    var filename = e.filename || currentFilename;\n    this.message = e.message;\n    this.stack = e.stack;\n\n    if (fileContentMap && filename) {\n      var input = fileContentMap.contents[filename];\n      var loc = getLocation(e.index, input);\n      var line = loc.line;\n      var col = loc.column;\n      var callLine = e.call && getLocation(e.call, input).line;\n      var lines = input ? input.split('\\n') : '';\n      this.type = e.type || 'Syntax';\n      this.filename = filename;\n      this.index = e.index;\n      this.line = typeof line === 'number' ? line + 1 : null;\n      this.column = col;\n\n      if (!this.line && this.stack) {\n        var found = this.stack.match(/(<anonymous>|Function):(\\d+):(\\d+)/);\n\n        if (found) {\n          if (found[2]) {\n            this.line = parseInt(found[2]) - 2;\n          }\n\n          if (found[3]) {\n            this.column = parseInt(found[3]);\n          }\n        }\n      }\n\n      this.callLine = callLine + 1;\n      this.callExtract = lines[callLine];\n      this.extract = [lines[this.line - 2], lines[this.line - 1], lines[this.line]];\n    }\n  };\n\n  if (typeof Object.create === 'undefined') {\n    var F = function F() {};\n\n    F.prototype = Error.prototype;\n    LessError.prototype = new F();\n  } else {\n    LessError.prototype = Object.create(Error.prototype);\n  }\n\n  LessError.prototype.constructor = LessError;\n  /**\n   * An overridden version of the default Object.prototype.toString\n   * which uses additional information to create a helpful message.\n   *\n   * @param {Object} options\n   * @returns {string}\n   */\n\n  LessError.prototype.toString = function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var message = '';\n    var extract = this.extract || [];\n    var error = [];\n\n    var stylize = function stylize(str) {\n      return str;\n    };\n\n    if (options.stylize) {\n      var type = _typeof(options.stylize);\n\n      if (type !== 'function') {\n        throw Error(\"options.stylize should be a function, got a \".concat(type, \"!\"));\n      }\n\n      stylize = options.stylize;\n    }\n\n    if (this.line !== null) {\n      if (typeof extract[0] === 'string') {\n        error.push(stylize(\"\".concat(this.line - 1, \" \").concat(extract[0]), 'grey'));\n      }\n\n      if (typeof extract[1] === 'string') {\n        var errorTxt = \"\".concat(this.line, \" \");\n\n        if (extract[1]) {\n          errorTxt += extract[1].slice(0, this.column) + stylize(stylize(stylize(extract[1].substr(this.column, 1), 'bold') + extract[1].slice(this.column + 1), 'red'), 'inverse');\n        }\n\n        error.push(errorTxt);\n      }\n\n      if (typeof extract[2] === 'string') {\n        error.push(stylize(\"\".concat(this.line + 1, \" \").concat(extract[2]), 'grey'));\n      }\n\n      error = \"\".concat(error.join('\\n') + stylize('', 'reset'), \"\\n\");\n    }\n\n    message += stylize(\"\".concat(this.type, \"Error: \").concat(this.message), 'red');\n\n    if (this.filename) {\n      message += stylize(' in ', 'red') + this.filename;\n    }\n\n    if (this.line) {\n      message += stylize(\" on line \".concat(this.line, \", column \").concat(this.column + 1, \":\"), 'grey');\n    }\n\n    message += \"\\n\".concat(error);\n\n    if (this.callLine) {\n      message += \"\".concat(stylize('from ', 'red') + (this.filename || ''), \"/n\");\n      message += \"\".concat(stylize(this.callLine, 'grey'), \" \").concat(this.callExtract, \"/n\");\n    }\n\n    return message;\n  };\n\n  var Selector =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(Selector, _Node);\n\n    function Selector(elements, extendList, condition, index, currentFileInfo, visibilityInfo) {\n      var _this;\n\n      _classCallCheck(this, Selector);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Selector).call(this));\n      _this.extendList = extendList;\n      _this.condition = condition;\n      _this.evaldCondition = !condition;\n      _this._index = index;\n      _this._fileInfo = currentFileInfo;\n      _this.elements = _this.getElements(elements);\n      _this.mixinElements_ = undefined;\n\n      _this.copyVisibilityInfo(visibilityInfo);\n\n      _this.setParent(_this.elements, _assertThisInitialized(_this));\n\n      return _this;\n    }\n\n    _createClass(Selector, [{\n      key: \"accept\",\n      value: function accept(visitor) {\n        if (this.elements) {\n          this.elements = visitor.visitArray(this.elements);\n        }\n\n        if (this.extendList) {\n          this.extendList = visitor.visitArray(this.extendList);\n        }\n\n        if (this.condition) {\n          this.condition = visitor.visit(this.condition);\n        }\n      }\n    }, {\n      key: \"createDerived\",\n      value: function createDerived(elements, extendList, evaldCondition) {\n        elements = this.getElements(elements);\n        var newSelector = new Selector(elements, extendList || this.extendList, null, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n        newSelector.evaldCondition = evaldCondition != null ? evaldCondition : this.evaldCondition;\n        newSelector.mediaEmpty = this.mediaEmpty;\n        return newSelector;\n      }\n    }, {\n      key: \"getElements\",\n      value: function getElements(els) {\n        if (!els) {\n          return [new Element('', '&', false, this._index, this._fileInfo)];\n        }\n\n        if (typeof els === 'string') {\n          this.parse.parseNode(els, ['selector'], this._index, this._fileInfo, function (err, result) {\n            if (err) {\n              throw new LessError({\n                index: err.index,\n                message: err.message\n              }, this.parse.imports, this._fileInfo.filename);\n            }\n\n            els = result[0].elements;\n          });\n        }\n\n        return els;\n      }\n    }, {\n      key: \"createEmptySelectors\",\n      value: function createEmptySelectors() {\n        var el = new Element('', '&', false, this._index, this._fileInfo);\n        var sels = [new Selector([el], null, null, this._index, this._fileInfo)];\n        sels[0].mediaEmpty = true;\n        return sels;\n      }\n    }, {\n      key: \"match\",\n      value: function match(other) {\n        var elements = this.elements;\n        var len = elements.length;\n        var olen;\n        var i;\n        other = other.mixinElements();\n        olen = other.length;\n\n        if (olen === 0 || len < olen) {\n          return 0;\n        } else {\n          for (i = 0; i < olen; i++) {\n            if (elements[i].value !== other[i]) {\n              return 0;\n            }\n          }\n        }\n\n        return olen; // return number of matched elements\n      }\n    }, {\n      key: \"mixinElements\",\n      value: function mixinElements() {\n        if (this.mixinElements_) {\n          return this.mixinElements_;\n        }\n\n        var elements = this.elements.map(function (v) {\n          return v.combinator.value + (v.value.value || v.value);\n        }).join('').match(/[,&#\\*\\.\\w-]([\\w-]|(\\\\.))*/g);\n\n        if (elements) {\n          if (elements[0] === '&') {\n            elements.shift();\n          }\n        } else {\n          elements = [];\n        }\n\n        return this.mixinElements_ = elements;\n      }\n    }, {\n      key: \"isJustParentSelector\",\n      value: function isJustParentSelector() {\n        return !this.mediaEmpty && this.elements.length === 1 && this.elements[0].value === '&' && (this.elements[0].combinator.value === ' ' || this.elements[0].combinator.value === '');\n      }\n    }, {\n      key: \"eval\",\n      value: function _eval(context) {\n        var evaldCondition = this.condition && this.condition.eval(context);\n        var elements = this.elements;\n        var extendList = this.extendList;\n        elements = elements && elements.map(function (e) {\n          return e.eval(context);\n        });\n        extendList = extendList && extendList.map(function (extend) {\n          return extend.eval(context);\n        });\n        return this.createDerived(elements, extendList, evaldCondition);\n      }\n    }, {\n      key: \"genCSS\",\n      value: function genCSS(context, output) {\n        var i;\n        var element;\n\n        if ((!context || !context.firstSelector) && this.elements[0].combinator.value === '') {\n          output.add(' ', this.fileInfo(), this.getIndex());\n        }\n\n        for (i = 0; i < this.elements.length; i++) {\n          element = this.elements[i];\n          element.genCSS(context, output);\n        }\n      }\n    }, {\n      key: \"getIsOutput\",\n      value: function getIsOutput() {\n        return this.evaldCondition;\n      }\n    }]);\n\n    return Selector;\n  }(Node);\n\n  Selector.prototype.type = 'Selector';\n\n  var Value =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(Value, _Node);\n\n    function Value(value) {\n      var _this;\n\n      _classCallCheck(this, Value);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Value).call(this));\n\n      if (!value) {\n        throw new Error('Value requires an array argument');\n      }\n\n      if (!Array.isArray(value)) {\n        _this.value = [value];\n      } else {\n        _this.value = value;\n      }\n\n      return _this;\n    }\n\n    _createClass(Value, [{\n      key: \"accept\",\n      value: function accept(visitor) {\n        if (this.value) {\n          this.value = visitor.visitArray(this.value);\n        }\n      }\n    }, {\n      key: \"eval\",\n      value: function _eval(context) {\n        if (this.value.length === 1) {\n          return this.value[0].eval(context);\n        } else {\n          return new Value(this.value.map(function (v) {\n            return v.eval(context);\n          }));\n        }\n      }\n    }, {\n      key: \"genCSS\",\n      value: function genCSS(context, output) {\n        var i;\n\n        for (i = 0; i < this.value.length; i++) {\n          this.value[i].genCSS(context, output);\n\n          if (i + 1 < this.value.length) {\n            output.add(context && context.compress ? ',' : ', ');\n          }\n        }\n      }\n    }]);\n\n    return Value;\n  }(Node);\n\n  Value.prototype.type = 'Value';\n\n  var Keyword =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(Keyword, _Node);\n\n    function Keyword(value) {\n      var _this;\n\n      _classCallCheck(this, Keyword);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Keyword).call(this));\n      _this.value = value;\n      return _this;\n    }\n\n    _createClass(Keyword, [{\n      key: \"genCSS\",\n      value: function genCSS(context, output) {\n        if (this.value === '%') {\n          throw {\n            type: 'Syntax',\n            message: 'Invalid % without number'\n          };\n        }\n\n        output.add(this.value);\n      }\n    }]);\n\n    return Keyword;\n  }(Node);\n\n  Keyword.prototype.type = 'Keyword';\n  Keyword.True = new Keyword('true');\n  Keyword.False = new Keyword('false');\n\n  var Anonymous =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(Anonymous, _Node);\n\n    function Anonymous(value, index, currentFileInfo, mapLines, rulesetLike, visibilityInfo) {\n      var _this;\n\n      _classCallCheck(this, Anonymous);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Anonymous).call(this));\n      _this.value = value;\n      _this._index = index;\n      _this._fileInfo = currentFileInfo;\n      _this.mapLines = mapLines;\n      _this.rulesetLike = typeof rulesetLike === 'undefined' ? false : rulesetLike;\n      _this.allowRoot = true;\n\n      _this.copyVisibilityInfo(visibilityInfo);\n\n      return _this;\n    }\n\n    _createClass(Anonymous, [{\n      key: \"eval\",\n      value: function _eval() {\n        return new Anonymous(this.value, this._index, this._fileInfo, this.mapLines, this.rulesetLike, this.visibilityInfo());\n      }\n    }, {\n      key: \"compare\",\n      value: function compare(other) {\n        return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;\n      }\n    }, {\n      key: \"isRulesetLike\",\n      value: function isRulesetLike() {\n        return this.rulesetLike;\n      }\n    }, {\n      key: \"genCSS\",\n      value: function genCSS(context, output) {\n        this.nodeVisible = Boolean(this.value);\n\n        if (this.nodeVisible) {\n          output.add(this.value, this._fileInfo, this._index, this.mapLines);\n        }\n      }\n    }]);\n\n    return Anonymous;\n  }(Node);\n\n  Anonymous.prototype.type = 'Anonymous';\n\n  var MATH = Math$1;\n\n  var Declaration =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(Declaration, _Node);\n\n    function Declaration(name, value, important, merge, index, currentFileInfo, inline, variable) {\n      var _this;\n\n      _classCallCheck(this, Declaration);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Declaration).call(this));\n      _this.name = name;\n      _this.value = value instanceof Node ? value : new Value([value ? new Anonymous(value) : null]);\n      _this.important = important ? \" \".concat(important.trim()) : '';\n      _this.merge = merge;\n      _this._index = index;\n      _this._fileInfo = currentFileInfo;\n      _this.inline = inline || false;\n      _this.variable = variable !== undefined ? variable : name.charAt && name.charAt(0) === '@';\n      _this.allowRoot = true;\n\n      _this.setParent(_this.value, _assertThisInitialized(_this));\n\n      return _this;\n    }\n\n    _createClass(Declaration, [{\n      key: \"genCSS\",\n      value: function genCSS(context, output) {\n        output.add(this.name + (context.compress ? ':' : ': '), this.fileInfo(), this.getIndex());\n\n        try {\n          this.value.genCSS(context, output);\n        } catch (e) {\n          e.index = this._index;\n          e.filename = this._fileInfo.filename;\n          throw e;\n        }\n\n        output.add(this.important + (this.inline || context.lastRule && context.compress ? '' : ';'), this._fileInfo, this._index);\n      }\n    }, {\n      key: \"eval\",\n      value: function _eval(context) {\n        var mathBypass = false;\n        var prevMath;\n        var name = this.name;\n        var evaldValue;\n        var variable = this.variable;\n\n        if (typeof name !== 'string') {\n          // expand 'primitive' name directly to get\n          // things faster (~10% for benchmark.less):\n          name = name.length === 1 && name[0] instanceof Keyword ? name[0].value : evalName(context, name);\n          variable = false; // never treat expanded interpolation as new variable name\n        } // @todo remove when parens-division is default\n\n\n        if (name === 'font' && context.math === MATH.ALWAYS) {\n          mathBypass = true;\n          prevMath = context.math;\n          context.math = MATH.PARENS_DIVISION;\n        }\n\n        try {\n          context.importantScope.push({});\n          evaldValue = this.value.eval(context);\n\n          if (!this.variable && evaldValue.type === 'DetachedRuleset') {\n            throw {\n              message: 'Rulesets cannot be evaluated on a property.',\n              index: this.getIndex(),\n              filename: this.fileInfo().filename\n            };\n          }\n\n          var important = this.important;\n          var importantResult = context.importantScope.pop();\n\n          if (!important && importantResult.important) {\n            important = importantResult.important;\n          }\n\n          return new Declaration(name, evaldValue, important, this.merge, this.getIndex(), this.fileInfo(), this.inline, variable);\n        } catch (e) {\n          if (typeof e.index !== 'number') {\n            e.index = this.getIndex();\n            e.filename = this.fileInfo().filename;\n          }\n\n          throw e;\n        } finally {\n          if (mathBypass) {\n            context.math = prevMath;\n          }\n        }\n      }\n    }, {\n      key: \"makeImportant\",\n      value: function makeImportant() {\n        return new Declaration(this.name, this.value, '!important', this.merge, this.getIndex(), this.fileInfo(), this.inline);\n      }\n    }]);\n\n    return Declaration;\n  }(Node);\n\n  function evalName(context, name) {\n    var value = '';\n    var i;\n    var n = name.length;\n    var output = {\n      add: function add(s) {\n        value += s;\n      }\n    };\n\n    for (i = 0; i < n; i++) {\n      name[i].eval(context).genCSS(context, output);\n    }\n\n    return value;\n  }\n\n  Declaration.prototype.type = 'Declaration';\n\n  var debugInfo = function debugInfo(context, ctx, lineSeparator) {\n    var result = '';\n\n    if (context.dumpLineNumbers && !context.compress) {\n      switch (context.dumpLineNumbers) {\n        case 'comments':\n          result = debugInfo.asComment(ctx);\n          break;\n\n        case 'mediaquery':\n          result = debugInfo.asMediaQuery(ctx);\n          break;\n\n        case 'all':\n          result = debugInfo.asComment(ctx) + (lineSeparator || '') + debugInfo.asMediaQuery(ctx);\n          break;\n      }\n    }\n\n    return result;\n  };\n\n  debugInfo.asComment = function (ctx) {\n    return \"/* line \".concat(ctx.debugInfo.lineNumber, \", \").concat(ctx.debugInfo.fileName, \" */\\n\");\n  };\n\n  debugInfo.asMediaQuery = function (ctx) {\n    var filenameWithProtocol = ctx.debugInfo.fileName;\n\n    if (!/^[a-z]+:\\/\\//i.test(filenameWithProtocol)) {\n      filenameWithProtocol = \"file://\".concat(filenameWithProtocol);\n    }\n\n    return \"@media -sass-debug-info{filename{font-family:\".concat(filenameWithProtocol.replace(/([.:\\/\\\\])/g, function (a) {\n      if (a == '\\\\') {\n        a = '\\/';\n      }\n\n      return \"\\\\\".concat(a);\n    }), \"}line{font-family:\\\\00003\").concat(ctx.debugInfo.lineNumber, \"}}\\n\");\n  };\n\n  var Comment =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(Comment, _Node);\n\n    function Comment(value, isLineComment, index, currentFileInfo) {\n      var _this;\n\n      _classCallCheck(this, Comment);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Comment).call(this));\n      _this.value = value;\n      _this.isLineComment = isLineComment;\n      _this._index = index;\n      _this._fileInfo = currentFileInfo;\n      _this.allowRoot = true;\n      return _this;\n    }\n\n    _createClass(Comment, [{\n      key: \"genCSS\",\n      value: function genCSS(context, output) {\n        if (this.debugInfo) {\n          output.add(debugInfo(context, this), this.fileInfo(), this.getIndex());\n        }\n\n        output.add(this.value);\n      }\n    }, {\n      key: \"isSilent\",\n      value: function isSilent(context) {\n        var isCompressed = context.compress && this.value[2] !== '!';\n        return this.isLineComment || isCompressed;\n      }\n    }]);\n\n    return Comment;\n  }(Node);\n\n  Comment.prototype.type = 'Comment';\n\n  var contexts = {};\n\n  var copyFromOriginal = function copyFromOriginal(original, destination, propertiesToCopy) {\n    if (!original) {\n      return;\n    }\n\n    for (var i = 0; i < propertiesToCopy.length; i++) {\n      if (original.hasOwnProperty(propertiesToCopy[i])) {\n        destination[propertiesToCopy[i]] = original[propertiesToCopy[i]];\n      }\n    }\n  };\n  /*\n   parse is used whilst parsing\n   */\n\n\n  var parseCopyProperties = [// options\n  'paths', // option - unmodified - paths to search for imports on\n  'rewriteUrls', // option - whether to adjust URL's to be relative\n  'rootpath', // option - rootpath to append to URL's\n  'strictImports', // option -\n  'insecure', // option - whether to allow imports from insecure ssl hosts\n  'dumpLineNumbers', // option - whether to dump line numbers\n  'compress', // option - whether to compress\n  'syncImport', // option - whether to import synchronously\n  'chunkInput', // option - whether to chunk input. more performant but causes parse issues.\n  'mime', // browser only - mime type for sheet import\n  'useFileCache', // browser only - whether to use the per file session cache\n  // context\n  'processImports', // option & context - whether to process imports. if false then imports will not be imported.\n  // Used by the import manager to stop multiple import visitors being created.\n  'pluginManager' // Used as the plugin manager for the session\n  ];\n\n  contexts.Parse = function (options) {\n    copyFromOriginal(options, this, parseCopyProperties);\n\n    if (typeof this.paths === 'string') {\n      this.paths = [this.paths];\n    }\n  };\n\n  var evalCopyProperties = ['paths', // additional include paths\n  'compress', // whether to compress\n  'math', // whether math has to be within parenthesis\n  'strictUnits', // whether units need to evaluate correctly\n  'sourceMap', // whether to output a source map\n  'importMultiple', // whether we are currently importing multiple copies\n  'urlArgs', // whether to add args into url tokens\n  'javascriptEnabled', // option - whether Inline JavaScript is enabled. if undefined, defaults to false\n  'pluginManager', // Used as the plugin manager for the session\n  'importantScope', // used to bubble up !important statements\n  'rewriteUrls' // option - whether to adjust URL's to be relative\n  ];\n\n  function isPathRelative(path) {\n    return !/^(?:[a-z-]+:|\\/|#)/i.test(path);\n  }\n\n  function isPathLocalRelative(path) {\n    return path.charAt(0) === '.';\n  }\n\n  contexts.Eval =\n  /*#__PURE__*/\n  function () {\n    function _class(options, frames) {\n      _classCallCheck(this, _class);\n\n      copyFromOriginal(options, this, evalCopyProperties);\n\n      if (typeof this.paths === 'string') {\n        this.paths = [this.paths];\n      }\n\n      this.frames = frames || [];\n      this.importantScope = this.importantScope || [];\n      this.inCalc = false;\n      this.mathOn = true;\n    }\n\n    _createClass(_class, [{\n      key: \"enterCalc\",\n      value: function enterCalc() {\n        if (!this.calcStack) {\n          this.calcStack = [];\n        }\n\n        this.calcStack.push(true);\n        this.inCalc = true;\n      }\n    }, {\n      key: \"exitCalc\",\n      value: function exitCalc() {\n        this.calcStack.pop();\n\n        if (!this.calcStack) {\n          this.inCalc = false;\n        }\n      }\n    }, {\n      key: \"inParenthesis\",\n      value: function inParenthesis() {\n        if (!this.parensStack) {\n          this.parensStack = [];\n        }\n\n        this.parensStack.push(true);\n      }\n    }, {\n      key: \"outOfParenthesis\",\n      value: function outOfParenthesis() {\n        this.parensStack.pop();\n      }\n    }, {\n      key: \"isMathOn\",\n      value: function isMathOn(op) {\n        if (!this.mathOn) {\n          return false;\n        }\n\n        if (op === '/' && this.math !== Math$1.ALWAYS && (!this.parensStack || !this.parensStack.length)) {\n          return false;\n        }\n\n        if (this.math > Math$1.PARENS_DIVISION) {\n          return this.parensStack && this.parensStack.length;\n        }\n\n        return true;\n      }\n    }, {\n      key: \"pathRequiresRewrite\",\n      value: function pathRequiresRewrite(path) {\n        var isRelative = this.rewriteUrls === RewriteUrls.LOCAL ? isPathLocalRelative : isPathRelative;\n        return isRelative(path);\n      }\n    }, {\n      key: \"rewritePath\",\n      value: function rewritePath(path, rootpath) {\n        var newPath;\n        rootpath = rootpath || '';\n        newPath = this.normalizePath(rootpath + path); // If a path was explicit relative and the rootpath was not an absolute path\n        // we must ensure that the new path is also explicit relative.\n\n        if (isPathLocalRelative(path) && isPathRelative(rootpath) && isPathLocalRelative(newPath) === false) {\n          newPath = \"./\".concat(newPath);\n        }\n\n        return newPath;\n      }\n    }, {\n      key: \"normalizePath\",\n      value: function normalizePath(path) {\n        var segments = path.split('/').reverse();\n        var segment;\n        path = [];\n\n        while (segments.length !== 0) {\n          segment = segments.pop();\n\n          switch (segment) {\n            case '.':\n              break;\n\n            case '..':\n              if (path.length === 0 || path[path.length - 1] === '..') {\n                path.push(segment);\n              } else {\n                path.pop();\n              }\n\n              break;\n\n            default:\n              path.push(segment);\n              break;\n          }\n        }\n\n        return path.join('/');\n      }\n    }]);\n\n    return _class;\n  }();\n\n  function makeRegistry(base) {\n    return {\n      _data: {},\n      add: function add(name, func) {\n        // precautionary case conversion, as later querying of\n        // the registry by function-caller uses lower case as well.\n        name = name.toLowerCase();\n\n        if (this._data.hasOwnProperty(name)) ;\n\n        this._data[name] = func;\n      },\n      addMultiple: function addMultiple(functions) {\n        var _this = this;\n\n        Object.keys(functions).forEach(function (name) {\n          _this.add(name, functions[name]);\n        });\n      },\n      get: function get(name) {\n        return this._data[name] || base && base.get(name);\n      },\n      getLocalFunctions: function getLocalFunctions() {\n        return this._data;\n      },\n      inherit: function inherit() {\n        return makeRegistry(this);\n      },\n      create: function create(base) {\n        return makeRegistry(base);\n      }\n    };\n  }\n\n  var functionRegistry = makeRegistry(null);\n\n  var defaultFunc = {\n    eval: function _eval() {\n      var v = this.value_;\n      var e = this.error_;\n\n      if (e) {\n        throw e;\n      }\n\n      if (v != null) {\n        return v ? Keyword.True : Keyword.False;\n      }\n    },\n    value: function value(v) {\n      this.value_ = v;\n    },\n    error: function error(e) {\n      this.error_ = e;\n    },\n    reset: function reset() {\n      this.value_ = this.error_ = null;\n    }\n  };\n\n  var Ruleset =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(Ruleset, _Node);\n\n    function Ruleset(selectors, rules, strictImports, visibilityInfo) {\n      var _this;\n\n      _classCallCheck(this, Ruleset);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Ruleset).call(this));\n      _this.selectors = selectors;\n      _this.rules = rules;\n      _this._lookups = {};\n      _this._variables = null;\n      _this._properties = null;\n      _this.strictImports = strictImports;\n\n      _this.copyVisibilityInfo(visibilityInfo);\n\n      _this.allowRoot = true;\n\n      _this.setParent(_this.selectors, _assertThisInitialized(_this));\n\n      _this.setParent(_this.rules, _assertThisInitialized(_this));\n\n      return _this;\n    }\n\n    _createClass(Ruleset, [{\n      key: \"isRulesetLike\",\n      value: function isRulesetLike() {\n        return true;\n      }\n    }, {\n      key: \"accept\",\n      value: function accept(visitor) {\n        if (this.paths) {\n          this.paths = visitor.visitArray(this.paths, true);\n        } else if (this.selectors) {\n          this.selectors = visitor.visitArray(this.selectors);\n        }\n\n        if (this.rules && this.rules.length) {\n          this.rules = visitor.visitArray(this.rules);\n        }\n      }\n    }, {\n      key: \"eval\",\n      value: function _eval(context) {\n        var selectors;\n        var selCnt;\n        var selector;\n        var i;\n        var hasVariable;\n        var hasOnePassingSelector = false;\n\n        if (this.selectors && (selCnt = this.selectors.length)) {\n          selectors = new Array(selCnt);\n          defaultFunc.error({\n            type: 'Syntax',\n            message: 'it is currently only allowed in parametric mixin guards,'\n          });\n\n          for (i = 0; i < selCnt; i++) {\n            selector = this.selectors[i].eval(context);\n\n            for (var j = 0; j < selector.elements.length; j++) {\n              if (selector.elements[j].isVariable) {\n                hasVariable = true;\n                break;\n              }\n            }\n\n            selectors[i] = selector;\n\n            if (selector.evaldCondition) {\n              hasOnePassingSelector = true;\n            }\n          }\n\n          if (hasVariable) {\n            var toParseSelectors = new Array(selCnt);\n\n            for (i = 0; i < selCnt; i++) {\n              selector = selectors[i];\n              toParseSelectors[i] = selector.toCSS(context);\n            }\n\n            this.parse.parseNode(toParseSelectors.join(','), [\"selectors\"], selectors[0].getIndex(), selectors[0].fileInfo(), function (err, result) {\n              if (result) {\n                selectors = flattenArray(result);\n              }\n            });\n          }\n\n          defaultFunc.reset();\n        } else {\n          hasOnePassingSelector = true;\n        }\n\n        var rules = this.rules ? copyArray(this.rules) : null;\n        var ruleset = new Ruleset(selectors, rules, this.strictImports, this.visibilityInfo());\n        var rule;\n        var subRule;\n        ruleset.originalRuleset = this;\n        ruleset.root = this.root;\n        ruleset.firstRoot = this.firstRoot;\n        ruleset.allowImports = this.allowImports;\n\n        if (this.debugInfo) {\n          ruleset.debugInfo = this.debugInfo;\n        }\n\n        if (!hasOnePassingSelector) {\n          rules.length = 0;\n        } // inherit a function registry from the frames stack when possible;\n        // otherwise from the global registry\n\n\n        ruleset.functionRegistry = function (frames) {\n          var i = 0;\n          var n = frames.length;\n          var found;\n\n          for (; i !== n; ++i) {\n            found = frames[i].functionRegistry;\n\n            if (found) {\n              return found;\n            }\n          }\n\n          return functionRegistry;\n        }(context.frames).inherit(); // push the current ruleset to the frames stack\n\n\n        var ctxFrames = context.frames;\n        ctxFrames.unshift(ruleset); // currrent selectors\n\n        var ctxSelectors = context.selectors;\n\n        if (!ctxSelectors) {\n          context.selectors = ctxSelectors = [];\n        }\n\n        ctxSelectors.unshift(this.selectors); // Evaluate imports\n\n        if (ruleset.root || ruleset.allowImports || !ruleset.strictImports) {\n          ruleset.evalImports(context);\n        } // Store the frames around mixin definitions,\n        // so they can be evaluated like closures when the time comes.\n\n\n        var rsRules = ruleset.rules;\n\n        for (i = 0; rule = rsRules[i]; i++) {\n          if (rule.evalFirst) {\n            rsRules[i] = rule.eval(context);\n          }\n        }\n\n        var mediaBlockCount = context.mediaBlocks && context.mediaBlocks.length || 0; // Evaluate mixin calls.\n\n        for (i = 0; rule = rsRules[i]; i++) {\n          if (rule.type === 'MixinCall') {\n            /* jshint loopfunc:true */\n            rules = rule.eval(context).filter(function (r) {\n              if (r instanceof Declaration && r.variable) {\n                // do not pollute the scope if the variable is\n                // already there. consider returning false here\n                // but we need a way to \"return\" variable from mixins\n                return !ruleset.variable(r.name);\n              }\n\n              return true;\n            });\n            rsRules.splice.apply(rsRules, _toConsumableArray([i, 1].concat(rules)));\n            i += rules.length - 1;\n            ruleset.resetCache();\n          } else if (rule.type === 'VariableCall') {\n            /* jshint loopfunc:true */\n            rules = rule.eval(context).rules.filter(function (r) {\n              if (r instanceof Declaration && r.variable) {\n                // do not pollute the scope at all\n                return false;\n              }\n\n              return true;\n            });\n            rsRules.splice.apply(rsRules, _toConsumableArray([i, 1].concat(rules)));\n            i += rules.length - 1;\n            ruleset.resetCache();\n          }\n        } // Evaluate everything else\n\n\n        for (i = 0; rule = rsRules[i]; i++) {\n          if (!rule.evalFirst) {\n            rsRules[i] = rule = rule.eval ? rule.eval(context) : rule;\n          }\n        } // Evaluate everything else\n\n\n        for (i = 0; rule = rsRules[i]; i++) {\n          // for rulesets, check if it is a css guard and can be removed\n          if (rule instanceof Ruleset && rule.selectors && rule.selectors.length === 1) {\n            // check if it can be folded in (e.g. & where)\n            if (rule.selectors[0] && rule.selectors[0].isJustParentSelector()) {\n              rsRules.splice(i--, 1);\n\n              for (var j = 0; subRule = rule.rules[j]; j++) {\n                if (subRule instanceof Node) {\n                  subRule.copyVisibilityInfo(rule.visibilityInfo());\n\n                  if (!(subRule instanceof Declaration) || !subRule.variable) {\n                    rsRules.splice(++i, 0, subRule);\n                  }\n                }\n              }\n            }\n          }\n        } // Pop the stack\n\n\n        ctxFrames.shift();\n        ctxSelectors.shift();\n\n        if (context.mediaBlocks) {\n          for (i = mediaBlockCount; i < context.mediaBlocks.length; i++) {\n            context.mediaBlocks[i].bubbleSelectors(selectors);\n          }\n        }\n\n        return ruleset;\n      }\n    }, {\n      key: \"evalImports\",\n      value: function evalImports(context) {\n        var rules = this.rules;\n        var i;\n        var importRules;\n\n        if (!rules) {\n          return;\n        }\n\n        for (i = 0; i < rules.length; i++) {\n          if (rules[i].type === 'Import') {\n            importRules = rules[i].eval(context);\n\n            if (importRules && (importRules.length || importRules.length === 0)) {\n              rules.splice.apply(rules, _toConsumableArray([i, 1].concat(importRules)));\n              i += importRules.length - 1;\n            } else {\n              rules.splice(i, 1, importRules);\n            }\n\n            this.resetCache();\n          }\n        }\n      }\n    }, {\n      key: \"makeImportant\",\n      value: function makeImportant() {\n        var result = new Ruleset(this.selectors, this.rules.map(function (r) {\n          if (r.makeImportant) {\n            return r.makeImportant();\n          } else {\n            return r;\n          }\n        }), this.strictImports, this.visibilityInfo());\n        return result;\n      }\n    }, {\n      key: \"matchArgs\",\n      value: function matchArgs(args) {\n        return !args || args.length === 0;\n      } // lets you call a css selector with a guard\n\n    }, {\n      key: \"matchCondition\",\n      value: function matchCondition(args, context) {\n        var lastSelector = this.selectors[this.selectors.length - 1];\n\n        if (!lastSelector.evaldCondition) {\n          return false;\n        }\n\n        if (lastSelector.condition && !lastSelector.condition.eval(new contexts.Eval(context, context.frames))) {\n          return false;\n        }\n\n        return true;\n      }\n    }, {\n      key: \"resetCache\",\n      value: function resetCache() {\n        this._rulesets = null;\n        this._variables = null;\n        this._properties = null;\n        this._lookups = {};\n      }\n    }, {\n      key: \"variables\",\n      value: function variables() {\n        if (!this._variables) {\n          this._variables = !this.rules ? {} : this.rules.reduce(function (hash, r) {\n            if (r instanceof Declaration && r.variable === true) {\n              hash[r.name] = r;\n            } // when evaluating variables in an import statement, imports have not been eval'd\n            // so we need to go inside import statements.\n            // guard against root being a string (in the case of inlined less)\n\n\n            if (r.type === 'Import' && r.root && r.root.variables) {\n              var vars = r.root.variables();\n\n              for (var name in vars) {\n                if (vars.hasOwnProperty(name)) {\n                  hash[name] = r.root.variable(name);\n                }\n              }\n            }\n\n            return hash;\n          }, {});\n        }\n\n        return this._variables;\n      }\n    }, {\n      key: \"properties\",\n      value: function properties() {\n        if (!this._properties) {\n          this._properties = !this.rules ? {} : this.rules.reduce(function (hash, r) {\n            if (r instanceof Declaration && r.variable !== true) {\n              var name = r.name.length === 1 && r.name[0] instanceof Keyword ? r.name[0].value : r.name; // Properties don't overwrite as they can merge\n\n              if (!hash[\"$\".concat(name)]) {\n                hash[\"$\".concat(name)] = [r];\n              } else {\n                hash[\"$\".concat(name)].push(r);\n              }\n            }\n\n            return hash;\n          }, {});\n        }\n\n        return this._properties;\n      }\n    }, {\n      key: \"variable\",\n      value: function variable(name) {\n        var decl = this.variables()[name];\n\n        if (decl) {\n          return this.parseValue(decl);\n        }\n      }\n    }, {\n      key: \"property\",\n      value: function property(name) {\n        var decl = this.properties()[name];\n\n        if (decl) {\n          return this.parseValue(decl);\n        }\n      }\n    }, {\n      key: \"lastDeclaration\",\n      value: function lastDeclaration() {\n        for (var i = this.rules.length; i > 0; i--) {\n          var decl = this.rules[i - 1];\n\n          if (decl instanceof Declaration) {\n            return this.parseValue(decl);\n          }\n        }\n      }\n    }, {\n      key: \"parseValue\",\n      value: function parseValue(toParse) {\n        var self = this;\n\n        function transformDeclaration(decl) {\n          if (decl.value instanceof Anonymous && !decl.parsed) {\n            if (typeof decl.value.value === 'string') {\n              this.parse.parseNode(decl.value.value, ['value', 'important'], decl.value.getIndex(), decl.fileInfo(), function (err, result) {\n                if (err) {\n                  decl.parsed = true;\n                }\n\n                if (result) {\n                  decl.value = result[0];\n                  decl.important = result[1] || '';\n                  decl.parsed = true;\n                }\n              });\n            } else {\n              decl.parsed = true;\n            }\n\n            return decl;\n          } else {\n            return decl;\n          }\n        }\n\n        if (!Array.isArray(toParse)) {\n          return transformDeclaration.call(self, toParse);\n        } else {\n          var nodes = [];\n          toParse.forEach(function (n) {\n            nodes.push(transformDeclaration.call(self, n));\n          });\n          return nodes;\n        }\n      }\n    }, {\n      key: \"rulesets\",\n      value: function rulesets() {\n        if (!this.rules) {\n          return [];\n        }\n\n        var filtRules = [];\n        var rules = this.rules;\n        var i;\n        var rule;\n\n        for (i = 0; rule = rules[i]; i++) {\n          if (rule.isRuleset) {\n            filtRules.push(rule);\n          }\n        }\n\n        return filtRules;\n      }\n    }, {\n      key: \"prependRule\",\n      value: function prependRule(rule) {\n        var rules = this.rules;\n\n        if (rules) {\n          rules.unshift(rule);\n        } else {\n          this.rules = [rule];\n        }\n\n        this.setParent(rule, this);\n      }\n    }, {\n      key: \"find\",\n      value: function find(selector) {\n        var self = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n        var filter = arguments.length > 2 ? arguments[2] : undefined;\n        var rules = [];\n        var match;\n        var foundMixins;\n        var key = selector.toCSS();\n\n        if (key in this._lookups) {\n          return this._lookups[key];\n        }\n\n        this.rulesets().forEach(function (rule) {\n          if (rule !== self) {\n            for (var j = 0; j < rule.selectors.length; j++) {\n              match = selector.match(rule.selectors[j]);\n\n              if (match) {\n                if (selector.elements.length > match) {\n                  if (!filter || filter(rule)) {\n                    foundMixins = rule.find(new Selector(selector.elements.slice(match)), self, filter);\n\n                    for (var i = 0; i < foundMixins.length; ++i) {\n                      foundMixins[i].path.push(rule);\n                    }\n\n                    Array.prototype.push.apply(rules, foundMixins);\n                  }\n                } else {\n                  rules.push({\n                    rule: rule,\n                    path: []\n                  });\n                }\n\n                break;\n              }\n            }\n          }\n        });\n        this._lookups[key] = rules;\n        return rules;\n      }\n    }, {\n      key: \"genCSS\",\n      value: function genCSS(context, output) {\n        var i;\n        var j;\n        var charsetRuleNodes = [];\n        var ruleNodes = [];\n        var // Line number debugging\n        debugInfo$1;\n        var rule;\n        var path;\n        context.tabLevel = context.tabLevel || 0;\n\n        if (!this.root) {\n          context.tabLevel++;\n        }\n\n        var tabRuleStr = context.compress ? '' : Array(context.tabLevel + 1).join('  ');\n        var tabSetStr = context.compress ? '' : Array(context.tabLevel).join('  ');\n        var sep;\n        var charsetNodeIndex = 0;\n        var importNodeIndex = 0;\n\n        for (i = 0; rule = this.rules[i]; i++) {\n          if (rule instanceof Comment) {\n            if (importNodeIndex === i) {\n              importNodeIndex++;\n            }\n\n            ruleNodes.push(rule);\n          } else if (rule.isCharset && rule.isCharset()) {\n            ruleNodes.splice(charsetNodeIndex, 0, rule);\n            charsetNodeIndex++;\n            importNodeIndex++;\n          } else if (rule.type === 'Import') {\n            ruleNodes.splice(importNodeIndex, 0, rule);\n            importNodeIndex++;\n          } else {\n            ruleNodes.push(rule);\n          }\n        }\n\n        ruleNodes = charsetRuleNodes.concat(ruleNodes); // If this is the root node, we don't render\n        // a selector, or {}.\n\n        if (!this.root) {\n          debugInfo$1 = debugInfo(context, this, tabSetStr);\n\n          if (debugInfo$1) {\n            output.add(debugInfo$1);\n            output.add(tabSetStr);\n          }\n\n          var paths = this.paths;\n          var pathCnt = paths.length;\n          var pathSubCnt;\n          sep = context.compress ? ',' : \",\\n\".concat(tabSetStr);\n\n          for (i = 0; i < pathCnt; i++) {\n            path = paths[i];\n\n            if (!(pathSubCnt = path.length)) {\n              continue;\n            }\n\n            if (i > 0) {\n              output.add(sep);\n            }\n\n            context.firstSelector = true;\n            path[0].genCSS(context, output);\n            context.firstSelector = false;\n\n            for (j = 1; j < pathSubCnt; j++) {\n              path[j].genCSS(context, output);\n            }\n          }\n\n          output.add((context.compress ? '{' : ' {\\n') + tabRuleStr);\n        } // Compile rules and rulesets\n\n\n        for (i = 0; rule = ruleNodes[i]; i++) {\n          if (i + 1 === ruleNodes.length) {\n            context.lastRule = true;\n          }\n\n          var currentLastRule = context.lastRule;\n\n          if (rule.isRulesetLike(rule)) {\n            context.lastRule = false;\n          }\n\n          if (rule.genCSS) {\n            rule.genCSS(context, output);\n          } else if (rule.value) {\n            output.add(rule.value.toString());\n          }\n\n          context.lastRule = currentLastRule;\n\n          if (!context.lastRule && rule.isVisible()) {\n            output.add(context.compress ? '' : \"\\n\".concat(tabRuleStr));\n          } else {\n            context.lastRule = false;\n          }\n        }\n\n        if (!this.root) {\n          output.add(context.compress ? '}' : \"\\n\".concat(tabSetStr, \"}\"));\n          context.tabLevel--;\n        }\n\n        if (!output.isEmpty() && !context.compress && this.firstRoot) {\n          output.add('\\n');\n        }\n      }\n    }, {\n      key: \"joinSelectors\",\n      value: function joinSelectors(paths, context, selectors) {\n        for (var s = 0; s < selectors.length; s++) {\n          this.joinSelector(paths, context, selectors[s]);\n        }\n      }\n    }, {\n      key: \"joinSelector\",\n      value: function joinSelector(paths, context, selector) {\n        function createParenthesis(elementsToPak, originalElement) {\n          var replacementParen;\n          var j;\n\n          if (elementsToPak.length === 0) {\n            replacementParen = new Paren(elementsToPak[0]);\n          } else {\n            var insideParent = new Array(elementsToPak.length);\n\n            for (j = 0; j < elementsToPak.length; j++) {\n              insideParent[j] = new Element(null, elementsToPak[j], originalElement.isVariable, originalElement._index, originalElement._fileInfo);\n            }\n\n            replacementParen = new Paren(new Selector(insideParent));\n          }\n\n          return replacementParen;\n        }\n\n        function createSelector(containedElement, originalElement) {\n          var element;\n          var selector;\n          element = new Element(null, containedElement, originalElement.isVariable, originalElement._index, originalElement._fileInfo);\n          selector = new Selector([element]);\n          return selector;\n        } // joins selector path from `beginningPath` with selector path in `addPath`\n        // `replacedElement` contains element that is being replaced by `addPath`\n        // returns concatenated path\n\n\n        function addReplacementIntoPath(beginningPath, addPath, replacedElement, originalSelector) {\n          var newSelectorPath;\n          var lastSelector;\n          var newJoinedSelector; // our new selector path\n\n          newSelectorPath = []; // construct the joined selector - if & is the first thing this will be empty,\n          // if not newJoinedSelector will be the last set of elements in the selector\n\n          if (beginningPath.length > 0) {\n            newSelectorPath = copyArray(beginningPath);\n            lastSelector = newSelectorPath.pop();\n            newJoinedSelector = originalSelector.createDerived(copyArray(lastSelector.elements));\n          } else {\n            newJoinedSelector = originalSelector.createDerived([]);\n          }\n\n          if (addPath.length > 0) {\n            // /deep/ is a CSS4 selector - (removed, so should deprecate)\n            // that is valid without anything in front of it\n            // so if the & does not have a combinator that is \"\" or \" \" then\n            // and there is a combinator on the parent, then grab that.\n            // this also allows + a { & .b { .a & { ... though not sure why you would want to do that\n            var combinator = replacedElement.combinator;\n            var parentEl = addPath[0].elements[0];\n\n            if (combinator.emptyOrWhitespace && !parentEl.combinator.emptyOrWhitespace) {\n              combinator = parentEl.combinator;\n            } // join the elements so far with the first part of the parent\n\n\n            newJoinedSelector.elements.push(new Element(combinator, parentEl.value, replacedElement.isVariable, replacedElement._index, replacedElement._fileInfo));\n            newJoinedSelector.elements = newJoinedSelector.elements.concat(addPath[0].elements.slice(1));\n          } // now add the joined selector - but only if it is not empty\n\n\n          if (newJoinedSelector.elements.length !== 0) {\n            newSelectorPath.push(newJoinedSelector);\n          } // put together the parent selectors after the join (e.g. the rest of the parent)\n\n\n          if (addPath.length > 1) {\n            var restOfPath = addPath.slice(1);\n            restOfPath = restOfPath.map(function (selector) {\n              return selector.createDerived(selector.elements, []);\n            });\n            newSelectorPath = newSelectorPath.concat(restOfPath);\n          }\n\n          return newSelectorPath;\n        } // joins selector path from `beginningPath` with every selector path in `addPaths` array\n        // `replacedElement` contains element that is being replaced by `addPath`\n        // returns array with all concatenated paths\n\n\n        function addAllReplacementsIntoPath(beginningPath, addPaths, replacedElement, originalSelector, result) {\n          var j;\n\n          for (j = 0; j < beginningPath.length; j++) {\n            var newSelectorPath = addReplacementIntoPath(beginningPath[j], addPaths, replacedElement, originalSelector);\n            result.push(newSelectorPath);\n          }\n\n          return result;\n        }\n\n        function mergeElementsOnToSelectors(elements, selectors) {\n          var i;\n          var sel;\n\n          if (elements.length === 0) {\n            return;\n          }\n\n          if (selectors.length === 0) {\n            selectors.push([new Selector(elements)]);\n            return;\n          }\n\n          for (i = 0; sel = selectors[i]; i++) {\n            // if the previous thing in sel is a parent this needs to join on to it\n            if (sel.length > 0) {\n              sel[sel.length - 1] = sel[sel.length - 1].createDerived(sel[sel.length - 1].elements.concat(elements));\n            } else {\n              sel.push(new Selector(elements));\n            }\n          }\n        } // replace all parent selectors inside `inSelector` by content of `context` array\n        // resulting selectors are returned inside `paths` array\n        // returns true if `inSelector` contained at least one parent selector\n\n\n        function replaceParentSelector(paths, context, inSelector) {\n          // The paths are [[Selector]]\n          // The first list is a list of comma separated selectors\n          // The inner list is a list of inheritance separated selectors\n          // e.g.\n          // .a, .b {\n          //   .c {\n          //   }\n          // }\n          // == [[.a] [.c]] [[.b] [.c]]\n          //\n          var i;\n          var j;\n          var k;\n          var currentElements;\n          var newSelectors;\n          var selectorsMultiplied;\n          var sel;\n          var el;\n          var hadParentSelector = false;\n          var length;\n          var lastSelector;\n\n          function findNestedSelector(element) {\n            var maybeSelector;\n\n            if (!(element.value instanceof Paren)) {\n              return null;\n            }\n\n            maybeSelector = element.value.value;\n\n            if (!(maybeSelector instanceof Selector)) {\n              return null;\n            }\n\n            return maybeSelector;\n          } // the elements from the current selector so far\n\n\n          currentElements = []; // the current list of new selectors to add to the path.\n          // We will build it up. We initiate it with one empty selector as we \"multiply\" the new selectors\n          // by the parents\n\n          newSelectors = [[]];\n\n          for (i = 0; el = inSelector.elements[i]; i++) {\n            // non parent reference elements just get added\n            if (el.value !== '&') {\n              var nestedSelector = findNestedSelector(el);\n\n              if (nestedSelector != null) {\n                // merge the current list of non parent selector elements\n                // on to the current list of selectors to add\n                mergeElementsOnToSelectors(currentElements, newSelectors);\n                var nestedPaths = [];\n                var replaced = void 0;\n                var replacedNewSelectors = [];\n                replaced = replaceParentSelector(nestedPaths, context, nestedSelector);\n                hadParentSelector = hadParentSelector || replaced; // the nestedPaths array should have only one member - replaceParentSelector does not multiply selectors\n\n                for (k = 0; k < nestedPaths.length; k++) {\n                  var replacementSelector = createSelector(createParenthesis(nestedPaths[k], el), el);\n                  addAllReplacementsIntoPath(newSelectors, [replacementSelector], el, inSelector, replacedNewSelectors);\n                }\n\n                newSelectors = replacedNewSelectors;\n                currentElements = [];\n              } else {\n                currentElements.push(el);\n              }\n            } else {\n              hadParentSelector = true; // the new list of selectors to add\n\n              selectorsMultiplied = []; // merge the current list of non parent selector elements\n              // on to the current list of selectors to add\n\n              mergeElementsOnToSelectors(currentElements, newSelectors); // loop through our current selectors\n\n              for (j = 0; j < newSelectors.length; j++) {\n                sel = newSelectors[j]; // if we don't have any parent paths, the & might be in a mixin so that it can be used\n                // whether there are parents or not\n\n                if (context.length === 0) {\n                  // the combinator used on el should now be applied to the next element instead so that\n                  // it is not lost\n                  if (sel.length > 0) {\n                    sel[0].elements.push(new Element(el.combinator, '', el.isVariable, el._index, el._fileInfo));\n                  }\n\n                  selectorsMultiplied.push(sel);\n                } else {\n                  // and the parent selectors\n                  for (k = 0; k < context.length; k++) {\n                    // We need to put the current selectors\n                    // then join the last selector's elements on to the parents selectors\n                    var newSelectorPath = addReplacementIntoPath(sel, context[k], el, inSelector); // add that to our new set of selectors\n\n                    selectorsMultiplied.push(newSelectorPath);\n                  }\n                }\n              } // our new selectors has been multiplied, so reset the state\n\n\n              newSelectors = selectorsMultiplied;\n              currentElements = [];\n            }\n          } // if we have any elements left over (e.g. .a& .b == .b)\n          // add them on to all the current selectors\n\n\n          mergeElementsOnToSelectors(currentElements, newSelectors);\n\n          for (i = 0; i < newSelectors.length; i++) {\n            length = newSelectors[i].length;\n\n            if (length > 0) {\n              paths.push(newSelectors[i]);\n              lastSelector = newSelectors[i][length - 1];\n              newSelectors[i][length - 1] = lastSelector.createDerived(lastSelector.elements, inSelector.extendList);\n            }\n          }\n\n          return hadParentSelector;\n        }\n\n        function deriveSelector(visibilityInfo, deriveFrom) {\n          var newSelector = deriveFrom.createDerived(deriveFrom.elements, deriveFrom.extendList, deriveFrom.evaldCondition);\n          newSelector.copyVisibilityInfo(visibilityInfo);\n          return newSelector;\n        } // joinSelector code follows\n\n\n        var i;\n        var newPaths;\n        var hadParentSelector;\n        newPaths = [];\n        hadParentSelector = replaceParentSelector(newPaths, context, selector);\n\n        if (!hadParentSelector) {\n          if (context.length > 0) {\n            newPaths = [];\n\n            for (i = 0; i < context.length; i++) {\n              var concatenated = context[i].map(deriveSelector.bind(this, selector.visibilityInfo()));\n              concatenated.push(selector);\n              newPaths.push(concatenated);\n            }\n          } else {\n            newPaths = [[selector]];\n          }\n        }\n\n        for (i = 0; i < newPaths.length; i++) {\n          paths.push(newPaths[i]);\n        }\n      }\n    }]);\n\n    return Ruleset;\n  }(Node);\n\n  Ruleset.prototype.type = 'Ruleset';\n  Ruleset.prototype.isRuleset = true;\n\n  var AtRule =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(AtRule, _Node);\n\n    function AtRule(name, value, rules, index, currentFileInfo, debugInfo, isRooted, visibilityInfo) {\n      var _this;\n\n      _classCallCheck(this, AtRule);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(AtRule).call(this));\n      var i;\n      _this.name = name;\n      _this.value = value instanceof Node ? value : value ? new Anonymous(value) : value;\n\n      if (rules) {\n        if (Array.isArray(rules)) {\n          _this.rules = rules;\n        } else {\n          _this.rules = [rules];\n          _this.rules[0].selectors = new Selector([], null, null, index, currentFileInfo).createEmptySelectors();\n        }\n\n        for (i = 0; i < _this.rules.length; i++) {\n          _this.rules[i].allowImports = true;\n        }\n\n        _this.setParent(_this.rules, _assertThisInitialized(_this));\n      }\n\n      _this._index = index;\n      _this._fileInfo = currentFileInfo;\n      _this.debugInfo = debugInfo;\n      _this.isRooted = isRooted || false;\n\n      _this.copyVisibilityInfo(visibilityInfo);\n\n      _this.allowRoot = true;\n      return _this;\n    }\n\n    _createClass(AtRule, [{\n      key: \"accept\",\n      value: function accept(visitor) {\n        var value = this.value;\n        var rules = this.rules;\n\n        if (rules) {\n          this.rules = visitor.visitArray(rules);\n        }\n\n        if (value) {\n          this.value = visitor.visit(value);\n        }\n      }\n    }, {\n      key: \"isRulesetLike\",\n      value: function isRulesetLike() {\n        return this.rules || !this.isCharset();\n      }\n    }, {\n      key: \"isCharset\",\n      value: function isCharset() {\n        return '@charset' === this.name;\n      }\n    }, {\n      key: \"genCSS\",\n      value: function genCSS(context, output) {\n        var value = this.value;\n        var rules = this.rules;\n        output.add(this.name, this.fileInfo(), this.getIndex());\n\n        if (value) {\n          output.add(' ');\n          value.genCSS(context, output);\n        }\n\n        if (rules) {\n          this.outputRuleset(context, output, rules);\n        } else {\n          output.add(';');\n        }\n      }\n    }, {\n      key: \"eval\",\n      value: function _eval(context) {\n        var mediaPathBackup;\n        var mediaBlocksBackup;\n        var value = this.value;\n        var rules = this.rules; // media stored inside other atrule should not bubble over it\n        // backpup media bubbling information\n\n        mediaPathBackup = context.mediaPath;\n        mediaBlocksBackup = context.mediaBlocks; // deleted media bubbling information\n\n        context.mediaPath = [];\n        context.mediaBlocks = [];\n\n        if (value) {\n          value = value.eval(context);\n        }\n\n        if (rules) {\n          // assuming that there is only one rule at this point - that is how parser constructs the rule\n          rules = [rules[0].eval(context)];\n          rules[0].root = true;\n        } // restore media bubbling information\n\n\n        context.mediaPath = mediaPathBackup;\n        context.mediaBlocks = mediaBlocksBackup;\n        return new AtRule(this.name, value, rules, this.getIndex(), this.fileInfo(), this.debugInfo, this.isRooted, this.visibilityInfo());\n      }\n    }, {\n      key: \"variable\",\n      value: function variable(name) {\n        if (this.rules) {\n          // assuming that there is only one rule at this point - that is how parser constructs the rule\n          return Ruleset.prototype.variable.call(this.rules[0], name);\n        }\n      }\n    }, {\n      key: \"find\",\n      value: function find() {\n        if (this.rules) {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          // assuming that there is only one rule at this point - that is how parser constructs the rule\n          return Ruleset.prototype.find.apply(this.rules[0], args);\n        }\n      }\n    }, {\n      key: \"rulesets\",\n      value: function rulesets() {\n        if (this.rules) {\n          // assuming that there is only one rule at this point - that is how parser constructs the rule\n          return Ruleset.prototype.rulesets.apply(this.rules[0]);\n        }\n      }\n    }, {\n      key: \"outputRuleset\",\n      value: function outputRuleset(context, output, rules) {\n        var ruleCnt = rules.length;\n        var i;\n        context.tabLevel = (context.tabLevel | 0) + 1; // Compressed\n\n        if (context.compress) {\n          output.add('{');\n\n          for (i = 0; i < ruleCnt; i++) {\n            rules[i].genCSS(context, output);\n          }\n\n          output.add('}');\n          context.tabLevel--;\n          return;\n        } // Non-compressed\n\n\n        var tabSetStr = \"\\n\".concat(Array(context.tabLevel).join('  '));\n        var tabRuleStr = \"\".concat(tabSetStr, \"  \");\n\n        if (!ruleCnt) {\n          output.add(\" {\".concat(tabSetStr, \"}\"));\n        } else {\n          output.add(\" {\".concat(tabRuleStr));\n          rules[0].genCSS(context, output);\n\n          for (i = 1; i < ruleCnt; i++) {\n            output.add(tabRuleStr);\n            rules[i].genCSS(context, output);\n          }\n\n          output.add(\"\".concat(tabSetStr, \"}\"));\n        }\n\n        context.tabLevel--;\n      }\n    }]);\n\n    return AtRule;\n  }(Node);\n\n  AtRule.prototype.type = 'AtRule';\n\n  var DetachedRuleset =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(DetachedRuleset, _Node);\n\n    function DetachedRuleset(ruleset, frames) {\n      var _this;\n\n      _classCallCheck(this, DetachedRuleset);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(DetachedRuleset).call(this));\n      _this.ruleset = ruleset;\n      _this.frames = frames;\n\n      _this.setParent(_this.ruleset, _assertThisInitialized(_this));\n\n      return _this;\n    }\n\n    _createClass(DetachedRuleset, [{\n      key: \"accept\",\n      value: function accept(visitor) {\n        this.ruleset = visitor.visit(this.ruleset);\n      }\n    }, {\n      key: \"eval\",\n      value: function _eval(context) {\n        var frames = this.frames || copyArray(context.frames);\n        return new DetachedRuleset(this.ruleset, frames);\n      }\n    }, {\n      key: \"callEval\",\n      value: function callEval(context) {\n        return this.ruleset.eval(this.frames ? new contexts.Eval(context, this.frames.concat(context.frames)) : context);\n      }\n    }]);\n\n    return DetachedRuleset;\n  }(Node);\n\n  DetachedRuleset.prototype.type = 'DetachedRuleset';\n  DetachedRuleset.prototype.evalFirst = true;\n\n  var Unit =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(Unit, _Node);\n\n    function Unit(numerator, denominator, backupUnit) {\n      var _this;\n\n      _classCallCheck(this, Unit);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Unit).call(this));\n      _this.numerator = numerator ? copyArray(numerator).sort() : [];\n      _this.denominator = denominator ? copyArray(denominator).sort() : [];\n\n      if (backupUnit) {\n        _this.backupUnit = backupUnit;\n      } else if (numerator && numerator.length) {\n        _this.backupUnit = numerator[0];\n      }\n\n      return _this;\n    }\n\n    _createClass(Unit, [{\n      key: \"clone\",\n      value: function clone() {\n        return new Unit(copyArray(this.numerator), copyArray(this.denominator), this.backupUnit);\n      }\n    }, {\n      key: \"genCSS\",\n      value: function genCSS(context, output) {\n        // Dimension checks the unit is singular and throws an error if in strict math mode.\n        var strictUnits = context && context.strictUnits;\n\n        if (this.numerator.length === 1) {\n          output.add(this.numerator[0]); // the ideal situation\n        } else if (!strictUnits && this.backupUnit) {\n          output.add(this.backupUnit);\n        } else if (!strictUnits && this.denominator.length) {\n          output.add(this.denominator[0]);\n        }\n      }\n    }, {\n      key: \"toString\",\n      value: function toString() {\n        var i;\n        var returnStr = this.numerator.join('*');\n\n        for (i = 0; i < this.denominator.length; i++) {\n          returnStr += \"/\".concat(this.denominator[i]);\n        }\n\n        return returnStr;\n      }\n    }, {\n      key: \"compare\",\n      value: function compare(other) {\n        return this.is(other.toString()) ? 0 : undefined;\n      }\n    }, {\n      key: \"is\",\n      value: function is(unitString) {\n        return this.toString().toUpperCase() === unitString.toUpperCase();\n      }\n    }, {\n      key: \"isLength\",\n      value: function isLength() {\n        return RegExp('^(px|em|ex|ch|rem|in|cm|mm|pc|pt|ex|vw|vh|vmin|vmax)$', 'gi').test(this.toCSS());\n      }\n    }, {\n      key: \"isEmpty\",\n      value: function isEmpty() {\n        return this.numerator.length === 0 && this.denominator.length === 0;\n      }\n    }, {\n      key: \"isSingular\",\n      value: function isSingular() {\n        return this.numerator.length <= 1 && this.denominator.length === 0;\n      }\n    }, {\n      key: \"map\",\n      value: function map(callback) {\n        var i;\n\n        for (i = 0; i < this.numerator.length; i++) {\n          this.numerator[i] = callback(this.numerator[i], false);\n        }\n\n        for (i = 0; i < this.denominator.length; i++) {\n          this.denominator[i] = callback(this.denominator[i], true);\n        }\n      }\n    }, {\n      key: \"usedUnits\",\n      value: function usedUnits() {\n        var group;\n        var result = {};\n        var mapUnit;\n        var groupName;\n\n        mapUnit = function mapUnit(atomicUnit) {\n          /* jshint loopfunc:true */\n          if (group.hasOwnProperty(atomicUnit) && !result[groupName]) {\n            result[groupName] = atomicUnit;\n          }\n\n          return atomicUnit;\n        };\n\n        for (groupName in unitConversions) {\n          if (unitConversions.hasOwnProperty(groupName)) {\n            group = unitConversions[groupName];\n            this.map(mapUnit);\n          }\n        }\n\n        return result;\n      }\n    }, {\n      key: \"cancel\",\n      value: function cancel() {\n        var counter = {};\n        var atomicUnit;\n        var i;\n\n        for (i = 0; i < this.numerator.length; i++) {\n          atomicUnit = this.numerator[i];\n          counter[atomicUnit] = (counter[atomicUnit] || 0) + 1;\n        }\n\n        for (i = 0; i < this.denominator.length; i++) {\n          atomicUnit = this.denominator[i];\n          counter[atomicUnit] = (counter[atomicUnit] || 0) - 1;\n        }\n\n        this.numerator = [];\n        this.denominator = [];\n\n        for (atomicUnit in counter) {\n          if (counter.hasOwnProperty(atomicUnit)) {\n            var count = counter[atomicUnit];\n\n            if (count > 0) {\n              for (i = 0; i < count; i++) {\n                this.numerator.push(atomicUnit);\n              }\n            } else if (count < 0) {\n              for (i = 0; i < -count; i++) {\n                this.denominator.push(atomicUnit);\n              }\n            }\n          }\n        }\n\n        this.numerator.sort();\n        this.denominator.sort();\n      }\n    }]);\n\n    return Unit;\n  }(Node);\n\n  Unit.prototype.type = 'Unit';\n\n  // A number with a unit\n  //\n\n  var Dimension =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(Dimension, _Node);\n\n    function Dimension(value, unit) {\n      var _this;\n\n      _classCallCheck(this, Dimension);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Dimension).call(this));\n      _this.value = parseFloat(value);\n\n      if (isNaN(_this.value)) {\n        throw new Error('Dimension is not a number.');\n      }\n\n      _this.unit = unit && unit instanceof Unit ? unit : new Unit(unit ? [unit] : undefined);\n\n      _this.setParent(_this.unit, _assertThisInitialized(_this));\n\n      return _this;\n    }\n\n    _createClass(Dimension, [{\n      key: \"accept\",\n      value: function accept(visitor) {\n        this.unit = visitor.visit(this.unit);\n      }\n    }, {\n      key: \"eval\",\n      value: function _eval(context) {\n        return this;\n      }\n    }, {\n      key: \"toColor\",\n      value: function toColor() {\n        return new Color([this.value, this.value, this.value]);\n      }\n    }, {\n      key: \"genCSS\",\n      value: function genCSS(context, output) {\n        if (context && context.strictUnits && !this.unit.isSingular()) {\n          throw new Error(\"Multiple units in dimension. Correct the units or use the unit function. Bad unit: \".concat(this.unit.toString()));\n        }\n\n        var value = this.fround(context, this.value);\n        var strValue = String(value);\n\n        if (value !== 0 && value < 0.000001 && value > -0.000001) {\n          // would be output 1e-6 etc.\n          strValue = value.toFixed(20).replace(/0+$/, '');\n        }\n\n        if (context && context.compress) {\n          // Zero values doesn't need a unit\n          if (value === 0 && this.unit.isLength()) {\n            output.add(strValue);\n            return;\n          } // Float values doesn't need a leading zero\n\n\n          if (value > 0 && value < 1) {\n            strValue = strValue.substr(1);\n          }\n        }\n\n        output.add(strValue);\n        this.unit.genCSS(context, output);\n      } // In an operation between two Dimensions,\n      // we default to the first Dimension's unit,\n      // so `1px + 2` will yield `3px`.\n\n    }, {\n      key: \"operate\",\n      value: function operate(context, op, other) {\n        /* jshint noempty:false */\n        var value = this._operate(context, op, this.value, other.value);\n\n        var unit = this.unit.clone();\n\n        if (op === '+' || op === '-') {\n          if (unit.numerator.length === 0 && unit.denominator.length === 0) {\n            unit = other.unit.clone();\n\n            if (this.unit.backupUnit) {\n              unit.backupUnit = this.unit.backupUnit;\n            }\n          } else if (other.unit.numerator.length === 0 && unit.denominator.length === 0) ; else {\n            other = other.convertTo(this.unit.usedUnits());\n\n            if (context.strictUnits && other.unit.toString() !== unit.toString()) {\n              throw new Error(\"Incompatible units. Change the units or use the unit function. \" + \"Bad units: '\".concat(unit.toString(), \"' and '\").concat(other.unit.toString(), \"'.\"));\n            }\n\n            value = this._operate(context, op, this.value, other.value);\n          }\n        } else if (op === '*') {\n          unit.numerator = unit.numerator.concat(other.unit.numerator).sort();\n          unit.denominator = unit.denominator.concat(other.unit.denominator).sort();\n          unit.cancel();\n        } else if (op === '/') {\n          unit.numerator = unit.numerator.concat(other.unit.denominator).sort();\n          unit.denominator = unit.denominator.concat(other.unit.numerator).sort();\n          unit.cancel();\n        }\n\n        return new Dimension(value, unit);\n      }\n    }, {\n      key: \"compare\",\n      value: function compare(other) {\n        var a;\n        var b;\n\n        if (!(other instanceof Dimension)) {\n          return undefined;\n        }\n\n        if (this.unit.isEmpty() || other.unit.isEmpty()) {\n          a = this;\n          b = other;\n        } else {\n          a = this.unify();\n          b = other.unify();\n\n          if (a.unit.compare(b.unit) !== 0) {\n            return undefined;\n          }\n        }\n\n        return Node.numericCompare(a.value, b.value);\n      }\n    }, {\n      key: \"unify\",\n      value: function unify() {\n        return this.convertTo({\n          length: 'px',\n          duration: 's',\n          angle: 'rad'\n        });\n      }\n    }, {\n      key: \"convertTo\",\n      value: function convertTo(conversions) {\n        var value = this.value;\n        var unit = this.unit.clone();\n        var i;\n        var groupName;\n        var group;\n        var targetUnit;\n        var derivedConversions = {};\n        var applyUnit;\n\n        if (typeof conversions === 'string') {\n          for (i in unitConversions) {\n            if (unitConversions[i].hasOwnProperty(conversions)) {\n              derivedConversions = {};\n              derivedConversions[i] = conversions;\n            }\n          }\n\n          conversions = derivedConversions;\n        }\n\n        applyUnit = function applyUnit(atomicUnit, denominator) {\n          /* jshint loopfunc:true */\n          if (group.hasOwnProperty(atomicUnit)) {\n            if (denominator) {\n              value = value / (group[atomicUnit] / group[targetUnit]);\n            } else {\n              value = value * (group[atomicUnit] / group[targetUnit]);\n            }\n\n            return targetUnit;\n          }\n\n          return atomicUnit;\n        };\n\n        for (groupName in conversions) {\n          if (conversions.hasOwnProperty(groupName)) {\n            targetUnit = conversions[groupName];\n            group = unitConversions[groupName];\n            unit.map(applyUnit);\n          }\n        }\n\n        unit.cancel();\n        return new Dimension(value, unit);\n      }\n    }]);\n\n    return Dimension;\n  }(Node);\n\n  Dimension.prototype.type = 'Dimension';\n\n  var MATH$1 = Math$1;\n\n  var Operation =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(Operation, _Node);\n\n    function Operation(op, operands, isSpaced) {\n      var _this;\n\n      _classCallCheck(this, Operation);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Operation).call(this));\n      _this.op = op.trim();\n      _this.operands = operands;\n      _this.isSpaced = isSpaced;\n      return _this;\n    }\n\n    _createClass(Operation, [{\n      key: \"accept\",\n      value: function accept(visitor) {\n        this.operands = visitor.visitArray(this.operands);\n      }\n    }, {\n      key: \"eval\",\n      value: function _eval(context) {\n        var a = this.operands[0].eval(context);\n        var b = this.operands[1].eval(context);\n        var op;\n\n        if (context.isMathOn(this.op)) {\n          op = this.op === './' ? '/' : this.op;\n\n          if (a instanceof Dimension && b instanceof Color) {\n            a = a.toColor();\n          }\n\n          if (b instanceof Dimension && a instanceof Color) {\n            b = b.toColor();\n          }\n\n          if (!a.operate) {\n            if (a instanceof Operation && a.op === '/' && context.math === MATH$1.PARENS_DIVISION) {\n              return new Operation(this.op, [a, b], this.isSpaced);\n            }\n\n            throw {\n              type: 'Operation',\n              message: 'Operation on an invalid type'\n            };\n          }\n\n          return a.operate(context, op, b);\n        } else {\n          return new Operation(this.op, [a, b], this.isSpaced);\n        }\n      }\n    }, {\n      key: \"genCSS\",\n      value: function genCSS(context, output) {\n        this.operands[0].genCSS(context, output);\n\n        if (this.isSpaced) {\n          output.add(' ');\n        }\n\n        output.add(this.op);\n\n        if (this.isSpaced) {\n          output.add(' ');\n        }\n\n        this.operands[1].genCSS(context, output);\n      }\n    }]);\n\n    return Operation;\n  }(Node);\n\n  Operation.prototype.type = 'Operation';\n\n  var MATH$2 = Math$1;\n\n  var Expression =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(Expression, _Node);\n\n    function Expression(value, noSpacing) {\n      var _this;\n\n      _classCallCheck(this, Expression);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Expression).call(this));\n      _this.value = value;\n      _this.noSpacing = noSpacing;\n\n      if (!value) {\n        throw new Error('Expression requires an array parameter');\n      }\n\n      return _this;\n    }\n\n    _createClass(Expression, [{\n      key: \"accept\",\n      value: function accept(visitor) {\n        this.value = visitor.visitArray(this.value);\n      }\n    }, {\n      key: \"eval\",\n      value: function _eval(context) {\n        var returnValue;\n        var mathOn = context.isMathOn();\n        var inParenthesis = this.parens && (context.math !== MATH$2.STRICT_LEGACY || !this.parensInOp);\n        var doubleParen = false;\n\n        if (inParenthesis) {\n          context.inParenthesis();\n        }\n\n        if (this.value.length > 1) {\n          returnValue = new Expression(this.value.map(function (e) {\n            if (!e.eval) {\n              return e;\n            }\n\n            return e.eval(context);\n          }), this.noSpacing);\n        } else if (this.value.length === 1) {\n          if (this.value[0].parens && !this.value[0].parensInOp && !context.inCalc) {\n            doubleParen = true;\n          }\n\n          returnValue = this.value[0].eval(context);\n        } else {\n          returnValue = this;\n        }\n\n        if (inParenthesis) {\n          context.outOfParenthesis();\n        }\n\n        if (this.parens && this.parensInOp && !mathOn && !doubleParen && !(returnValue instanceof Dimension)) {\n          returnValue = new Paren(returnValue);\n        }\n\n        return returnValue;\n      }\n    }, {\n      key: \"genCSS\",\n      value: function genCSS(context, output) {\n        for (var i = 0; i < this.value.length; i++) {\n          this.value[i].genCSS(context, output);\n\n          if (!this.noSpacing && i + 1 < this.value.length) {\n            output.add(' ');\n          }\n        }\n      }\n    }, {\n      key: \"throwAwayComments\",\n      value: function throwAwayComments() {\n        this.value = this.value.filter(function (v) {\n          return !(v instanceof Comment);\n        });\n      }\n    }]);\n\n    return Expression;\n  }(Node);\n\n  Expression.prototype.type = 'Expression';\n\n  var functionCaller =\n  /*#__PURE__*/\n  function () {\n    function functionCaller(name, context, index, currentFileInfo) {\n      _classCallCheck(this, functionCaller);\n\n      this.name = name.toLowerCase();\n      this.index = index;\n      this.context = context;\n      this.currentFileInfo = currentFileInfo;\n      this.func = context.frames[0].functionRegistry.get(this.name);\n    }\n\n    _createClass(functionCaller, [{\n      key: \"isValid\",\n      value: function isValid() {\n        return Boolean(this.func);\n      }\n    }, {\n      key: \"call\",\n      value: function call(args) {\n        // This code is terrible and should be replaced as per this issue...\n        // https://github.com/less/less.js/issues/2477\n        if (Array.isArray(args)) {\n          args = args.filter(function (item) {\n            if (item.type === 'Comment') {\n              return false;\n            }\n\n            return true;\n          }).map(function (item) {\n            if (item.type === 'Expression') {\n              var subNodes = item.value.filter(function (item) {\n                if (item.type === 'Comment') {\n                  return false;\n                }\n\n                return true;\n              });\n\n              if (subNodes.length === 1) {\n                return subNodes[0];\n              } else {\n                return new Expression(subNodes);\n              }\n            }\n\n            return item;\n          });\n        }\n\n        return this.func.apply(this, _toConsumableArray(args));\n      }\n    }]);\n\n    return functionCaller;\n  }();\n\n  // A function call node.\n  //\n\n  var Call =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(Call, _Node);\n\n    function Call(name, args, index, currentFileInfo) {\n      var _this;\n\n      _classCallCheck(this, Call);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Call).call(this));\n      _this.name = name;\n      _this.args = args;\n      _this.calc = name === 'calc';\n      _this._index = index;\n      _this._fileInfo = currentFileInfo;\n      return _this;\n    }\n\n    _createClass(Call, [{\n      key: \"accept\",\n      value: function accept(visitor) {\n        if (this.args) {\n          this.args = visitor.visitArray(this.args);\n        }\n      } //\n      // When evaluating a function call,\n      // we either find the function in the functionRegistry,\n      // in which case we call it, passing the  evaluated arguments,\n      // if this returns null or we cannot find the function, we\n      // simply print it out as it appeared originally [2].\n      //\n      // The reason why we evaluate the arguments, is in the case where\n      // we try to pass a variable to a function, like: `saturate(@color)`.\n      // The function should receive the value, not the variable.\n      //\n\n    }, {\n      key: \"eval\",\n      value: function _eval(context) {\n        /**\n         * Turn off math for calc(), and switch back on for evaluating nested functions\n         */\n        var currentMathContext = context.mathOn;\n        context.mathOn = !this.calc;\n\n        if (this.calc || context.inCalc) {\n          context.enterCalc();\n        }\n\n        var args = this.args.map(function (a) {\n          return a.eval(context);\n        });\n\n        if (this.calc || context.inCalc) {\n          context.exitCalc();\n        }\n\n        context.mathOn = currentMathContext;\n        var result;\n        var funcCaller = new functionCaller(this.name, context, this.getIndex(), this.fileInfo());\n\n        if (funcCaller.isValid()) {\n          try {\n            result = funcCaller.call(args);\n          } catch (e) {\n            throw {\n              type: e.type || 'Runtime',\n              message: \"error evaluating function `\".concat(this.name, \"`\").concat(e.message ? \": \".concat(e.message) : ''),\n              index: this.getIndex(),\n              filename: this.fileInfo().filename,\n              line: e.lineNumber,\n              column: e.columnNumber\n            };\n          }\n\n          if (result !== null && result !== undefined) {\n            // Results that that are not nodes are cast as Anonymous nodes\n            // Falsy values or booleans are returned as empty nodes\n            if (!(result instanceof Node)) {\n              if (!result || result === true) {\n                result = new Anonymous(null);\n              } else {\n                result = new Anonymous(result.toString());\n              }\n            }\n\n            result._index = this._index;\n            result._fileInfo = this._fileInfo;\n            return result;\n          }\n        }\n\n        return new Call(this.name, args, this.getIndex(), this.fileInfo());\n      }\n    }, {\n      key: \"genCSS\",\n      value: function genCSS(context, output) {\n        output.add(\"\".concat(this.name, \"(\"), this.fileInfo(), this.getIndex());\n\n        for (var i = 0; i < this.args.length; i++) {\n          this.args[i].genCSS(context, output);\n\n          if (i + 1 < this.args.length) {\n            output.add(', ');\n          }\n        }\n\n        output.add(')');\n      }\n    }]);\n\n    return Call;\n  }(Node);\n\n  Call.prototype.type = 'Call';\n\n  var Variable =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(Variable, _Node);\n\n    function Variable(name, index, currentFileInfo) {\n      var _this;\n\n      _classCallCheck(this, Variable);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Variable).call(this));\n      _this.name = name;\n      _this._index = index;\n      _this._fileInfo = currentFileInfo;\n      return _this;\n    }\n\n    _createClass(Variable, [{\n      key: \"eval\",\n      value: function _eval(context) {\n        var variable;\n        var name = this.name;\n\n        if (name.indexOf('@@') === 0) {\n          name = \"@\".concat(new Variable(name.slice(1), this.getIndex(), this.fileInfo()).eval(context).value);\n        }\n\n        if (this.evaluating) {\n          throw {\n            type: 'Name',\n            message: \"Recursive variable definition for \".concat(name),\n            filename: this.fileInfo().filename,\n            index: this.getIndex()\n          };\n        }\n\n        this.evaluating = true;\n        variable = this.find(context.frames, function (frame) {\n          var v = frame.variable(name);\n\n          if (v) {\n            if (v.important) {\n              var importantScope = context.importantScope[context.importantScope.length - 1];\n              importantScope.important = v.important;\n            } // If in calc, wrap vars in a function call to cascade evaluate args first\n\n\n            if (context.inCalc) {\n              return new Call('_SELF', [v.value]).eval(context);\n            } else {\n              return v.value.eval(context);\n            }\n          }\n        });\n\n        if (variable) {\n          this.evaluating = false;\n          return variable;\n        } else {\n          throw {\n            type: 'Name',\n            message: \"variable \".concat(name, \" is undefined\"),\n            filename: this.fileInfo().filename,\n            index: this.getIndex()\n          };\n        }\n      }\n    }, {\n      key: \"find\",\n      value: function find(obj, fun) {\n        for (var i = 0, r; i < obj.length; i++) {\n          r = fun.call(obj, obj[i]);\n\n          if (r) {\n            return r;\n          }\n        }\n\n        return null;\n      }\n    }]);\n\n    return Variable;\n  }(Node);\n\n  Variable.prototype.type = 'Variable';\n\n  var Property =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(Property, _Node);\n\n    function Property(name, index, currentFileInfo) {\n      var _this;\n\n      _classCallCheck(this, Property);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Property).call(this));\n      _this.name = name;\n      _this._index = index;\n      _this._fileInfo = currentFileInfo;\n      return _this;\n    }\n\n    _createClass(Property, [{\n      key: \"eval\",\n      value: function _eval(context) {\n        var property;\n        var name = this.name; // TODO: shorten this reference\n\n        var mergeRules = context.pluginManager.less.visitors.ToCSSVisitor.prototype._mergeRules;\n\n        if (this.evaluating) {\n          throw {\n            type: 'Name',\n            message: \"Recursive property reference for \".concat(name),\n            filename: this.fileInfo().filename,\n            index: this.getIndex()\n          };\n        }\n\n        this.evaluating = true;\n        property = this.find(context.frames, function (frame) {\n          var v;\n          var vArr = frame.property(name);\n\n          if (vArr) {\n            for (var i = 0; i < vArr.length; i++) {\n              v = vArr[i];\n              vArr[i] = new Declaration(v.name, v.value, v.important, v.merge, v.index, v.currentFileInfo, v.inline, v.variable);\n            }\n\n            mergeRules(vArr);\n            v = vArr[vArr.length - 1];\n\n            if (v.important) {\n              var importantScope = context.importantScope[context.importantScope.length - 1];\n              importantScope.important = v.important;\n            }\n\n            v = v.value.eval(context);\n            return v;\n          }\n        });\n\n        if (property) {\n          this.evaluating = false;\n          return property;\n        } else {\n          throw {\n            type: 'Name',\n            message: \"Property '\".concat(name, \"' is undefined\"),\n            filename: this.currentFileInfo.filename,\n            index: this.index\n          };\n        }\n      }\n    }, {\n      key: \"find\",\n      value: function find(obj, fun) {\n        for (var i = 0, r; i < obj.length; i++) {\n          r = fun.call(obj, obj[i]);\n\n          if (r) {\n            return r;\n          }\n        }\n\n        return null;\n      }\n    }]);\n\n    return Property;\n  }(Node);\n\n  Property.prototype.type = 'Property';\n\n  var Attribute =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(Attribute, _Node);\n\n    function Attribute(key, op, value) {\n      var _this;\n\n      _classCallCheck(this, Attribute);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Attribute).call(this));\n      _this.key = key;\n      _this.op = op;\n      _this.value = value;\n      return _this;\n    }\n\n    _createClass(Attribute, [{\n      key: \"eval\",\n      value: function _eval(context) {\n        return new Attribute(this.key.eval ? this.key.eval(context) : this.key, this.op, this.value && this.value.eval ? this.value.eval(context) : this.value);\n      }\n    }, {\n      key: \"genCSS\",\n      value: function genCSS(context, output) {\n        output.add(this.toCSS(context));\n      }\n    }, {\n      key: \"toCSS\",\n      value: function toCSS(context) {\n        var value = this.key.toCSS ? this.key.toCSS(context) : this.key;\n\n        if (this.op) {\n          value += this.op;\n          value += this.value.toCSS ? this.value.toCSS(context) : this.value;\n        }\n\n        return \"[\".concat(value, \"]\");\n      }\n    }]);\n\n    return Attribute;\n  }(Node);\n\n  Attribute.prototype.type = 'Attribute';\n\n  var Quoted =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(Quoted, _Node);\n\n    function Quoted(str, content, escaped, index, currentFileInfo) {\n      var _this;\n\n      _classCallCheck(this, Quoted);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Quoted).call(this));\n      _this.escaped = escaped == null ? true : escaped;\n      _this.value = content || '';\n      _this.quote = str.charAt(0);\n      _this._index = index;\n      _this._fileInfo = currentFileInfo;\n      _this.variableRegex = /@\\{([\\w-]+)\\}/g;\n      _this.propRegex = /\\$\\{([\\w-]+)\\}/g;\n      _this.allowRoot = escaped;\n      return _this;\n    }\n\n    _createClass(Quoted, [{\n      key: \"genCSS\",\n      value: function genCSS(context, output) {\n        if (!this.escaped) {\n          output.add(this.quote, this.fileInfo(), this.getIndex());\n        }\n\n        output.add(this.value);\n\n        if (!this.escaped) {\n          output.add(this.quote);\n        }\n      }\n    }, {\n      key: \"containsVariables\",\n      value: function containsVariables() {\n        return this.value.match(this.variableRegex);\n      }\n    }, {\n      key: \"eval\",\n      value: function _eval(context) {\n        var that = this;\n        var value = this.value;\n\n        var variableReplacement = function variableReplacement(_, name) {\n          var v = new Variable(\"@\".concat(name), that.getIndex(), that.fileInfo()).eval(context, true);\n          return v instanceof Quoted ? v.value : v.toCSS();\n        };\n\n        var propertyReplacement = function propertyReplacement(_, name) {\n          var v = new Property(\"$\".concat(name), that.getIndex(), that.fileInfo()).eval(context, true);\n          return v instanceof Quoted ? v.value : v.toCSS();\n        };\n\n        function iterativeReplace(value, regexp, replacementFnc) {\n          var evaluatedValue = value;\n\n          do {\n            value = evaluatedValue.toString();\n            evaluatedValue = value.replace(regexp, replacementFnc);\n          } while (value !== evaluatedValue);\n\n          return evaluatedValue;\n        }\n\n        value = iterativeReplace(value, this.variableRegex, variableReplacement);\n        value = iterativeReplace(value, this.propRegex, propertyReplacement);\n        return new Quoted(this.quote + value + this.quote, value, this.escaped, this.getIndex(), this.fileInfo());\n      }\n    }, {\n      key: \"compare\",\n      value: function compare(other) {\n        // when comparing quoted strings allow the quote to differ\n        if (other.type === 'Quoted' && !this.escaped && !other.escaped) {\n          return Node.numericCompare(this.value, other.value);\n        } else {\n          return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;\n        }\n      }\n    }]);\n\n    return Quoted;\n  }(Node);\n\n  Quoted.prototype.type = 'Quoted';\n\n  var URL =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(URL, _Node);\n\n    function URL(val, index, currentFileInfo, isEvald) {\n      var _this;\n\n      _classCallCheck(this, URL);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(URL).call(this));\n      _this.value = val;\n      _this._index = index;\n      _this._fileInfo = currentFileInfo;\n      _this.isEvald = isEvald;\n      return _this;\n    }\n\n    _createClass(URL, [{\n      key: \"accept\",\n      value: function accept(visitor) {\n        this.value = visitor.visit(this.value);\n      }\n    }, {\n      key: \"genCSS\",\n      value: function genCSS(context, output) {\n        output.add('url(');\n        this.value.genCSS(context, output);\n        output.add(')');\n      }\n    }, {\n      key: \"eval\",\n      value: function _eval(context) {\n        var val = this.value.eval(context);\n        var rootpath;\n\n        if (!this.isEvald) {\n          // Add the rootpath if the URL requires a rewrite\n          rootpath = this.fileInfo() && this.fileInfo().rootpath;\n\n          if (typeof rootpath === 'string' && typeof val.value === 'string' && context.pathRequiresRewrite(val.value)) {\n            if (!val.quote) {\n              rootpath = escapePath(rootpath);\n            }\n\n            val.value = context.rewritePath(val.value, rootpath);\n          } else {\n            val.value = context.normalizePath(val.value);\n          } // Add url args if enabled\n\n\n          if (context.urlArgs) {\n            if (!val.value.match(/^\\s*data:/)) {\n              var delimiter = val.value.indexOf('?') === -1 ? '?' : '&';\n              var urlArgs = delimiter + context.urlArgs;\n\n              if (val.value.indexOf('#') !== -1) {\n                val.value = val.value.replace('#', \"\".concat(urlArgs, \"#\"));\n              } else {\n                val.value += urlArgs;\n              }\n            }\n          }\n        }\n\n        return new URL(val, this.getIndex(), this.fileInfo(), true);\n      }\n    }]);\n\n    return URL;\n  }(Node);\n\n  URL.prototype.type = 'Url';\n\n  function escapePath(path) {\n    return path.replace(/[\\(\\)'\"\\s]/g, function (match) {\n      return \"\\\\\".concat(match);\n    });\n  }\n\n  var Media =\n  /*#__PURE__*/\n  function (_AtRule) {\n    _inherits(Media, _AtRule);\n\n    function Media(value, features, index, currentFileInfo, visibilityInfo) {\n      var _this;\n\n      _classCallCheck(this, Media);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Media).call(this));\n      _this._index = index;\n      _this._fileInfo = currentFileInfo;\n      var selectors = new Selector([], null, null, _this._index, _this._fileInfo).createEmptySelectors();\n      _this.features = new Value(features);\n      _this.rules = [new Ruleset(selectors, value)];\n      _this.rules[0].allowImports = true;\n\n      _this.copyVisibilityInfo(visibilityInfo);\n\n      _this.allowRoot = true;\n\n      _this.setParent(selectors, _assertThisInitialized(_this));\n\n      _this.setParent(_this.features, _assertThisInitialized(_this));\n\n      _this.setParent(_this.rules, _assertThisInitialized(_this));\n\n      return _this;\n    }\n\n    _createClass(Media, [{\n      key: \"isRulesetLike\",\n      value: function isRulesetLike() {\n        return true;\n      }\n    }, {\n      key: \"accept\",\n      value: function accept(visitor) {\n        if (this.features) {\n          this.features = visitor.visit(this.features);\n        }\n\n        if (this.rules) {\n          this.rules = visitor.visitArray(this.rules);\n        }\n      }\n    }, {\n      key: \"genCSS\",\n      value: function genCSS(context, output) {\n        output.add('@media ', this._fileInfo, this._index);\n        this.features.genCSS(context, output);\n        this.outputRuleset(context, output, this.rules);\n      }\n    }, {\n      key: \"eval\",\n      value: function _eval(context) {\n        if (!context.mediaBlocks) {\n          context.mediaBlocks = [];\n          context.mediaPath = [];\n        }\n\n        var media = new Media(null, [], this._index, this._fileInfo, this.visibilityInfo());\n\n        if (this.debugInfo) {\n          this.rules[0].debugInfo = this.debugInfo;\n          media.debugInfo = this.debugInfo;\n        }\n\n        media.features = this.features.eval(context);\n        context.mediaPath.push(media);\n        context.mediaBlocks.push(media);\n        this.rules[0].functionRegistry = context.frames[0].functionRegistry.inherit();\n        context.frames.unshift(this.rules[0]);\n        media.rules = [this.rules[0].eval(context)];\n        context.frames.shift();\n        context.mediaPath.pop();\n        return context.mediaPath.length === 0 ? media.evalTop(context) : media.evalNested(context);\n      }\n    }, {\n      key: \"evalTop\",\n      value: function evalTop(context) {\n        var result = this; // Render all dependent Media blocks.\n\n        if (context.mediaBlocks.length > 1) {\n          var selectors = new Selector([], null, null, this.getIndex(), this.fileInfo()).createEmptySelectors();\n          result = new Ruleset(selectors, context.mediaBlocks);\n          result.multiMedia = true;\n          result.copyVisibilityInfo(this.visibilityInfo());\n          this.setParent(result, this);\n        }\n\n        delete context.mediaBlocks;\n        delete context.mediaPath;\n        return result;\n      }\n    }, {\n      key: \"evalNested\",\n      value: function evalNested(context) {\n        var i;\n        var value;\n        var path = context.mediaPath.concat([this]); // Extract the media-query conditions separated with `,` (OR).\n\n        for (i = 0; i < path.length; i++) {\n          value = path[i].features instanceof Value ? path[i].features.value : path[i].features;\n          path[i] = Array.isArray(value) ? value : [value];\n        } // Trace all permutations to generate the resulting media-query.\n        //\n        // (a, b and c) with nested (d, e) ->\n        //    a and d\n        //    a and e\n        //    b and c and d\n        //    b and c and e\n\n\n        this.features = new Value(this.permute(path).map(function (path) {\n          path = path.map(function (fragment) {\n            return fragment.toCSS ? fragment : new Anonymous(fragment);\n          });\n\n          for (i = path.length - 1; i > 0; i--) {\n            path.splice(i, 0, new Anonymous('and'));\n          }\n\n          return new Expression(path);\n        }));\n        this.setParent(this.features, this); // Fake a tree-node that doesn't output anything.\n\n        return new Ruleset([], []);\n      }\n    }, {\n      key: \"permute\",\n      value: function permute(arr) {\n        if (arr.length === 0) {\n          return [];\n        } else if (arr.length === 1) {\n          return arr[0];\n        } else {\n          var result = [];\n          var rest = this.permute(arr.slice(1));\n\n          for (var i = 0; i < rest.length; i++) {\n            for (var j = 0; j < arr[0].length; j++) {\n              result.push([arr[0][j]].concat(rest[i]));\n            }\n          }\n\n          return result;\n        }\n      }\n    }, {\n      key: \"bubbleSelectors\",\n      value: function bubbleSelectors(selectors) {\n        if (!selectors) {\n          return;\n        }\n\n        this.rules = [new Ruleset(copyArray(selectors), [this.rules[0]])];\n        this.setParent(this.rules, this);\n      }\n    }]);\n\n    return Media;\n  }(AtRule);\n\n  Media.prototype.type = 'Media';\n\n  // CSS @import node\n  //\n  // The general strategy here is that we don't want to wait\n  // for the parsing to be completed, before we start importing\n  // the file. That's because in the context of a browser,\n  // most of the time will be spent waiting for the server to respond.\n  //\n  // On creation, we push the import path to our import queue, though\n  // `import,push`, we also pass it a callback, which it'll call once\n  // the file has been fetched, and parsed.\n  //\n\n  var Import =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(Import, _Node);\n\n    function Import(path, features, options, index, currentFileInfo, visibilityInfo) {\n      var _this;\n\n      _classCallCheck(this, Import);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Import).call(this));\n      _this.options = options;\n      _this._index = index;\n      _this._fileInfo = currentFileInfo;\n      _this.path = path;\n      _this.features = features;\n      _this.allowRoot = true;\n\n      if (_this.options.less !== undefined || _this.options.inline) {\n        _this.css = !_this.options.less || _this.options.inline;\n      } else {\n        var pathValue = _this.getPath();\n\n        if (pathValue && /[#\\.\\&\\?]css([\\?;].*)?$/.test(pathValue)) {\n          _this.css = true;\n        }\n      }\n\n      _this.copyVisibilityInfo(visibilityInfo);\n\n      _this.setParent(_this.features, _assertThisInitialized(_this));\n\n      _this.setParent(_this.path, _assertThisInitialized(_this));\n\n      return _this;\n    }\n\n    _createClass(Import, [{\n      key: \"accept\",\n      value: function accept(visitor) {\n        if (this.features) {\n          this.features = visitor.visit(this.features);\n        }\n\n        this.path = visitor.visit(this.path);\n\n        if (!this.options.isPlugin && !this.options.inline && this.root) {\n          this.root = visitor.visit(this.root);\n        }\n      }\n    }, {\n      key: \"genCSS\",\n      value: function genCSS(context, output) {\n        if (this.css && this.path._fileInfo.reference === undefined) {\n          output.add('@import ', this._fileInfo, this._index);\n          this.path.genCSS(context, output);\n\n          if (this.features) {\n            output.add(' ');\n            this.features.genCSS(context, output);\n          }\n\n          output.add(';');\n        }\n      }\n    }, {\n      key: \"getPath\",\n      value: function getPath() {\n        return this.path instanceof URL ? this.path.value.value : this.path.value;\n      }\n    }, {\n      key: \"isVariableImport\",\n      value: function isVariableImport() {\n        var path = this.path;\n\n        if (path instanceof URL) {\n          path = path.value;\n        }\n\n        if (path instanceof Quoted) {\n          return path.containsVariables();\n        }\n\n        return true;\n      }\n    }, {\n      key: \"evalForImport\",\n      value: function evalForImport(context) {\n        var path = this.path;\n\n        if (path instanceof URL) {\n          path = path.value;\n        }\n\n        return new Import(path.eval(context), this.features, this.options, this._index, this._fileInfo, this.visibilityInfo());\n      }\n    }, {\n      key: \"evalPath\",\n      value: function evalPath(context) {\n        var path = this.path.eval(context);\n        var fileInfo = this._fileInfo;\n\n        if (!(path instanceof URL)) {\n          // Add the rootpath if the URL requires a rewrite\n          var pathValue = path.value;\n\n          if (fileInfo && pathValue && context.pathRequiresRewrite(pathValue)) {\n            path.value = context.rewritePath(pathValue, fileInfo.rootpath);\n          } else {\n            path.value = context.normalizePath(path.value);\n          }\n        }\n\n        return path;\n      }\n    }, {\n      key: \"eval\",\n      value: function _eval(context) {\n        var result = this.doEval(context);\n\n        if (this.options.reference || this.blocksVisibility()) {\n          if (result.length || result.length === 0) {\n            result.forEach(function (node) {\n              node.addVisibilityBlock();\n            });\n          } else {\n            result.addVisibilityBlock();\n          }\n        }\n\n        return result;\n      }\n    }, {\n      key: \"doEval\",\n      value: function doEval(context) {\n        var ruleset;\n        var registry;\n        var features = this.features && this.features.eval(context);\n\n        if (this.options.isPlugin) {\n          if (this.root && this.root.eval) {\n            try {\n              this.root.eval(context);\n            } catch (e) {\n              e.message = 'Plugin error during evaluation';\n              throw new LessError(e, this.root.imports, this.root.filename);\n            }\n          }\n\n          registry = context.frames[0] && context.frames[0].functionRegistry;\n\n          if (registry && this.root && this.root.functions) {\n            registry.addMultiple(this.root.functions);\n          }\n\n          return [];\n        }\n\n        if (this.skip) {\n          if (typeof this.skip === 'function') {\n            this.skip = this.skip();\n          }\n\n          if (this.skip) {\n            return [];\n          }\n        }\n\n        if (this.options.inline) {\n          var contents = new Anonymous(this.root, 0, {\n            filename: this.importedFilename,\n            reference: this.path._fileInfo && this.path._fileInfo.reference\n          }, true, true);\n          return this.features ? new Media([contents], this.features.value) : [contents];\n        } else if (this.css) {\n          var newImport = new Import(this.evalPath(context), features, this.options, this._index);\n\n          if (!newImport.css && this.error) {\n            throw this.error;\n          }\n\n          return newImport;\n        } else {\n          ruleset = new Ruleset(null, copyArray(this.root.rules));\n          ruleset.evalImports(context);\n          return this.features ? new Media(ruleset.rules, this.features.value) : ruleset.rules;\n        }\n      }\n    }]);\n\n    return Import;\n  }(Node);\n\n  Import.prototype.type = 'Import';\n\n  var JsEvalNode =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(JsEvalNode, _Node);\n\n    function JsEvalNode() {\n      _classCallCheck(this, JsEvalNode);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(JsEvalNode).apply(this, arguments));\n    }\n\n    _createClass(JsEvalNode, [{\n      key: \"evaluateJavaScript\",\n      value: function evaluateJavaScript(expression, context) {\n        var result;\n        var that = this;\n        var evalContext = {};\n\n        if (!context.javascriptEnabled) {\n          throw {\n            message: 'Inline JavaScript is not enabled. Is it set in your options?',\n            filename: this.fileInfo().filename,\n            index: this.getIndex()\n          };\n        }\n\n        expression = expression.replace(/@\\{([\\w-]+)\\}/g, function (_, name) {\n          return that.jsify(new Variable(\"@\".concat(name), that.getIndex(), that.fileInfo()).eval(context));\n        });\n\n        try {\n          expression = new Function(\"return (\".concat(expression, \")\"));\n        } catch (e) {\n          throw {\n            message: \"JavaScript evaluation error: \".concat(e.message, \" from `\").concat(expression, \"`\"),\n            filename: this.fileInfo().filename,\n            index: this.getIndex()\n          };\n        }\n\n        var variables = context.frames[0].variables();\n\n        for (var k in variables) {\n          if (variables.hasOwnProperty(k)) {\n            /* jshint loopfunc:true */\n            evalContext[k.slice(1)] = {\n              value: variables[k].value,\n              toJS: function toJS() {\n                return this.value.eval(context).toCSS();\n              }\n            };\n          }\n        }\n\n        try {\n          result = expression.call(evalContext);\n        } catch (e) {\n          throw {\n            message: \"JavaScript evaluation error: '\".concat(e.name, \": \").concat(e.message.replace(/[\"]/g, '\\''), \"'\"),\n            filename: this.fileInfo().filename,\n            index: this.getIndex()\n          };\n        }\n\n        return result;\n      }\n    }, {\n      key: \"jsify\",\n      value: function jsify(obj) {\n        if (Array.isArray(obj.value) && obj.value.length > 1) {\n          return \"[\".concat(obj.value.map(function (v) {\n            return v.toCSS();\n          }).join(', '), \"]\");\n        } else {\n          return obj.toCSS();\n        }\n      }\n    }]);\n\n    return JsEvalNode;\n  }(Node);\n\n  var JavaScript =\n  /*#__PURE__*/\n  function (_JsEvalNode) {\n    _inherits(JavaScript, _JsEvalNode);\n\n    function JavaScript(string, escaped, index, currentFileInfo) {\n      var _this;\n\n      _classCallCheck(this, JavaScript);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(JavaScript).call(this));\n      _this.escaped = escaped;\n      _this.expression = string;\n      _this._index = index;\n      _this._fileInfo = currentFileInfo;\n      return _this;\n    }\n\n    _createClass(JavaScript, [{\n      key: \"eval\",\n      value: function _eval(context) {\n        var result = this.evaluateJavaScript(this.expression, context);\n\n        var type = _typeof(result);\n\n        if (type === 'number' && !isNaN(result)) {\n          return new Dimension(result);\n        } else if (type === 'string') {\n          return new Quoted(\"\\\"\".concat(result, \"\\\"\"), result, this.escaped, this._index);\n        } else if (Array.isArray(result)) {\n          return new Anonymous(result.join(', '));\n        } else {\n          return new Anonymous(result);\n        }\n      }\n    }]);\n\n    return JavaScript;\n  }(JsEvalNode);\n\n  JavaScript.prototype.type = 'JavaScript';\n\n  var Assignment =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(Assignment, _Node);\n\n    function Assignment(key, val) {\n      var _this;\n\n      _classCallCheck(this, Assignment);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Assignment).call(this));\n      _this.key = key;\n      _this.value = val;\n      return _this;\n    }\n\n    _createClass(Assignment, [{\n      key: \"accept\",\n      value: function accept(visitor) {\n        this.value = visitor.visit(this.value);\n      }\n    }, {\n      key: \"eval\",\n      value: function _eval(context) {\n        if (this.value.eval) {\n          return new Assignment(this.key, this.value.eval(context));\n        }\n\n        return this;\n      }\n    }, {\n      key: \"genCSS\",\n      value: function genCSS(context, output) {\n        output.add(\"\".concat(this.key, \"=\"));\n\n        if (this.value.genCSS) {\n          this.value.genCSS(context, output);\n        } else {\n          output.add(this.value);\n        }\n      }\n    }]);\n\n    return Assignment;\n  }(Node);\n\n  Assignment.prototype.type = 'Assignment';\n\n  var Condition =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(Condition, _Node);\n\n    function Condition(op, l, r, i, negate) {\n      var _this;\n\n      _classCallCheck(this, Condition);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Condition).call(this));\n      _this.op = op.trim();\n      _this.lvalue = l;\n      _this.rvalue = r;\n      _this._index = i;\n      _this.negate = negate;\n      return _this;\n    }\n\n    _createClass(Condition, [{\n      key: \"accept\",\n      value: function accept(visitor) {\n        this.lvalue = visitor.visit(this.lvalue);\n        this.rvalue = visitor.visit(this.rvalue);\n      }\n    }, {\n      key: \"eval\",\n      value: function _eval(context) {\n        var result = function (op, a, b) {\n          switch (op) {\n            case 'and':\n              return a && b;\n\n            case 'or':\n              return a || b;\n\n            default:\n              switch (Node.compare(a, b)) {\n                case -1:\n                  return op === '<' || op === '=<' || op === '<=';\n\n                case 0:\n                  return op === '=' || op === '>=' || op === '=<' || op === '<=';\n\n                case 1:\n                  return op === '>' || op === '>=';\n\n                default:\n                  return false;\n              }\n\n          }\n        }(this.op, this.lvalue.eval(context), this.rvalue.eval(context));\n\n        return this.negate ? !result : result;\n      }\n    }]);\n\n    return Condition;\n  }(Node);\n\n  Condition.prototype.type = 'Condition';\n\n  var UnicodeDescriptor =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(UnicodeDescriptor, _Node);\n\n    function UnicodeDescriptor(value) {\n      var _this;\n\n      _classCallCheck(this, UnicodeDescriptor);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(UnicodeDescriptor).call(this));\n      _this.value = value;\n      return _this;\n    }\n\n    return UnicodeDescriptor;\n  }(Node);\n\n  UnicodeDescriptor.prototype.type = 'UnicodeDescriptor';\n\n  var Negative =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(Negative, _Node);\n\n    function Negative(node) {\n      var _this;\n\n      _classCallCheck(this, Negative);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Negative).call(this));\n      _this.value = node;\n      return _this;\n    }\n\n    _createClass(Negative, [{\n      key: \"genCSS\",\n      value: function genCSS(context, output) {\n        output.add('-');\n        this.value.genCSS(context, output);\n      }\n    }, {\n      key: \"eval\",\n      value: function _eval(context) {\n        if (context.isMathOn()) {\n          return new Operation('*', [new Dimension(-1), this.value]).eval(context);\n        }\n\n        return new Negative(this.value.eval(context));\n      }\n    }]);\n\n    return Negative;\n  }(Node);\n\n  Negative.prototype.type = 'Negative';\n\n  var Extend =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(Extend, _Node);\n\n    function Extend(selector, option, index, currentFileInfo, visibilityInfo) {\n      var _this;\n\n      _classCallCheck(this, Extend);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Extend).call(this));\n      _this.selector = selector;\n      _this.option = option;\n      _this.object_id = Extend.next_id++;\n      _this.parent_ids = [_this.object_id];\n      _this._index = index;\n      _this._fileInfo = currentFileInfo;\n\n      _this.copyVisibilityInfo(visibilityInfo);\n\n      _this.allowRoot = true;\n\n      switch (option) {\n        case 'all':\n          _this.allowBefore = true;\n          _this.allowAfter = true;\n          break;\n\n        default:\n          _this.allowBefore = false;\n          _this.allowAfter = false;\n          break;\n      }\n\n      _this.setParent(_this.selector, _assertThisInitialized(_this));\n\n      return _this;\n    }\n\n    _createClass(Extend, [{\n      key: \"accept\",\n      value: function accept(visitor) {\n        this.selector = visitor.visit(this.selector);\n      }\n    }, {\n      key: \"eval\",\n      value: function _eval(context) {\n        return new Extend(this.selector.eval(context), this.option, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n      }\n    }, {\n      key: \"clone\",\n      value: function clone(context) {\n        return new Extend(this.selector, this.option, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n      } // it concatenates (joins) all selectors in selector array\n\n    }, {\n      key: \"findSelfSelectors\",\n      value: function findSelfSelectors(selectors) {\n        var selfElements = [];\n        var i;\n        var selectorElements;\n\n        for (i = 0; i < selectors.length; i++) {\n          selectorElements = selectors[i].elements; // duplicate the logic in genCSS function inside the selector node.\n          // future TODO - move both logics into the selector joiner visitor\n\n          if (i > 0 && selectorElements.length && selectorElements[0].combinator.value === '') {\n            selectorElements[0].combinator.value = ' ';\n          }\n\n          selfElements = selfElements.concat(selectors[i].elements);\n        }\n\n        this.selfSelectors = [new Selector(selfElements)];\n        this.selfSelectors[0].copyVisibilityInfo(this.visibilityInfo());\n      }\n    }]);\n\n    return Extend;\n  }(Node);\n\n  Extend.next_id = 0;\n  Extend.prototype.type = 'Extend';\n\n  var VariableCall =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(VariableCall, _Node);\n\n    function VariableCall(variable, index, currentFileInfo) {\n      var _this;\n\n      _classCallCheck(this, VariableCall);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(VariableCall).call(this));\n      _this.variable = variable;\n      _this._index = index;\n      _this._fileInfo = currentFileInfo;\n      _this.allowRoot = true;\n      return _this;\n    }\n\n    _createClass(VariableCall, [{\n      key: \"eval\",\n      value: function _eval(context) {\n        var rules;\n        var detachedRuleset = new Variable(this.variable, this.getIndex(), this.fileInfo()).eval(context);\n        var error = new LessError({\n          message: \"Could not evaluate variable call \".concat(this.variable)\n        });\n\n        if (!detachedRuleset.ruleset) {\n          if (detachedRuleset.rules) {\n            rules = detachedRuleset;\n          } else if (Array.isArray(detachedRuleset)) {\n            rules = new Ruleset('', detachedRuleset);\n          } else if (Array.isArray(detachedRuleset.value)) {\n            rules = new Ruleset('', detachedRuleset.value);\n          } else {\n            throw error;\n          }\n\n          detachedRuleset = new DetachedRuleset(rules);\n        }\n\n        if (detachedRuleset.ruleset) {\n          return detachedRuleset.callEval(context);\n        }\n\n        throw error;\n      }\n    }]);\n\n    return VariableCall;\n  }(Node);\n\n  VariableCall.prototype.type = 'VariableCall';\n\n  var NamespaceValue =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(NamespaceValue, _Node);\n\n    function NamespaceValue(ruleCall, lookups, important, index, fileInfo) {\n      var _this;\n\n      _classCallCheck(this, NamespaceValue);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(NamespaceValue).call(this));\n      _this.value = ruleCall;\n      _this.lookups = lookups;\n      _this.important = important;\n      _this._index = index;\n      _this._fileInfo = fileInfo;\n      return _this;\n    }\n\n    _createClass(NamespaceValue, [{\n      key: \"eval\",\n      value: function _eval(context) {\n        var i;\n        var name;\n        var rules = this.value.eval(context);\n\n        for (i = 0; i < this.lookups.length; i++) {\n          name = this.lookups[i];\n          /**\n           * Eval'd DRs return rulesets.\n           * Eval'd mixins return rules, so let's make a ruleset if we need it.\n           * We need to do this because of late parsing of values\n           */\n\n          if (Array.isArray(rules)) {\n            rules = new Ruleset([new Selector()], rules);\n          }\n\n          if (name === '') {\n            rules = rules.lastDeclaration();\n          } else if (name.charAt(0) === '@') {\n            if (name.charAt(1) === '@') {\n              name = \"@\".concat(new Variable(name.substr(1)).eval(context).value);\n            }\n\n            if (rules.variables) {\n              rules = rules.variable(name);\n            }\n\n            if (!rules) {\n              throw {\n                type: 'Name',\n                message: \"variable \".concat(name, \" not found\"),\n                filename: this.fileInfo().filename,\n                index: this.getIndex()\n              };\n            }\n          } else {\n            if (name.substring(0, 2) === '$@') {\n              name = \"$\".concat(new Variable(name.substr(1)).eval(context).value);\n            } else {\n              name = name.charAt(0) === '$' ? name : \"$\".concat(name);\n            }\n\n            if (rules.properties) {\n              rules = rules.property(name);\n            }\n\n            if (!rules) {\n              throw {\n                type: 'Name',\n                message: \"property \\\"\".concat(name.substr(1), \"\\\" not found\"),\n                filename: this.fileInfo().filename,\n                index: this.getIndex()\n              };\n            } // Properties are an array of values, since a ruleset can have multiple props.\n            // We pick the last one (the \"cascaded\" value)\n\n\n            rules = rules[rules.length - 1];\n          }\n\n          if (rules.value) {\n            rules = rules.eval(context).value;\n          }\n\n          if (rules.ruleset) {\n            rules = rules.ruleset.eval(context);\n          }\n        }\n\n        return rules;\n      }\n    }]);\n\n    return NamespaceValue;\n  }(Node);\n\n  NamespaceValue.prototype.type = 'NamespaceValue';\n\n  var Definition =\n  /*#__PURE__*/\n  function (_Ruleset) {\n    _inherits(Definition, _Ruleset);\n\n    function Definition(name, params, rules, condition, variadic, frames, visibilityInfo) {\n      var _this;\n\n      _classCallCheck(this, Definition);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Definition).call(this));\n      _this.name = name || 'anonymous mixin';\n      _this.selectors = [new Selector([new Element(null, name, false, _this._index, _this._fileInfo)])];\n      _this.params = params;\n      _this.condition = condition;\n      _this.variadic = variadic;\n      _this.arity = params.length;\n      _this.rules = rules;\n      _this._lookups = {};\n      var optionalParameters = [];\n      _this.required = params.reduce(function (count, p) {\n        if (!p.name || p.name && !p.value) {\n          return count + 1;\n        } else {\n          optionalParameters.push(p.name);\n          return count;\n        }\n      }, 0);\n      _this.optionalParameters = optionalParameters;\n      _this.frames = frames;\n\n      _this.copyVisibilityInfo(visibilityInfo);\n\n      _this.allowRoot = true;\n      return _this;\n    }\n\n    _createClass(Definition, [{\n      key: \"accept\",\n      value: function accept(visitor) {\n        if (this.params && this.params.length) {\n          this.params = visitor.visitArray(this.params);\n        }\n\n        this.rules = visitor.visitArray(this.rules);\n\n        if (this.condition) {\n          this.condition = visitor.visit(this.condition);\n        }\n      }\n    }, {\n      key: \"evalParams\",\n      value: function evalParams(context, mixinEnv, args, evaldArguments) {\n        /* jshint boss:true */\n        var frame = new Ruleset(null, null);\n        var varargs;\n        var arg;\n        var params = copyArray(this.params);\n        var i;\n        var j;\n        var val;\n        var name;\n        var isNamedFound;\n        var argIndex;\n        var argsLength = 0;\n\n        if (mixinEnv.frames && mixinEnv.frames[0] && mixinEnv.frames[0].functionRegistry) {\n          frame.functionRegistry = mixinEnv.frames[0].functionRegistry.inherit();\n        }\n\n        mixinEnv = new contexts.Eval(mixinEnv, [frame].concat(mixinEnv.frames));\n\n        if (args) {\n          args = copyArray(args);\n          argsLength = args.length;\n\n          for (i = 0; i < argsLength; i++) {\n            arg = args[i];\n\n            if (name = arg && arg.name) {\n              isNamedFound = false;\n\n              for (j = 0; j < params.length; j++) {\n                if (!evaldArguments[j] && name === params[j].name) {\n                  evaldArguments[j] = arg.value.eval(context);\n                  frame.prependRule(new Declaration(name, arg.value.eval(context)));\n                  isNamedFound = true;\n                  break;\n                }\n              }\n\n              if (isNamedFound) {\n                args.splice(i, 1);\n                i--;\n                continue;\n              } else {\n                throw {\n                  type: 'Runtime',\n                  message: \"Named argument for \".concat(this.name, \" \").concat(args[i].name, \" not found\")\n                };\n              }\n            }\n          }\n        }\n\n        argIndex = 0;\n\n        for (i = 0; i < params.length; i++) {\n          if (evaldArguments[i]) {\n            continue;\n          }\n\n          arg = args && args[argIndex];\n\n          if (name = params[i].name) {\n            if (params[i].variadic) {\n              varargs = [];\n\n              for (j = argIndex; j < argsLength; j++) {\n                varargs.push(args[j].value.eval(context));\n              }\n\n              frame.prependRule(new Declaration(name, new Expression(varargs).eval(context)));\n            } else {\n              val = arg && arg.value;\n\n              if (val) {\n                // This was a mixin call, pass in a detached ruleset of it's eval'd rules\n                if (Array.isArray(val)) {\n                  val = new DetachedRuleset(new Ruleset('', val));\n                } else {\n                  val = val.eval(context);\n                }\n              } else if (params[i].value) {\n                val = params[i].value.eval(mixinEnv);\n                frame.resetCache();\n              } else {\n                throw {\n                  type: 'Runtime',\n                  message: \"wrong number of arguments for \".concat(this.name, \" (\").concat(argsLength, \" for \").concat(this.arity, \")\")\n                };\n              }\n\n              frame.prependRule(new Declaration(name, val));\n              evaldArguments[i] = val;\n            }\n          }\n\n          if (params[i].variadic && args) {\n            for (j = argIndex; j < argsLength; j++) {\n              evaldArguments[j] = args[j].value.eval(context);\n            }\n          }\n\n          argIndex++;\n        }\n\n        return frame;\n      }\n    }, {\n      key: \"makeImportant\",\n      value: function makeImportant() {\n        var rules = !this.rules ? this.rules : this.rules.map(function (r) {\n          if (r.makeImportant) {\n            return r.makeImportant(true);\n          } else {\n            return r;\n          }\n        });\n        var result = new Definition(this.name, this.params, rules, this.condition, this.variadic, this.frames);\n        return result;\n      }\n    }, {\n      key: \"eval\",\n      value: function _eval(context) {\n        return new Definition(this.name, this.params, this.rules, this.condition, this.variadic, this.frames || copyArray(context.frames));\n      }\n    }, {\n      key: \"evalCall\",\n      value: function evalCall(context, args, important) {\n        var _arguments = [];\n        var mixinFrames = this.frames ? this.frames.concat(context.frames) : context.frames;\n        var frame = this.evalParams(context, new contexts.Eval(context, mixinFrames), args, _arguments);\n        var rules;\n        var ruleset;\n        frame.prependRule(new Declaration('@arguments', new Expression(_arguments).eval(context)));\n        rules = copyArray(this.rules);\n        ruleset = new Ruleset(null, rules);\n        ruleset.originalRuleset = this;\n        ruleset = ruleset.eval(new contexts.Eval(context, [this, frame].concat(mixinFrames)));\n\n        if (important) {\n          ruleset = ruleset.makeImportant();\n        }\n\n        return ruleset;\n      }\n    }, {\n      key: \"matchCondition\",\n      value: function matchCondition(args, context) {\n        if (this.condition && !this.condition.eval(new contexts.Eval(context, [this.evalParams(context,\n        /* the parameter variables */\n        new contexts.Eval(context, this.frames ? this.frames.concat(context.frames) : context.frames), args, [])].concat(this.frames || []) // the parent namespace/mixin frames\n        .concat(context.frames)))) {\n          // the current environment frames\n          return false;\n        }\n\n        return true;\n      }\n    }, {\n      key: \"matchArgs\",\n      value: function matchArgs(args, context) {\n        var allArgsCnt = args && args.length || 0;\n        var len;\n        var optionalParameters = this.optionalParameters;\n        var requiredArgsCnt = !args ? 0 : args.reduce(function (count, p) {\n          if (optionalParameters.indexOf(p.name) < 0) {\n            return count + 1;\n          } else {\n            return count;\n          }\n        }, 0);\n\n        if (!this.variadic) {\n          if (requiredArgsCnt < this.required) {\n            return false;\n          }\n\n          if (allArgsCnt > this.params.length) {\n            return false;\n          }\n        } else {\n          if (requiredArgsCnt < this.required - 1) {\n            return false;\n          }\n        } // check patterns\n\n\n        len = Math.min(requiredArgsCnt, this.arity);\n\n        for (var i = 0; i < len; i++) {\n          if (!this.params[i].name && !this.params[i].variadic) {\n            if (args[i].value.eval(context).toCSS() != this.params[i].value.eval(context).toCSS()) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      }\n    }]);\n\n    return Definition;\n  }(Ruleset);\n\n  Definition.prototype.type = 'MixinDefinition';\n  Definition.prototype.evalFirst = true;\n\n  var MixinCall =\n  /*#__PURE__*/\n  function (_Node) {\n    _inherits(MixinCall, _Node);\n\n    function MixinCall(elements, args, index, currentFileInfo, important) {\n      var _this;\n\n      _classCallCheck(this, MixinCall);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(MixinCall).call(this));\n      _this.selector = new Selector(elements);\n      _this.arguments = args || [];\n      _this._index = index;\n      _this._fileInfo = currentFileInfo;\n      _this.important = important;\n      _this.allowRoot = true;\n\n      _this.setParent(_this.selector, _assertThisInitialized(_this));\n\n      return _this;\n    }\n\n    _createClass(MixinCall, [{\n      key: \"accept\",\n      value: function accept(visitor) {\n        if (this.selector) {\n          this.selector = visitor.visit(this.selector);\n        }\n\n        if (this.arguments.length) {\n          this.arguments = visitor.visitArray(this.arguments);\n        }\n      }\n    }, {\n      key: \"eval\",\n      value: function _eval(context) {\n        var mixins;\n        var mixin;\n        var mixinPath;\n        var args = [];\n        var arg;\n        var argValue;\n        var rules = [];\n        var match = false;\n        var i;\n        var m;\n        var f;\n        var isRecursive;\n        var isOneFound;\n        var candidates = [];\n        var candidate;\n        var conditionResult = [];\n        var defaultResult;\n        var defFalseEitherCase = -1;\n        var defNone = 0;\n        var defTrue = 1;\n        var defFalse = 2;\n        var count;\n        var originalRuleset;\n        var noArgumentsFilter;\n        this.selector = this.selector.eval(context);\n\n        function calcDefGroup(mixin, mixinPath) {\n          var f;\n          var p;\n          var namespace;\n\n          for (f = 0; f < 2; f++) {\n            conditionResult[f] = true;\n            defaultFunc.value(f);\n\n            for (p = 0; p < mixinPath.length && conditionResult[f]; p++) {\n              namespace = mixinPath[p];\n\n              if (namespace.matchCondition) {\n                conditionResult[f] = conditionResult[f] && namespace.matchCondition(null, context);\n              }\n            }\n\n            if (mixin.matchCondition) {\n              conditionResult[f] = conditionResult[f] && mixin.matchCondition(args, context);\n            }\n          }\n\n          if (conditionResult[0] || conditionResult[1]) {\n            if (conditionResult[0] != conditionResult[1]) {\n              return conditionResult[1] ? defTrue : defFalse;\n            }\n\n            return defNone;\n          }\n\n          return defFalseEitherCase;\n        }\n\n        for (i = 0; i < this.arguments.length; i++) {\n          arg = this.arguments[i];\n          argValue = arg.value.eval(context);\n\n          if (arg.expand && Array.isArray(argValue.value)) {\n            argValue = argValue.value;\n\n            for (m = 0; m < argValue.length; m++) {\n              args.push({\n                value: argValue[m]\n              });\n            }\n          } else {\n            args.push({\n              name: arg.name,\n              value: argValue\n            });\n          }\n        }\n\n        noArgumentsFilter = function noArgumentsFilter(rule) {\n          return rule.matchArgs(null, context);\n        };\n\n        for (i = 0; i < context.frames.length; i++) {\n          if ((mixins = context.frames[i].find(this.selector, null, noArgumentsFilter)).length > 0) {\n            isOneFound = true; // To make `default()` function independent of definition order we have two \"subpasses\" here.\n            // At first we evaluate each guard *twice* (with `default() == true` and `default() == false`),\n            // and build candidate list with corresponding flags. Then, when we know all possible matches,\n            // we make a final decision.\n\n            for (m = 0; m < mixins.length; m++) {\n              mixin = mixins[m].rule;\n              mixinPath = mixins[m].path;\n              isRecursive = false;\n\n              for (f = 0; f < context.frames.length; f++) {\n                if (!(mixin instanceof Definition) && mixin === (context.frames[f].originalRuleset || context.frames[f])) {\n                  isRecursive = true;\n                  break;\n                }\n              }\n\n              if (isRecursive) {\n                continue;\n              }\n\n              if (mixin.matchArgs(args, context)) {\n                candidate = {\n                  mixin: mixin,\n                  group: calcDefGroup(mixin, mixinPath)\n                };\n\n                if (candidate.group !== defFalseEitherCase) {\n                  candidates.push(candidate);\n                }\n\n                match = true;\n              }\n            }\n\n            defaultFunc.reset();\n            count = [0, 0, 0];\n\n            for (m = 0; m < candidates.length; m++) {\n              count[candidates[m].group]++;\n            }\n\n            if (count[defNone] > 0) {\n              defaultResult = defFalse;\n            } else {\n              defaultResult = defTrue;\n\n              if (count[defTrue] + count[defFalse] > 1) {\n                throw {\n                  type: 'Runtime',\n                  message: \"Ambiguous use of `default()` found when matching for `\".concat(this.format(args), \"`\"),\n                  index: this.getIndex(),\n                  filename: this.fileInfo().filename\n                };\n              }\n            }\n\n            for (m = 0; m < candidates.length; m++) {\n              candidate = candidates[m].group;\n\n              if (candidate === defNone || candidate === defaultResult) {\n                try {\n                  mixin = candidates[m].mixin;\n\n                  if (!(mixin instanceof Definition)) {\n                    originalRuleset = mixin.originalRuleset || mixin;\n                    mixin = new Definition('', [], mixin.rules, null, false, null, originalRuleset.visibilityInfo());\n                    mixin.originalRuleset = originalRuleset;\n                  }\n\n                  var newRules = mixin.evalCall(context, args, this.important).rules;\n\n                  this._setVisibilityToReplacement(newRules);\n\n                  Array.prototype.push.apply(rules, newRules);\n                } catch (e) {\n                  throw {\n                    message: e.message,\n                    index: this.getIndex(),\n                    filename: this.fileInfo().filename,\n                    stack: e.stack\n                  };\n                }\n              }\n            }\n\n            if (match) {\n              return rules;\n            }\n          }\n        }\n\n        if (isOneFound) {\n          throw {\n            type: 'Runtime',\n            message: \"No matching definition was found for `\".concat(this.format(args), \"`\"),\n            index: this.getIndex(),\n            filename: this.fileInfo().filename\n          };\n        } else {\n          throw {\n            type: 'Name',\n            message: \"\".concat(this.selector.toCSS().trim(), \" is undefined\"),\n            index: this.getIndex(),\n            filename: this.fileInfo().filename\n          };\n        }\n      }\n    }, {\n      key: \"_setVisibilityToReplacement\",\n      value: function _setVisibilityToReplacement(replacement) {\n        var i;\n        var rule;\n\n        if (this.blocksVisibility()) {\n          for (i = 0; i < replacement.length; i++) {\n            rule = replacement[i];\n            rule.addVisibilityBlock();\n          }\n        }\n      }\n    }, {\n      key: \"format\",\n      value: function format(args) {\n        return \"\".concat(this.selector.toCSS().trim(), \"(\").concat(args ? args.map(function (a) {\n          var argValue = '';\n\n          if (a.name) {\n            argValue += \"\".concat(a.name, \":\");\n          }\n\n          if (a.value.toCSS) {\n            argValue += a.value.toCSS();\n          } else {\n            argValue += '???';\n          }\n\n          return argValue;\n        }).join(', ') : '', \")\");\n      }\n    }]);\n\n    return MixinCall;\n  }(Node);\n\n  MixinCall.prototype.type = 'MixinCall';\n\n  var tree = {\n    Node: Node,\n    Color: Color,\n    AtRule: AtRule,\n    DetachedRuleset: DetachedRuleset,\n    Operation: Operation,\n    Dimension: Dimension,\n    Unit: Unit,\n    Keyword: Keyword,\n    Variable: Variable,\n    Property: Property,\n    Ruleset: Ruleset,\n    Element: Element,\n    Attribute: Attribute,\n    Combinator: Combinator,\n    Selector: Selector,\n    Quoted: Quoted,\n    Expression: Expression,\n    Declaration: Declaration,\n    Call: Call,\n    URL: URL,\n    Import: Import,\n    Comment: Comment,\n    Anonymous: Anonymous,\n    Value: Value,\n    JavaScript: JavaScript,\n    Assignment: Assignment,\n    Condition: Condition,\n    Paren: Paren,\n    Media: Media,\n    UnicodeDescriptor: UnicodeDescriptor,\n    Negative: Negative,\n    Extend: Extend,\n    VariableCall: VariableCall,\n    NamespaceValue: NamespaceValue,\n    mixin: {\n      Call: MixinCall,\n      Definition: Definition\n    }\n  };\n\n  var logger = {\n    error: function error(msg) {\n      this._fireEvent('error', msg);\n    },\n    warn: function warn(msg) {\n      this._fireEvent('warn', msg);\n    },\n    info: function info(msg) {\n      this._fireEvent('info', msg);\n    },\n    debug: function debug(msg) {\n      this._fireEvent('debug', msg);\n    },\n    addListener: function addListener(listener) {\n      this._listeners.push(listener);\n    },\n    removeListener: function removeListener(listener) {\n      for (var i = 0; i < this._listeners.length; i++) {\n        if (this._listeners[i] === listener) {\n          this._listeners.splice(i, 1);\n\n          return;\n        }\n      }\n    },\n    _fireEvent: function _fireEvent(type, msg) {\n      for (var i = 0; i < this._listeners.length; i++) {\n        var logFunction = this._listeners[i][type];\n\n        if (logFunction) {\n          logFunction(msg);\n        }\n      }\n    },\n    _listeners: []\n  };\n\n  var environment =\n  /*#__PURE__*/\n  function () {\n    function environment(externalEnvironment, fileManagers) {\n      _classCallCheck(this, environment);\n\n      this.fileManagers = fileManagers || [];\n      externalEnvironment = externalEnvironment || {};\n      var optionalFunctions = ['encodeBase64', 'mimeLookup', 'charsetLookup', 'getSourceMapGenerator'];\n      var requiredFunctions = [];\n      var functions = requiredFunctions.concat(optionalFunctions);\n\n      for (var i = 0; i < functions.length; i++) {\n        var propName = functions[i];\n        var environmentFunc = externalEnvironment[propName];\n\n        if (environmentFunc) {\n          this[propName] = environmentFunc.bind(externalEnvironment);\n        } else if (i < requiredFunctions.length) {\n          this.warn(\"missing required function in environment - \".concat(propName));\n        }\n      }\n    }\n\n    _createClass(environment, [{\n      key: \"getFileManager\",\n      value: function getFileManager(filename, currentDirectory, options, environment, isSync) {\n        if (!filename) {\n          logger.warn('getFileManager called with no filename.. Please report this issue. continuing.');\n        }\n\n        if (currentDirectory == null) {\n          logger.warn('getFileManager called with null directory.. Please report this issue. continuing.');\n        }\n\n        var fileManagers = this.fileManagers;\n\n        if (options.pluginManager) {\n          fileManagers = [].concat(fileManagers).concat(options.pluginManager.getFileManagers());\n        }\n\n        for (var i = fileManagers.length - 1; i >= 0; i--) {\n          var fileManager = fileManagers[i];\n\n          if (fileManager[isSync ? 'supportsSync' : 'supports'](filename, currentDirectory, options, environment)) {\n            return fileManager;\n          }\n        }\n\n        return null;\n      }\n    }, {\n      key: \"addFileManager\",\n      value: function addFileManager(fileManager) {\n        this.fileManagers.push(fileManager);\n      }\n    }, {\n      key: \"clearFileManagers\",\n      value: function clearFileManagers() {\n        this.fileManagers = [];\n      }\n    }]);\n\n    return environment;\n  }();\n\n  var AbstractFileManager =\n  /*#__PURE__*/\n  function () {\n    function AbstractFileManager() {\n      _classCallCheck(this, AbstractFileManager);\n    }\n\n    _createClass(AbstractFileManager, [{\n      key: \"getPath\",\n      value: function getPath(filename) {\n        var j = filename.lastIndexOf('?');\n\n        if (j > 0) {\n          filename = filename.slice(0, j);\n        }\n\n        j = filename.lastIndexOf('/');\n\n        if (j < 0) {\n          j = filename.lastIndexOf('\\\\');\n        }\n\n        if (j < 0) {\n          return '';\n        }\n\n        return filename.slice(0, j + 1);\n      }\n    }, {\n      key: \"tryAppendExtension\",\n      value: function tryAppendExtension(path, ext) {\n        return /(\\.[a-z]*$)|([\\?;].*)$/.test(path) ? path : path + ext;\n      }\n    }, {\n      key: \"tryAppendLessExtension\",\n      value: function tryAppendLessExtension(path) {\n        return this.tryAppendExtension(path, '.less');\n      }\n    }, {\n      key: \"supportsSync\",\n      value: function supportsSync() {\n        return false;\n      }\n    }, {\n      key: \"alwaysMakePathsAbsolute\",\n      value: function alwaysMakePathsAbsolute() {\n        return false;\n      }\n    }, {\n      key: \"isPathAbsolute\",\n      value: function isPathAbsolute(filename) {\n        return /^(?:[a-z-]+:|\\/|\\\\|#)/i.test(filename);\n      } // TODO: pull out / replace?\n\n    }, {\n      key: \"join\",\n      value: function join(basePath, laterPath) {\n        if (!basePath) {\n          return laterPath;\n        }\n\n        return basePath + laterPath;\n      }\n    }, {\n      key: \"pathDiff\",\n      value: function pathDiff(url, baseUrl) {\n        // diff between two paths to create a relative path\n        var urlParts = this.extractUrlParts(url);\n        var baseUrlParts = this.extractUrlParts(baseUrl);\n        var i;\n        var max;\n        var urlDirectories;\n        var baseUrlDirectories;\n        var diff = '';\n\n        if (urlParts.hostPart !== baseUrlParts.hostPart) {\n          return '';\n        }\n\n        max = Math.max(baseUrlParts.directories.length, urlParts.directories.length);\n\n        for (i = 0; i < max; i++) {\n          if (baseUrlParts.directories[i] !== urlParts.directories[i]) {\n            break;\n          }\n        }\n\n        baseUrlDirectories = baseUrlParts.directories.slice(i);\n        urlDirectories = urlParts.directories.slice(i);\n\n        for (i = 0; i < baseUrlDirectories.length - 1; i++) {\n          diff += '../';\n        }\n\n        for (i = 0; i < urlDirectories.length - 1; i++) {\n          diff += \"\".concat(urlDirectories[i], \"/\");\n        }\n\n        return diff;\n      }\n    }, {\n      key: \"extractUrlParts\",\n      // helper function, not part of API\n      value: function extractUrlParts(url, baseUrl) {\n        // urlParts[1] = protocol://hostname/ OR /\n        // urlParts[2] = / if path relative to host base\n        // urlParts[3] = directories\n        // urlParts[4] = filename\n        // urlParts[5] = parameters\n        var urlPartsRegex = /^((?:[a-z-]+:)?\\/{2}(?:[^\\/\\?#]*\\/)|([\\/\\\\]))?((?:[^\\/\\\\\\?#]*[\\/\\\\])*)([^\\/\\\\\\?#]*)([#\\?].*)?$/i;\n        var urlParts = url.match(urlPartsRegex);\n        var returner = {};\n        var rawDirectories = [];\n        var directories = [];\n        var i;\n        var baseUrlParts;\n\n        if (!urlParts) {\n          throw new Error(\"Could not parse sheet href - '\".concat(url, \"'\"));\n        } // Stylesheets in IE don't always return the full path\n\n\n        if (baseUrl && (!urlParts[1] || urlParts[2])) {\n          baseUrlParts = baseUrl.match(urlPartsRegex);\n\n          if (!baseUrlParts) {\n            throw new Error(\"Could not parse page url - '\".concat(baseUrl, \"'\"));\n          }\n\n          urlParts[1] = urlParts[1] || baseUrlParts[1] || '';\n\n          if (!urlParts[2]) {\n            urlParts[3] = baseUrlParts[3] + urlParts[3];\n          }\n        }\n\n        if (urlParts[3]) {\n          rawDirectories = urlParts[3].replace(/\\\\/g, '/').split('/'); // collapse '..' and skip '.'\n\n          for (i = 0; i < rawDirectories.length; i++) {\n            if (rawDirectories[i] === '..') {\n              directories.pop();\n            } else if (rawDirectories[i] !== '.') {\n              directories.push(rawDirectories[i]);\n            }\n          }\n        }\n\n        returner.hostPart = urlParts[1];\n        returner.directories = directories;\n        returner.rawPath = (urlParts[1] || '') + rawDirectories.join('/');\n        returner.path = (urlParts[1] || '') + directories.join('/');\n        returner.filename = urlParts[4];\n        returner.fileUrl = returner.path + (urlParts[4] || '');\n        returner.url = returner.fileUrl + (urlParts[5] || '');\n        return returner;\n      }\n    }]);\n\n    return AbstractFileManager;\n  }();\n\n  var AbstractPluginLoader =\n  /*#__PURE__*/\n  function () {\n    function AbstractPluginLoader() {\n      _classCallCheck(this, AbstractPluginLoader);\n\n      // Implemented by Node.js plugin loader\n      this.require = function () {\n        return null;\n      };\n    }\n\n    _createClass(AbstractPluginLoader, [{\n      key: \"evalPlugin\",\n      value: function evalPlugin(contents, context, imports, pluginOptions, fileInfo) {\n        var loader;\n        var registry;\n        var pluginObj;\n        var localModule;\n        var pluginManager;\n        var filename;\n        var result;\n        pluginManager = context.pluginManager;\n\n        if (fileInfo) {\n          if (typeof fileInfo === 'string') {\n            filename = fileInfo;\n          } else {\n            filename = fileInfo.filename;\n          }\n        }\n\n        var shortname = new this.less.FileManager().extractUrlParts(filename).filename;\n\n        if (filename) {\n          pluginObj = pluginManager.get(filename);\n\n          if (pluginObj) {\n            result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\n\n            if (result) {\n              return result;\n            }\n\n            try {\n              if (pluginObj.use) {\n                pluginObj.use.call(this.context, pluginObj);\n              }\n            } catch (e) {\n              e.message = e.message || 'Error during @plugin call';\n              return new LessError(e, imports, filename);\n            }\n\n            return pluginObj;\n          }\n        }\n\n        localModule = {\n          exports: {},\n          pluginManager: pluginManager,\n          fileInfo: fileInfo\n        };\n        registry = functionRegistry.create();\n\n        var registerPlugin = function registerPlugin(obj) {\n          pluginObj = obj;\n        };\n\n        try {\n          loader = new Function('module', 'require', 'registerPlugin', 'functions', 'tree', 'less', 'fileInfo', contents);\n          loader(localModule, this.require(filename), registerPlugin, registry, this.less.tree, this.less, fileInfo);\n        } catch (e) {\n          return new LessError(e, imports, filename);\n        }\n\n        if (!pluginObj) {\n          pluginObj = localModule.exports;\n        }\n\n        pluginObj = this.validatePlugin(pluginObj, filename, shortname);\n\n        if (pluginObj instanceof LessError) {\n          return pluginObj;\n        }\n\n        if (pluginObj) {\n          pluginObj.imports = imports;\n          pluginObj.filename = filename; // For < 3.x (or unspecified minVersion) - setOptions() before install()\n\n          if (!pluginObj.minVersion || this.compareVersion('3.0.0', pluginObj.minVersion) < 0) {\n            result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\n\n            if (result) {\n              return result;\n            }\n          } // Run on first load\n\n\n          pluginManager.addPlugin(pluginObj, fileInfo.filename, registry);\n          pluginObj.functions = registry.getLocalFunctions(); // Need to call setOptions again because the pluginObj might have functions\n\n          result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\n\n          if (result) {\n            return result;\n          } // Run every @plugin call\n\n\n          try {\n            if (pluginObj.use) {\n              pluginObj.use.call(this.context, pluginObj);\n            }\n          } catch (e) {\n            e.message = e.message || 'Error during @plugin call';\n            return new LessError(e, imports, filename);\n          }\n        } else {\n          return new LessError({\n            message: 'Not a valid plugin'\n          }, imports, filename);\n        }\n\n        return pluginObj;\n      }\n    }, {\n      key: \"trySetOptions\",\n      value: function trySetOptions(plugin, filename, name, options) {\n        if (options && !plugin.setOptions) {\n          return new LessError({\n            message: \"Options have been provided but the plugin \".concat(name, \" does not support any options.\")\n          });\n        }\n\n        try {\n          plugin.setOptions && plugin.setOptions(options);\n        } catch (e) {\n          return new LessError(e);\n        }\n      }\n    }, {\n      key: \"validatePlugin\",\n      value: function validatePlugin(plugin, filename, name) {\n        if (plugin) {\n          // support plugins being a function\n          // so that the plugin can be more usable programmatically\n          if (typeof plugin === 'function') {\n            plugin = new plugin();\n          }\n\n          if (plugin.minVersion) {\n            if (this.compareVersion(plugin.minVersion, this.less.version) < 0) {\n              return new LessError({\n                message: \"Plugin \".concat(name, \" requires version \").concat(this.versionToString(plugin.minVersion))\n              });\n            }\n          }\n\n          return plugin;\n        }\n\n        return null;\n      }\n    }, {\n      key: \"compareVersion\",\n      value: function compareVersion(aVersion, bVersion) {\n        if (typeof aVersion === 'string') {\n          aVersion = aVersion.match(/^(\\d+)\\.?(\\d+)?\\.?(\\d+)?/);\n          aVersion.shift();\n        }\n\n        for (var i = 0; i < aVersion.length; i++) {\n          if (aVersion[i] !== bVersion[i]) {\n            return parseInt(aVersion[i]) > parseInt(bVersion[i]) ? -1 : 1;\n          }\n        }\n\n        return 0;\n      }\n    }, {\n      key: \"versionToString\",\n      value: function versionToString(version) {\n        var versionString = '';\n\n        for (var i = 0; i < version.length; i++) {\n          versionString += (versionString ? '.' : '') + version[i];\n        }\n\n        return versionString;\n      }\n    }, {\n      key: \"printUsage\",\n      value: function printUsage(plugins) {\n        for (var i = 0; i < plugins.length; i++) {\n          var plugin = plugins[i];\n\n          if (plugin.printUsage) {\n            plugin.printUsage();\n          }\n        }\n      }\n    }]);\n\n    return AbstractPluginLoader;\n  }();\n\n  var _visitArgs = {\n    visitDeeper: true\n  };\n  var _hasIndexed = false;\n\n  function _noop(node) {\n    return node;\n  }\n\n  function indexNodeTypes(parent, ticker) {\n    // add .typeIndex to tree node types for lookup table\n    var key;\n    var child;\n\n    for (key in parent) {\n      /* eslint guard-for-in: 0 */\n      child = parent[key];\n\n      switch (_typeof(child)) {\n        case 'function':\n          // ignore bound functions directly on tree which do not have a prototype\n          // or aren't nodes\n          if (child.prototype && child.prototype.type) {\n            child.prototype.typeIndex = ticker++;\n          }\n\n          break;\n\n        case 'object':\n          ticker = indexNodeTypes(child, ticker);\n          break;\n      }\n    }\n\n    return ticker;\n  }\n\n  var Visitor =\n  /*#__PURE__*/\n  function () {\n    function Visitor(implementation) {\n      _classCallCheck(this, Visitor);\n\n      this._implementation = implementation;\n      this._visitInCache = {};\n      this._visitOutCache = {};\n\n      if (!_hasIndexed) {\n        indexNodeTypes(tree, 1);\n        _hasIndexed = true;\n      }\n    }\n\n    _createClass(Visitor, [{\n      key: \"visit\",\n      value: function visit(node) {\n        if (!node) {\n          return node;\n        }\n\n        var nodeTypeIndex = node.typeIndex;\n\n        if (!nodeTypeIndex) {\n          // MixinCall args aren't a node type?\n          if (node.value && node.value.typeIndex) {\n            this.visit(node.value);\n          }\n\n          return node;\n        }\n\n        var impl = this._implementation;\n        var func = this._visitInCache[nodeTypeIndex];\n        var funcOut = this._visitOutCache[nodeTypeIndex];\n        var visitArgs = _visitArgs;\n        var fnName;\n        visitArgs.visitDeeper = true;\n\n        if (!func) {\n          fnName = \"visit\".concat(node.type);\n          func = impl[fnName] || _noop;\n          funcOut = impl[\"\".concat(fnName, \"Out\")] || _noop;\n          this._visitInCache[nodeTypeIndex] = func;\n          this._visitOutCache[nodeTypeIndex] = funcOut;\n        }\n\n        if (func !== _noop) {\n          var newNode = func.call(impl, node, visitArgs);\n\n          if (node && impl.isReplacing) {\n            node = newNode;\n          }\n        }\n\n        if (visitArgs.visitDeeper && node && node.accept) {\n          node.accept(this);\n        }\n\n        if (funcOut != _noop) {\n          funcOut.call(impl, node);\n        }\n\n        return node;\n      }\n    }, {\n      key: \"visitArray\",\n      value: function visitArray(nodes, nonReplacing) {\n        if (!nodes) {\n          return nodes;\n        }\n\n        var cnt = nodes.length;\n        var i; // Non-replacing\n\n        if (nonReplacing || !this._implementation.isReplacing) {\n          for (i = 0; i < cnt; i++) {\n            this.visit(nodes[i]);\n          }\n\n          return nodes;\n        } // Replacing\n\n\n        var out = [];\n\n        for (i = 0; i < cnt; i++) {\n          var evald = this.visit(nodes[i]);\n\n          if (evald === undefined) {\n            continue;\n          }\n\n          if (!evald.splice) {\n            out.push(evald);\n          } else if (evald.length) {\n            this.flatten(evald, out);\n          }\n        }\n\n        return out;\n      }\n    }, {\n      key: \"flatten\",\n      value: function flatten(arr, out) {\n        if (!out) {\n          out = [];\n        }\n\n        var cnt;\n        var i;\n        var item;\n        var nestedCnt;\n        var j;\n        var nestedItem;\n\n        for (i = 0, cnt = arr.length; i < cnt; i++) {\n          item = arr[i];\n\n          if (item === undefined) {\n            continue;\n          }\n\n          if (!item.splice) {\n            out.push(item);\n            continue;\n          }\n\n          for (j = 0, nestedCnt = item.length; j < nestedCnt; j++) {\n            nestedItem = item[j];\n\n            if (nestedItem === undefined) {\n              continue;\n            }\n\n            if (!nestedItem.splice) {\n              out.push(nestedItem);\n            } else if (nestedItem.length) {\n              this.flatten(nestedItem, out);\n            }\n          }\n        }\n\n        return out;\n      }\n    }]);\n\n    return Visitor;\n  }();\n\n  var ImportSequencer =\n  /*#__PURE__*/\n  function () {\n    function ImportSequencer(onSequencerEmpty) {\n      _classCallCheck(this, ImportSequencer);\n\n      this.imports = [];\n      this.variableImports = [];\n      this._onSequencerEmpty = onSequencerEmpty;\n      this._currentDepth = 0;\n    }\n\n    _createClass(ImportSequencer, [{\n      key: \"addImport\",\n      value: function addImport(callback) {\n        var importSequencer = this;\n        var importItem = {\n          callback: callback,\n          args: null,\n          isReady: false\n        };\n        this.imports.push(importItem);\n        return function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          importItem.args = Array.prototype.slice.call(args, 0);\n          importItem.isReady = true;\n          importSequencer.tryRun();\n        };\n      }\n    }, {\n      key: \"addVariableImport\",\n      value: function addVariableImport(callback) {\n        this.variableImports.push(callback);\n      }\n    }, {\n      key: \"tryRun\",\n      value: function tryRun() {\n        this._currentDepth++;\n\n        try {\n          while (true) {\n            while (this.imports.length > 0) {\n              var importItem = this.imports[0];\n\n              if (!importItem.isReady) {\n                return;\n              }\n\n              this.imports = this.imports.slice(1);\n              importItem.callback.apply(null, importItem.args);\n            }\n\n            if (this.variableImports.length === 0) {\n              break;\n            }\n\n            var variableImport = this.variableImports[0];\n            this.variableImports = this.variableImports.slice(1);\n            variableImport();\n          }\n        } finally {\n          this._currentDepth--;\n        }\n\n        if (this._currentDepth === 0 && this._onSequencerEmpty) {\n          this._onSequencerEmpty();\n        }\n      }\n    }]);\n\n    return ImportSequencer;\n  }();\n\n  var ImportVisitor = function ImportVisitor(importer, finish) {\n    this._visitor = new Visitor(this);\n    this._importer = importer;\n    this._finish = finish;\n    this.context = new contexts.Eval();\n    this.importCount = 0;\n    this.onceFileDetectionMap = {};\n    this.recursionDetector = {};\n    this._sequencer = new ImportSequencer(this._onSequencerEmpty.bind(this));\n  };\n\n  ImportVisitor.prototype = {\n    isReplacing: false,\n    run: function run(root) {\n      try {\n        // process the contents\n        this._visitor.visit(root);\n      } catch (e) {\n        this.error = e;\n      }\n\n      this.isFinished = true;\n\n      this._sequencer.tryRun();\n    },\n    _onSequencerEmpty: function _onSequencerEmpty() {\n      if (!this.isFinished) {\n        return;\n      }\n\n      this._finish(this.error);\n    },\n    visitImport: function visitImport(importNode, visitArgs) {\n      var inlineCSS = importNode.options.inline;\n\n      if (!importNode.css || inlineCSS) {\n        var context = new contexts.Eval(this.context, copyArray(this.context.frames));\n        var importParent = context.frames[0];\n        this.importCount++;\n\n        if (importNode.isVariableImport()) {\n          this._sequencer.addVariableImport(this.processImportNode.bind(this, importNode, context, importParent));\n        } else {\n          this.processImportNode(importNode, context, importParent);\n        }\n      }\n\n      visitArgs.visitDeeper = false;\n    },\n    processImportNode: function processImportNode(importNode, context, importParent) {\n      var evaldImportNode;\n      var inlineCSS = importNode.options.inline;\n\n      try {\n        evaldImportNode = importNode.evalForImport(context);\n      } catch (e) {\n        if (!e.filename) {\n          e.index = importNode.getIndex();\n          e.filename = importNode.fileInfo().filename;\n        } // attempt to eval properly and treat as css\n\n\n        importNode.css = true; // if that fails, this error will be thrown\n\n        importNode.error = e;\n      }\n\n      if (evaldImportNode && (!evaldImportNode.css || inlineCSS)) {\n        if (evaldImportNode.options.multiple) {\n          context.importMultiple = true;\n        } // try appending if we haven't determined if it is css or not\n\n\n        var tryAppendLessExtension = evaldImportNode.css === undefined;\n\n        for (var i = 0; i < importParent.rules.length; i++) {\n          if (importParent.rules[i] === importNode) {\n            importParent.rules[i] = evaldImportNode;\n            break;\n          }\n        }\n\n        var onImported = this.onImported.bind(this, evaldImportNode, context);\n\n        var sequencedOnImported = this._sequencer.addImport(onImported);\n\n        this._importer.push(evaldImportNode.getPath(), tryAppendLessExtension, evaldImportNode.fileInfo(), evaldImportNode.options, sequencedOnImported);\n      } else {\n        this.importCount--;\n\n        if (this.isFinished) {\n          this._sequencer.tryRun();\n        }\n      }\n    },\n    onImported: function onImported(importNode, context, e, root, importedAtRoot, fullPath) {\n      if (e) {\n        if (!e.filename) {\n          e.index = importNode.getIndex();\n          e.filename = importNode.fileInfo().filename;\n        }\n\n        this.error = e;\n      }\n\n      var importVisitor = this;\n      var inlineCSS = importNode.options.inline;\n      var isPlugin = importNode.options.isPlugin;\n      var isOptional = importNode.options.optional;\n      var duplicateImport = importedAtRoot || fullPath in importVisitor.recursionDetector;\n\n      if (!context.importMultiple) {\n        if (duplicateImport) {\n          importNode.skip = true;\n        } else {\n          importNode.skip = function () {\n            if (fullPath in importVisitor.onceFileDetectionMap) {\n              return true;\n            }\n\n            importVisitor.onceFileDetectionMap[fullPath] = true;\n            return false;\n          };\n        }\n      }\n\n      if (!fullPath && isOptional) {\n        importNode.skip = true;\n      }\n\n      if (root) {\n        importNode.root = root;\n        importNode.importedFilename = fullPath;\n\n        if (!inlineCSS && !isPlugin && (context.importMultiple || !duplicateImport)) {\n          importVisitor.recursionDetector[fullPath] = true;\n          var oldContext = this.context;\n          this.context = context;\n\n          try {\n            this._visitor.visit(root);\n          } catch (e) {\n            this.error = e;\n          }\n\n          this.context = oldContext;\n        }\n      }\n\n      importVisitor.importCount--;\n\n      if (importVisitor.isFinished) {\n        importVisitor._sequencer.tryRun();\n      }\n    },\n    visitDeclaration: function visitDeclaration(declNode, visitArgs) {\n      if (declNode.value.type === 'DetachedRuleset') {\n        this.context.frames.unshift(declNode);\n      } else {\n        visitArgs.visitDeeper = false;\n      }\n    },\n    visitDeclarationOut: function visitDeclarationOut(declNode) {\n      if (declNode.value.type === 'DetachedRuleset') {\n        this.context.frames.shift();\n      }\n    },\n    visitAtRule: function visitAtRule(atRuleNode, visitArgs) {\n      this.context.frames.unshift(atRuleNode);\n    },\n    visitAtRuleOut: function visitAtRuleOut(atRuleNode) {\n      this.context.frames.shift();\n    },\n    visitMixinDefinition: function visitMixinDefinition(mixinDefinitionNode, visitArgs) {\n      this.context.frames.unshift(mixinDefinitionNode);\n    },\n    visitMixinDefinitionOut: function visitMixinDefinitionOut(mixinDefinitionNode) {\n      this.context.frames.shift();\n    },\n    visitRuleset: function visitRuleset(rulesetNode, visitArgs) {\n      this.context.frames.unshift(rulesetNode);\n    },\n    visitRulesetOut: function visitRulesetOut(rulesetNode) {\n      this.context.frames.shift();\n    },\n    visitMedia: function visitMedia(mediaNode, visitArgs) {\n      this.context.frames.unshift(mediaNode.rules[0]);\n    },\n    visitMediaOut: function visitMediaOut(mediaNode) {\n      this.context.frames.shift();\n    }\n  };\n\n  var SetTreeVisibilityVisitor =\n  /*#__PURE__*/\n  function () {\n    function SetTreeVisibilityVisitor(visible) {\n      _classCallCheck(this, SetTreeVisibilityVisitor);\n\n      this.visible = visible;\n    }\n\n    _createClass(SetTreeVisibilityVisitor, [{\n      key: \"run\",\n      value: function run(root) {\n        this.visit(root);\n      }\n    }, {\n      key: \"visitArray\",\n      value: function visitArray(nodes) {\n        if (!nodes) {\n          return nodes;\n        }\n\n        var cnt = nodes.length;\n        var i;\n\n        for (i = 0; i < cnt; i++) {\n          this.visit(nodes[i]);\n        }\n\n        return nodes;\n      }\n    }, {\n      key: \"visit\",\n      value: function visit(node) {\n        if (!node) {\n          return node;\n        }\n\n        if (node.constructor === Array) {\n          return this.visitArray(node);\n        }\n\n        if (!node.blocksVisibility || node.blocksVisibility()) {\n          return node;\n        }\n\n        if (this.visible) {\n          node.ensureVisibility();\n        } else {\n          node.ensureInvisibility();\n        }\n\n        node.accept(this);\n        return node;\n      }\n    }]);\n\n    return SetTreeVisibilityVisitor;\n  }();\n\n  /* jshint loopfunc:true */\n\n  var ExtendFinderVisitor =\n  /*#__PURE__*/\n  function () {\n    function ExtendFinderVisitor() {\n      _classCallCheck(this, ExtendFinderVisitor);\n\n      this._visitor = new Visitor(this);\n      this.contexts = [];\n      this.allExtendsStack = [[]];\n    }\n\n    _createClass(ExtendFinderVisitor, [{\n      key: \"run\",\n      value: function run(root) {\n        root = this._visitor.visit(root);\n        root.allExtends = this.allExtendsStack[0];\n        return root;\n      }\n    }, {\n      key: \"visitDeclaration\",\n      value: function visitDeclaration(declNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n      }\n    }, {\n      key: \"visitMixinDefinition\",\n      value: function visitMixinDefinition(mixinDefinitionNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n      }\n    }, {\n      key: \"visitRuleset\",\n      value: function visitRuleset(rulesetNode, visitArgs) {\n        if (rulesetNode.root) {\n          return;\n        }\n\n        var i;\n        var j;\n        var extend;\n        var allSelectorsExtendList = [];\n        var extendList; // get &:extend(.a); rules which apply to all selectors in this ruleset\n\n        var rules = rulesetNode.rules;\n        var ruleCnt = rules ? rules.length : 0;\n\n        for (i = 0; i < ruleCnt; i++) {\n          if (rulesetNode.rules[i] instanceof tree.Extend) {\n            allSelectorsExtendList.push(rules[i]);\n            rulesetNode.extendOnEveryPath = true;\n          }\n        } // now find every selector and apply the extends that apply to all extends\n        // and the ones which apply to an individual extend\n\n\n        var paths = rulesetNode.paths;\n\n        for (i = 0; i < paths.length; i++) {\n          var selectorPath = paths[i];\n          var selector = selectorPath[selectorPath.length - 1];\n          var selExtendList = selector.extendList;\n          extendList = selExtendList ? copyArray(selExtendList).concat(allSelectorsExtendList) : allSelectorsExtendList;\n\n          if (extendList) {\n            extendList = extendList.map(function (allSelectorsExtend) {\n              return allSelectorsExtend.clone();\n            });\n          }\n\n          for (j = 0; j < extendList.length; j++) {\n            this.foundExtends = true;\n            extend = extendList[j];\n            extend.findSelfSelectors(selectorPath);\n            extend.ruleset = rulesetNode;\n\n            if (j === 0) {\n              extend.firstExtendOnThisSelectorPath = true;\n            }\n\n            this.allExtendsStack[this.allExtendsStack.length - 1].push(extend);\n          }\n        }\n\n        this.contexts.push(rulesetNode.selectors);\n      }\n    }, {\n      key: \"visitRulesetOut\",\n      value: function visitRulesetOut(rulesetNode) {\n        if (!rulesetNode.root) {\n          this.contexts.length = this.contexts.length - 1;\n        }\n      }\n    }, {\n      key: \"visitMedia\",\n      value: function visitMedia(mediaNode, visitArgs) {\n        mediaNode.allExtends = [];\n        this.allExtendsStack.push(mediaNode.allExtends);\n      }\n    }, {\n      key: \"visitMediaOut\",\n      value: function visitMediaOut(mediaNode) {\n        this.allExtendsStack.length = this.allExtendsStack.length - 1;\n      }\n    }, {\n      key: \"visitAtRule\",\n      value: function visitAtRule(atRuleNode, visitArgs) {\n        atRuleNode.allExtends = [];\n        this.allExtendsStack.push(atRuleNode.allExtends);\n      }\n    }, {\n      key: \"visitAtRuleOut\",\n      value: function visitAtRuleOut(atRuleNode) {\n        this.allExtendsStack.length = this.allExtendsStack.length - 1;\n      }\n    }]);\n\n    return ExtendFinderVisitor;\n  }();\n\n  var ProcessExtendsVisitor =\n  /*#__PURE__*/\n  function () {\n    function ProcessExtendsVisitor() {\n      _classCallCheck(this, ProcessExtendsVisitor);\n\n      this._visitor = new Visitor(this);\n    }\n\n    _createClass(ProcessExtendsVisitor, [{\n      key: \"run\",\n      value: function run(root) {\n        var extendFinder = new ExtendFinderVisitor();\n        this.extendIndices = {};\n        extendFinder.run(root);\n\n        if (!extendFinder.foundExtends) {\n          return root;\n        }\n\n        root.allExtends = root.allExtends.concat(this.doExtendChaining(root.allExtends, root.allExtends));\n        this.allExtendsStack = [root.allExtends];\n\n        var newRoot = this._visitor.visit(root);\n\n        this.checkExtendsForNonMatched(root.allExtends);\n        return newRoot;\n      }\n    }, {\n      key: \"checkExtendsForNonMatched\",\n      value: function checkExtendsForNonMatched(extendList) {\n        var indices = this.extendIndices;\n        extendList.filter(function (extend) {\n          return !extend.hasFoundMatches && extend.parent_ids.length == 1;\n        }).forEach(function (extend) {\n          var selector = '_unknown_';\n\n          try {\n            selector = extend.selector.toCSS({});\n          } catch (_) {}\n\n          if (!indices[\"\".concat(extend.index, \" \").concat(selector)]) {\n            indices[\"\".concat(extend.index, \" \").concat(selector)] = true;\n            logger.warn(\"extend '\".concat(selector, \"' has no matches\"));\n          }\n        });\n      }\n    }, {\n      key: \"doExtendChaining\",\n      value: function doExtendChaining(extendsList, extendsListTarget, iterationCount) {\n        //\n        // chaining is different from normal extension.. if we extend an extend then we are not just copying, altering\n        // and pasting the selector we would do normally, but we are also adding an extend with the same target selector\n        // this means this new extend can then go and alter other extends\n        //\n        // this method deals with all the chaining work - without it, extend is flat and doesn't work on other extend selectors\n        // this is also the most expensive.. and a match on one selector can cause an extension of a selector we had already\n        // processed if we look at each selector at a time, as is done in visitRuleset\n        var extendIndex;\n        var targetExtendIndex;\n        var matches;\n        var extendsToAdd = [];\n        var newSelector;\n        var extendVisitor = this;\n        var selectorPath;\n        var extend;\n        var targetExtend;\n        var newExtend;\n        iterationCount = iterationCount || 0; // loop through comparing every extend with every target extend.\n        // a target extend is the one on the ruleset we are looking at copy/edit/pasting in place\n        // e.g.  .a:extend(.b) {}  and .b:extend(.c) {} then the first extend extends the second one\n        // and the second is the target.\n        // the separation into two lists allows us to process a subset of chains with a bigger set, as is the\n        // case when processing media queries\n\n        for (extendIndex = 0; extendIndex < extendsList.length; extendIndex++) {\n          for (targetExtendIndex = 0; targetExtendIndex < extendsListTarget.length; targetExtendIndex++) {\n            extend = extendsList[extendIndex];\n            targetExtend = extendsListTarget[targetExtendIndex]; // look for circular references\n\n            if (extend.parent_ids.indexOf(targetExtend.object_id) >= 0) {\n              continue;\n            } // find a match in the target extends self selector (the bit before :extend)\n\n\n            selectorPath = [targetExtend.selfSelectors[0]];\n            matches = extendVisitor.findMatch(extend, selectorPath);\n\n            if (matches.length) {\n              extend.hasFoundMatches = true; // we found a match, so for each self selector..\n\n              extend.selfSelectors.forEach(function (selfSelector) {\n                var info = targetExtend.visibilityInfo(); // process the extend as usual\n\n                newSelector = extendVisitor.extendSelector(matches, selectorPath, selfSelector, extend.isVisible()); // but now we create a new extend from it\n\n                newExtend = new tree.Extend(targetExtend.selector, targetExtend.option, 0, targetExtend.fileInfo(), info);\n                newExtend.selfSelectors = newSelector; // add the extend onto the list of extends for that selector\n\n                newSelector[newSelector.length - 1].extendList = [newExtend]; // record that we need to add it.\n\n                extendsToAdd.push(newExtend);\n                newExtend.ruleset = targetExtend.ruleset; // remember its parents for circular references\n\n                newExtend.parent_ids = newExtend.parent_ids.concat(targetExtend.parent_ids, extend.parent_ids); // only process the selector once.. if we have :extend(.a,.b) then multiple\n                // extends will look at the same selector path, so when extending\n                // we know that any others will be duplicates in terms of what is added to the css\n\n                if (targetExtend.firstExtendOnThisSelectorPath) {\n                  newExtend.firstExtendOnThisSelectorPath = true;\n                  targetExtend.ruleset.paths.push(newSelector);\n                }\n              });\n            }\n          }\n        }\n\n        if (extendsToAdd.length) {\n          // try to detect circular references to stop a stack overflow.\n          // may no longer be needed.\n          this.extendChainCount++;\n\n          if (iterationCount > 100) {\n            var selectorOne = '{unable to calculate}';\n            var selectorTwo = '{unable to calculate}';\n\n            try {\n              selectorOne = extendsToAdd[0].selfSelectors[0].toCSS();\n              selectorTwo = extendsToAdd[0].selector.toCSS();\n            } catch (e) {}\n\n            throw {\n              message: \"extend circular reference detected. One of the circular extends is currently:\".concat(selectorOne, \":extend(\").concat(selectorTwo, \")\")\n            };\n          } // now process the new extends on the existing rules so that we can handle a extending b extending c extending\n          // d extending e...\n\n\n          return extendsToAdd.concat(extendVisitor.doExtendChaining(extendsToAdd, extendsListTarget, iterationCount + 1));\n        } else {\n          return extendsToAdd;\n        }\n      }\n    }, {\n      key: \"visitDeclaration\",\n      value: function visitDeclaration(ruleNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n      }\n    }, {\n      key: \"visitMixinDefinition\",\n      value: function visitMixinDefinition(mixinDefinitionNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n      }\n    }, {\n      key: \"visitSelector\",\n      value: function visitSelector(selectorNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n      }\n    }, {\n      key: \"visitRuleset\",\n      value: function visitRuleset(rulesetNode, visitArgs) {\n        if (rulesetNode.root) {\n          return;\n        }\n\n        var matches;\n        var pathIndex;\n        var extendIndex;\n        var allExtends = this.allExtendsStack[this.allExtendsStack.length - 1];\n        var selectorsToAdd = [];\n        var extendVisitor = this;\n        var selectorPath; // look at each selector path in the ruleset, find any extend matches and then copy, find and replace\n\n        for (extendIndex = 0; extendIndex < allExtends.length; extendIndex++) {\n          for (pathIndex = 0; pathIndex < rulesetNode.paths.length; pathIndex++) {\n            selectorPath = rulesetNode.paths[pathIndex]; // extending extends happens initially, before the main pass\n\n            if (rulesetNode.extendOnEveryPath) {\n              continue;\n            }\n\n            var extendList = selectorPath[selectorPath.length - 1].extendList;\n\n            if (extendList && extendList.length) {\n              continue;\n            }\n\n            matches = this.findMatch(allExtends[extendIndex], selectorPath);\n\n            if (matches.length) {\n              allExtends[extendIndex].hasFoundMatches = true;\n              allExtends[extendIndex].selfSelectors.forEach(function (selfSelector) {\n                var extendedSelectors;\n                extendedSelectors = extendVisitor.extendSelector(matches, selectorPath, selfSelector, allExtends[extendIndex].isVisible());\n                selectorsToAdd.push(extendedSelectors);\n              });\n            }\n          }\n        }\n\n        rulesetNode.paths = rulesetNode.paths.concat(selectorsToAdd);\n      }\n    }, {\n      key: \"findMatch\",\n      value: function findMatch(extend, haystackSelectorPath) {\n        //\n        // look through the haystack selector path to try and find the needle - extend.selector\n        // returns an array of selector matches that can then be replaced\n        //\n        var haystackSelectorIndex;\n        var hackstackSelector;\n        var hackstackElementIndex;\n        var haystackElement;\n        var targetCombinator;\n        var i;\n        var extendVisitor = this;\n        var needleElements = extend.selector.elements;\n        var potentialMatches = [];\n        var potentialMatch;\n        var matches = []; // loop through the haystack elements\n\n        for (haystackSelectorIndex = 0; haystackSelectorIndex < haystackSelectorPath.length; haystackSelectorIndex++) {\n          hackstackSelector = haystackSelectorPath[haystackSelectorIndex];\n\n          for (hackstackElementIndex = 0; hackstackElementIndex < hackstackSelector.elements.length; hackstackElementIndex++) {\n            haystackElement = hackstackSelector.elements[hackstackElementIndex]; // if we allow elements before our match we can add a potential match every time. otherwise only at the first element.\n\n            if (extend.allowBefore || haystackSelectorIndex === 0 && hackstackElementIndex === 0) {\n              potentialMatches.push({\n                pathIndex: haystackSelectorIndex,\n                index: hackstackElementIndex,\n                matched: 0,\n                initialCombinator: haystackElement.combinator\n              });\n            }\n\n            for (i = 0; i < potentialMatches.length; i++) {\n              potentialMatch = potentialMatches[i]; // selectors add \" \" onto the first element. When we use & it joins the selectors together, but if we don't\n              // then each selector in haystackSelectorPath has a space before it added in the toCSS phase. so we need to\n              // work out what the resulting combinator will be\n\n              targetCombinator = haystackElement.combinator.value;\n\n              if (targetCombinator === '' && hackstackElementIndex === 0) {\n                targetCombinator = ' ';\n              } // if we don't match, null our match to indicate failure\n\n\n              if (!extendVisitor.isElementValuesEqual(needleElements[potentialMatch.matched].value, haystackElement.value) || potentialMatch.matched > 0 && needleElements[potentialMatch.matched].combinator.value !== targetCombinator) {\n                potentialMatch = null;\n              } else {\n                potentialMatch.matched++;\n              } // if we are still valid and have finished, test whether we have elements after and whether these are allowed\n\n\n              if (potentialMatch) {\n                potentialMatch.finished = potentialMatch.matched === needleElements.length;\n\n                if (potentialMatch.finished && !extend.allowAfter && (hackstackElementIndex + 1 < hackstackSelector.elements.length || haystackSelectorIndex + 1 < haystackSelectorPath.length)) {\n                  potentialMatch = null;\n                }\n              } // if null we remove, if not, we are still valid, so either push as a valid match or continue\n\n\n              if (potentialMatch) {\n                if (potentialMatch.finished) {\n                  potentialMatch.length = needleElements.length;\n                  potentialMatch.endPathIndex = haystackSelectorIndex;\n                  potentialMatch.endPathElementIndex = hackstackElementIndex + 1; // index after end of match\n\n                  potentialMatches.length = 0; // we don't allow matches to overlap, so start matching again\n\n                  matches.push(potentialMatch);\n                }\n              } else {\n                potentialMatches.splice(i, 1);\n                i--;\n              }\n            }\n          }\n        }\n\n        return matches;\n      }\n    }, {\n      key: \"isElementValuesEqual\",\n      value: function isElementValuesEqual(elementValue1, elementValue2) {\n        if (typeof elementValue1 === 'string' || typeof elementValue2 === 'string') {\n          return elementValue1 === elementValue2;\n        }\n\n        if (elementValue1 instanceof tree.Attribute) {\n          if (elementValue1.op !== elementValue2.op || elementValue1.key !== elementValue2.key) {\n            return false;\n          }\n\n          if (!elementValue1.value || !elementValue2.value) {\n            if (elementValue1.value || elementValue2.value) {\n              return false;\n            }\n\n            return true;\n          }\n\n          elementValue1 = elementValue1.value.value || elementValue1.value;\n          elementValue2 = elementValue2.value.value || elementValue2.value;\n          return elementValue1 === elementValue2;\n        }\n\n        elementValue1 = elementValue1.value;\n        elementValue2 = elementValue2.value;\n\n        if (elementValue1 instanceof tree.Selector) {\n          if (!(elementValue2 instanceof tree.Selector) || elementValue1.elements.length !== elementValue2.elements.length) {\n            return false;\n          }\n\n          for (var i = 0; i < elementValue1.elements.length; i++) {\n            if (elementValue1.elements[i].combinator.value !== elementValue2.elements[i].combinator.value) {\n              if (i !== 0 || (elementValue1.elements[i].combinator.value || ' ') !== (elementValue2.elements[i].combinator.value || ' ')) {\n                return false;\n              }\n            }\n\n            if (!this.isElementValuesEqual(elementValue1.elements[i].value, elementValue2.elements[i].value)) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"extendSelector\",\n      value: function extendSelector(matches, selectorPath, replacementSelector, isVisible) {\n        // for a set of matches, replace each match with the replacement selector\n        var currentSelectorPathIndex = 0;\n        var currentSelectorPathElementIndex = 0;\n        var path = [];\n        var matchIndex;\n        var selector;\n        var firstElement;\n        var match;\n        var newElements;\n\n        for (matchIndex = 0; matchIndex < matches.length; matchIndex++) {\n          match = matches[matchIndex];\n          selector = selectorPath[match.pathIndex];\n          firstElement = new tree.Element(match.initialCombinator, replacementSelector.elements[0].value, replacementSelector.elements[0].isVariable, replacementSelector.elements[0].getIndex(), replacementSelector.elements[0].fileInfo());\n\n          if (match.pathIndex > currentSelectorPathIndex && currentSelectorPathElementIndex > 0) {\n            path[path.length - 1].elements = path[path.length - 1].elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\n            currentSelectorPathElementIndex = 0;\n            currentSelectorPathIndex++;\n          }\n\n          newElements = selector.elements.slice(currentSelectorPathElementIndex, match.index).concat([firstElement]).concat(replacementSelector.elements.slice(1));\n\n          if (currentSelectorPathIndex === match.pathIndex && matchIndex > 0) {\n            path[path.length - 1].elements = path[path.length - 1].elements.concat(newElements);\n          } else {\n            path = path.concat(selectorPath.slice(currentSelectorPathIndex, match.pathIndex));\n            path.push(new tree.Selector(newElements));\n          }\n\n          currentSelectorPathIndex = match.endPathIndex;\n          currentSelectorPathElementIndex = match.endPathElementIndex;\n\n          if (currentSelectorPathElementIndex >= selectorPath[currentSelectorPathIndex].elements.length) {\n            currentSelectorPathElementIndex = 0;\n            currentSelectorPathIndex++;\n          }\n        }\n\n        if (currentSelectorPathIndex < selectorPath.length && currentSelectorPathElementIndex > 0) {\n          path[path.length - 1].elements = path[path.length - 1].elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\n          currentSelectorPathIndex++;\n        }\n\n        path = path.concat(selectorPath.slice(currentSelectorPathIndex, selectorPath.length));\n        path = path.map(function (currentValue) {\n          // we can re-use elements here, because the visibility property matters only for selectors\n          var derived = currentValue.createDerived(currentValue.elements);\n\n          if (isVisible) {\n            derived.ensureVisibility();\n          } else {\n            derived.ensureInvisibility();\n          }\n\n          return derived;\n        });\n        return path;\n      }\n    }, {\n      key: \"visitMedia\",\n      value: function visitMedia(mediaNode, visitArgs) {\n        var newAllExtends = mediaNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\n        newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, mediaNode.allExtends));\n        this.allExtendsStack.push(newAllExtends);\n      }\n    }, {\n      key: \"visitMediaOut\",\n      value: function visitMediaOut(mediaNode) {\n        var lastIndex = this.allExtendsStack.length - 1;\n        this.allExtendsStack.length = lastIndex;\n      }\n    }, {\n      key: \"visitAtRule\",\n      value: function visitAtRule(atRuleNode, visitArgs) {\n        var newAllExtends = atRuleNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\n        newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, atRuleNode.allExtends));\n        this.allExtendsStack.push(newAllExtends);\n      }\n    }, {\n      key: \"visitAtRuleOut\",\n      value: function visitAtRuleOut(atRuleNode) {\n        var lastIndex = this.allExtendsStack.length - 1;\n        this.allExtendsStack.length = lastIndex;\n      }\n    }]);\n\n    return ProcessExtendsVisitor;\n  }();\n\n  var JoinSelectorVisitor =\n  /*#__PURE__*/\n  function () {\n    function JoinSelectorVisitor() {\n      _classCallCheck(this, JoinSelectorVisitor);\n\n      this.contexts = [[]];\n      this._visitor = new Visitor(this);\n    }\n\n    _createClass(JoinSelectorVisitor, [{\n      key: \"run\",\n      value: function run(root) {\n        return this._visitor.visit(root);\n      }\n    }, {\n      key: \"visitDeclaration\",\n      value: function visitDeclaration(declNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n      }\n    }, {\n      key: \"visitMixinDefinition\",\n      value: function visitMixinDefinition(mixinDefinitionNode, visitArgs) {\n        visitArgs.visitDeeper = false;\n      }\n    }, {\n      key: \"visitRuleset\",\n      value: function visitRuleset(rulesetNode, visitArgs) {\n        var context = this.contexts[this.contexts.length - 1];\n        var paths = [];\n        var selectors;\n        this.contexts.push(paths);\n\n        if (!rulesetNode.root) {\n          selectors = rulesetNode.selectors;\n\n          if (selectors) {\n            selectors = selectors.filter(function (selector) {\n              return selector.getIsOutput();\n            });\n            rulesetNode.selectors = selectors.length ? selectors : selectors = null;\n\n            if (selectors) {\n              rulesetNode.joinSelectors(paths, context, selectors);\n            }\n          }\n\n          if (!selectors) {\n            rulesetNode.rules = null;\n          }\n\n          rulesetNode.paths = paths;\n        }\n      }\n    }, {\n      key: \"visitRulesetOut\",\n      value: function visitRulesetOut(rulesetNode) {\n        this.contexts.length = this.contexts.length - 1;\n      }\n    }, {\n      key: \"visitMedia\",\n      value: function visitMedia(mediaNode, visitArgs) {\n        var context = this.contexts[this.contexts.length - 1];\n        mediaNode.rules[0].root = context.length === 0 || context[0].multiMedia;\n      }\n    }, {\n      key: \"visitAtRule\",\n      value: function visitAtRule(atRuleNode, visitArgs) {\n        var context = this.contexts[this.contexts.length - 1];\n\n        if (atRuleNode.rules && atRuleNode.rules.length) {\n          atRuleNode.rules[0].root = atRuleNode.isRooted || context.length === 0 || null;\n        }\n      }\n    }]);\n\n    return JoinSelectorVisitor;\n  }();\n\n  var CSSVisitorUtils =\n  /*#__PURE__*/\n  function () {\n    function CSSVisitorUtils(context) {\n      _classCallCheck(this, CSSVisitorUtils);\n\n      this._visitor = new Visitor(this);\n      this._context = context;\n    }\n\n    _createClass(CSSVisitorUtils, [{\n      key: \"containsSilentNonBlockedChild\",\n      value: function containsSilentNonBlockedChild(bodyRules) {\n        var rule;\n\n        if (!bodyRules) {\n          return false;\n        }\n\n        for (var r = 0; r < bodyRules.length; r++) {\n          rule = bodyRules[r];\n\n          if (rule.isSilent && rule.isSilent(this._context) && !rule.blocksVisibility()) {\n            // the atrule contains something that was referenced (likely by extend)\n            // therefore it needs to be shown in output too\n            return true;\n          }\n        }\n\n        return false;\n      }\n    }, {\n      key: \"keepOnlyVisibleChilds\",\n      value: function keepOnlyVisibleChilds(owner) {\n        if (owner && owner.rules) {\n          owner.rules = owner.rules.filter(function (thing) {\n            return thing.isVisible();\n          });\n        }\n      }\n    }, {\n      key: \"isEmpty\",\n      value: function isEmpty(owner) {\n        return owner && owner.rules ? owner.rules.length === 0 : true;\n      }\n    }, {\n      key: \"hasVisibleSelector\",\n      value: function hasVisibleSelector(rulesetNode) {\n        return rulesetNode && rulesetNode.paths ? rulesetNode.paths.length > 0 : false;\n      }\n    }, {\n      key: \"resolveVisibility\",\n      value: function resolveVisibility(node, originalRules) {\n        if (!node.blocksVisibility()) {\n          if (this.isEmpty(node) && !this.containsSilentNonBlockedChild(originalRules)) {\n            return;\n          }\n\n          return node;\n        }\n\n        var compiledRulesBody = node.rules[0];\n        this.keepOnlyVisibleChilds(compiledRulesBody);\n\n        if (this.isEmpty(compiledRulesBody)) {\n          return;\n        }\n\n        node.ensureVisibility();\n        node.removeVisibilityBlock();\n        return node;\n      }\n    }, {\n      key: \"isVisibleRuleset\",\n      value: function isVisibleRuleset(rulesetNode) {\n        if (rulesetNode.firstRoot) {\n          return true;\n        }\n\n        if (this.isEmpty(rulesetNode)) {\n          return false;\n        }\n\n        if (!rulesetNode.root && !this.hasVisibleSelector(rulesetNode)) {\n          return false;\n        }\n\n        return true;\n      }\n    }]);\n\n    return CSSVisitorUtils;\n  }();\n\n  var ToCSSVisitor = function ToCSSVisitor(context) {\n    this._visitor = new Visitor(this);\n    this._context = context;\n    this.utils = new CSSVisitorUtils(context);\n  };\n\n  ToCSSVisitor.prototype = {\n    isReplacing: true,\n    run: function run(root) {\n      return this._visitor.visit(root);\n    },\n    visitDeclaration: function visitDeclaration(declNode, visitArgs) {\n      if (declNode.blocksVisibility() || declNode.variable) {\n        return;\n      }\n\n      return declNode;\n    },\n    visitMixinDefinition: function visitMixinDefinition(mixinNode, visitArgs) {\n      // mixin definitions do not get eval'd - this means they keep state\n      // so we have to clear that state here so it isn't used if toCSS is called twice\n      mixinNode.frames = [];\n    },\n    visitExtend: function visitExtend(extendNode, visitArgs) {},\n    visitComment: function visitComment(commentNode, visitArgs) {\n      if (commentNode.blocksVisibility() || commentNode.isSilent(this._context)) {\n        return;\n      }\n\n      return commentNode;\n    },\n    visitMedia: function visitMedia(mediaNode, visitArgs) {\n      var originalRules = mediaNode.rules[0].rules;\n      mediaNode.accept(this._visitor);\n      visitArgs.visitDeeper = false;\n      return this.utils.resolveVisibility(mediaNode, originalRules);\n    },\n    visitImport: function visitImport(importNode, visitArgs) {\n      if (importNode.blocksVisibility()) {\n        return;\n      }\n\n      return importNode;\n    },\n    visitAtRule: function visitAtRule(atRuleNode, visitArgs) {\n      if (atRuleNode.rules && atRuleNode.rules.length) {\n        return this.visitAtRuleWithBody(atRuleNode, visitArgs);\n      } else {\n        return this.visitAtRuleWithoutBody(atRuleNode, visitArgs);\n      }\n    },\n    visitAnonymous: function visitAnonymous(anonymousNode, visitArgs) {\n      if (!anonymousNode.blocksVisibility()) {\n        anonymousNode.accept(this._visitor);\n        return anonymousNode;\n      }\n    },\n    visitAtRuleWithBody: function visitAtRuleWithBody(atRuleNode, visitArgs) {\n      // if there is only one nested ruleset and that one has no path, then it is\n      // just fake ruleset\n      function hasFakeRuleset(atRuleNode) {\n        var bodyRules = atRuleNode.rules;\n        return bodyRules.length === 1 && (!bodyRules[0].paths || bodyRules[0].paths.length === 0);\n      }\n\n      function getBodyRules(atRuleNode) {\n        var nodeRules = atRuleNode.rules;\n\n        if (hasFakeRuleset(atRuleNode)) {\n          return nodeRules[0].rules;\n        }\n\n        return nodeRules;\n      } // it is still true that it is only one ruleset in array\n      // this is last such moment\n      // process childs\n\n\n      var originalRules = getBodyRules(atRuleNode);\n      atRuleNode.accept(this._visitor);\n      visitArgs.visitDeeper = false;\n\n      if (!this.utils.isEmpty(atRuleNode)) {\n        this._mergeRules(atRuleNode.rules[0].rules);\n      }\n\n      return this.utils.resolveVisibility(atRuleNode, originalRules);\n    },\n    visitAtRuleWithoutBody: function visitAtRuleWithoutBody(atRuleNode, visitArgs) {\n      if (atRuleNode.blocksVisibility()) {\n        return;\n      }\n\n      if (atRuleNode.name === '@charset') {\n        // Only output the debug info together with subsequent @charset definitions\n        // a comment (or @media statement) before the actual @charset atrule would\n        // be considered illegal css as it has to be on the first line\n        if (this.charset) {\n          if (atRuleNode.debugInfo) {\n            var comment = new tree.Comment(\"/* \".concat(atRuleNode.toCSS(this._context).replace(/\\n/g, ''), \" */\\n\"));\n            comment.debugInfo = atRuleNode.debugInfo;\n            return this._visitor.visit(comment);\n          }\n\n          return;\n        }\n\n        this.charset = true;\n      }\n\n      return atRuleNode;\n    },\n    checkValidNodes: function checkValidNodes(rules, isRoot) {\n      if (!rules) {\n        return;\n      }\n\n      for (var i = 0; i < rules.length; i++) {\n        var ruleNode = rules[i];\n\n        if (isRoot && ruleNode instanceof tree.Declaration && !ruleNode.variable) {\n          throw {\n            message: 'Properties must be inside selector blocks. They cannot be in the root',\n            index: ruleNode.getIndex(),\n            filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename\n          };\n        }\n\n        if (ruleNode instanceof tree.Call) {\n          throw {\n            message: \"Function '\".concat(ruleNode.name, \"' is undefined\"),\n            index: ruleNode.getIndex(),\n            filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename\n          };\n        }\n\n        if (ruleNode.type && !ruleNode.allowRoot) {\n          throw {\n            message: \"\".concat(ruleNode.type, \" node returned by a function is not valid here\"),\n            index: ruleNode.getIndex(),\n            filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename\n          };\n        }\n      }\n    },\n    visitRuleset: function visitRuleset(rulesetNode, visitArgs) {\n      // at this point rulesets are nested into each other\n      var rule;\n      var rulesets = [];\n      this.checkValidNodes(rulesetNode.rules, rulesetNode.firstRoot);\n\n      if (!rulesetNode.root) {\n        // remove invisible paths\n        this._compileRulesetPaths(rulesetNode); // remove rulesets from this ruleset body and compile them separately\n\n\n        var nodeRules = rulesetNode.rules;\n        var nodeRuleCnt = nodeRules ? nodeRules.length : 0;\n\n        for (var i = 0; i < nodeRuleCnt;) {\n          rule = nodeRules[i];\n\n          if (rule && rule.rules) {\n            // visit because we are moving them out from being a child\n            rulesets.push(this._visitor.visit(rule));\n            nodeRules.splice(i, 1);\n            nodeRuleCnt--;\n            continue;\n          }\n\n          i++;\n        } // accept the visitor to remove rules and refactor itself\n        // then we can decide nogw whether we want it or not\n        // compile body\n\n\n        if (nodeRuleCnt > 0) {\n          rulesetNode.accept(this._visitor);\n        } else {\n          rulesetNode.rules = null;\n        }\n\n        visitArgs.visitDeeper = false;\n      } else {\n        // if (! rulesetNode.root) {\n        rulesetNode.accept(this._visitor);\n        visitArgs.visitDeeper = false;\n      }\n\n      if (rulesetNode.rules) {\n        this._mergeRules(rulesetNode.rules);\n\n        this._removeDuplicateRules(rulesetNode.rules);\n      } // now decide whether we keep the ruleset\n\n\n      if (this.utils.isVisibleRuleset(rulesetNode)) {\n        rulesetNode.ensureVisibility();\n        rulesets.splice(0, 0, rulesetNode);\n      }\n\n      if (rulesets.length === 1) {\n        return rulesets[0];\n      }\n\n      return rulesets;\n    },\n    _compileRulesetPaths: function _compileRulesetPaths(rulesetNode) {\n      if (rulesetNode.paths) {\n        rulesetNode.paths = rulesetNode.paths.filter(function (p) {\n          var i;\n\n          if (p[0].elements[0].combinator.value === ' ') {\n            p[0].elements[0].combinator = new tree.Combinator('');\n          }\n\n          for (i = 0; i < p.length; i++) {\n            if (p[i].isVisible() && p[i].getIsOutput()) {\n              return true;\n            }\n          }\n\n          return false;\n        });\n      }\n    },\n    _removeDuplicateRules: function _removeDuplicateRules(rules) {\n      if (!rules) {\n        return;\n      } // remove duplicates\n\n\n      var ruleCache = {};\n      var ruleList;\n      var rule;\n      var i;\n\n      for (i = rules.length - 1; i >= 0; i--) {\n        rule = rules[i];\n\n        if (rule instanceof tree.Declaration) {\n          if (!ruleCache[rule.name]) {\n            ruleCache[rule.name] = rule;\n          } else {\n            ruleList = ruleCache[rule.name];\n\n            if (ruleList instanceof tree.Declaration) {\n              ruleList = ruleCache[rule.name] = [ruleCache[rule.name].toCSS(this._context)];\n            }\n\n            var ruleCSS = rule.toCSS(this._context);\n\n            if (ruleList.indexOf(ruleCSS) !== -1) {\n              rules.splice(i, 1);\n            } else {\n              ruleList.push(ruleCSS);\n            }\n          }\n        }\n      }\n    },\n    _mergeRules: function _mergeRules(rules) {\n      if (!rules) {\n        return;\n      }\n\n      var groups = {};\n      var groupsArr = [];\n\n      for (var i = 0; i < rules.length; i++) {\n        var rule = rules[i];\n\n        if (rule.merge) {\n          var key = rule.name;\n          groups[key] ? rules.splice(i--, 1) : groupsArr.push(groups[key] = []);\n          groups[key].push(rule);\n        }\n      }\n\n      groupsArr.forEach(function (group) {\n        if (group.length > 0) {\n          var result = group[0];\n          var space = [];\n          var comma = [new tree.Expression(space)];\n          group.forEach(function (rule) {\n            if (rule.merge === '+' && space.length > 0) {\n              comma.push(new tree.Expression(space = []));\n            }\n\n            space.push(rule.value);\n            result.important = result.important || rule.important;\n          });\n          result.value = new tree.Value(comma);\n        }\n      });\n    }\n  };\n\n  var visitors = {\n    Visitor: Visitor,\n    ImportVisitor: ImportVisitor,\n    MarkVisibleSelectorsVisitor: SetTreeVisibilityVisitor,\n    ExtendVisitor: ProcessExtendsVisitor,\n    JoinSelectorVisitor: JoinSelectorVisitor,\n    ToCSSVisitor: ToCSSVisitor\n  };\n\n  // Split the input into chunks.\n  var chunker = (function (input, fail) {\n    var len = input.length;\n    var level = 0;\n    var parenLevel = 0;\n    var lastOpening;\n    var lastOpeningParen;\n    var lastMultiComment;\n    var lastMultiCommentEndBrace;\n    var chunks = [];\n    var emitFrom = 0;\n    var chunkerCurrentIndex;\n    var currentChunkStartIndex;\n    var cc;\n    var cc2;\n    var matched;\n\n    function emitChunk(force) {\n      var len = chunkerCurrentIndex - emitFrom;\n\n      if (len < 512 && !force || !len) {\n        return;\n      }\n\n      chunks.push(input.slice(emitFrom, chunkerCurrentIndex + 1));\n      emitFrom = chunkerCurrentIndex + 1;\n    }\n\n    for (chunkerCurrentIndex = 0; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n      cc = input.charCodeAt(chunkerCurrentIndex);\n\n      if (cc >= 97 && cc <= 122 || cc < 34) {\n        // a-z or whitespace\n        continue;\n      }\n\n      switch (cc) {\n        case 40:\n          // (\n          parenLevel++;\n          lastOpeningParen = chunkerCurrentIndex;\n          continue;\n\n        case 41:\n          // )\n          if (--parenLevel < 0) {\n            return fail('missing opening `(`', chunkerCurrentIndex);\n          }\n\n          continue;\n\n        case 59:\n          // ;\n          if (!parenLevel) {\n            emitChunk();\n          }\n\n          continue;\n\n        case 123:\n          // {\n          level++;\n          lastOpening = chunkerCurrentIndex;\n          continue;\n\n        case 125:\n          // }\n          if (--level < 0) {\n            return fail('missing opening `{`', chunkerCurrentIndex);\n          }\n\n          if (!level && !parenLevel) {\n            emitChunk();\n          }\n\n          continue;\n\n        case 92:\n          // \\\n          if (chunkerCurrentIndex < len - 1) {\n            chunkerCurrentIndex++;\n            continue;\n          }\n\n          return fail('unescaped `\\\\`', chunkerCurrentIndex);\n\n        case 34:\n        case 39:\n        case 96:\n          // \", ' and `\n          matched = 0;\n          currentChunkStartIndex = chunkerCurrentIndex;\n\n          for (chunkerCurrentIndex = chunkerCurrentIndex + 1; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n            cc2 = input.charCodeAt(chunkerCurrentIndex);\n\n            if (cc2 > 96) {\n              continue;\n            }\n\n            if (cc2 == cc) {\n              matched = 1;\n              break;\n            }\n\n            if (cc2 == 92) {\n              // \\\n              if (chunkerCurrentIndex == len - 1) {\n                return fail('unescaped `\\\\`', chunkerCurrentIndex);\n              }\n\n              chunkerCurrentIndex++;\n            }\n          }\n\n          if (matched) {\n            continue;\n          }\n\n          return fail(\"unmatched `\".concat(String.fromCharCode(cc), \"`\"), currentChunkStartIndex);\n\n        case 47:\n          // /, check for comment\n          if (parenLevel || chunkerCurrentIndex == len - 1) {\n            continue;\n          }\n\n          cc2 = input.charCodeAt(chunkerCurrentIndex + 1);\n\n          if (cc2 == 47) {\n            // //, find lnfeed\n            for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n              cc2 = input.charCodeAt(chunkerCurrentIndex);\n\n              if (cc2 <= 13 && (cc2 == 10 || cc2 == 13)) {\n                break;\n              }\n            }\n          } else if (cc2 == 42) {\n            // /*, find */\n            lastMultiComment = currentChunkStartIndex = chunkerCurrentIndex;\n\n            for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len - 1; chunkerCurrentIndex++) {\n              cc2 = input.charCodeAt(chunkerCurrentIndex);\n\n              if (cc2 == 125) {\n                lastMultiCommentEndBrace = chunkerCurrentIndex;\n              }\n\n              if (cc2 != 42) {\n                continue;\n              }\n\n              if (input.charCodeAt(chunkerCurrentIndex + 1) == 47) {\n                break;\n              }\n            }\n\n            if (chunkerCurrentIndex == len - 1) {\n              return fail('missing closing `*/`', currentChunkStartIndex);\n            }\n\n            chunkerCurrentIndex++;\n          }\n\n          continue;\n\n        case 42:\n          // *, check for unmatched */\n          if (chunkerCurrentIndex < len - 1 && input.charCodeAt(chunkerCurrentIndex + 1) == 47) {\n            return fail('unmatched `/*`', chunkerCurrentIndex);\n          }\n\n          continue;\n      }\n    }\n\n    if (level !== 0) {\n      if (lastMultiComment > lastOpening && lastMultiCommentEndBrace > lastMultiComment) {\n        return fail('missing closing `}` or `*/`', lastOpening);\n      } else {\n        return fail('missing closing `}`', lastOpening);\n      }\n    } else if (parenLevel !== 0) {\n      return fail('missing closing `)`', lastOpeningParen);\n    }\n\n    emitChunk(true);\n    return chunks;\n  });\n\n  var getParserInput = (function () {\n    var // Less input string\n    input;\n    var // current chunk\n    j;\n    var // holds state for backtracking\n    saveStack = [];\n    var // furthest index the parser has gone to\n    furthest;\n    var // if this is furthest we got to, this is the probably cause\n    furthestPossibleErrorMessage;\n    var // chunkified input\n    chunks;\n    var // current chunk\n    current;\n    var // index of current chunk, in `input`\n    currentPos;\n    var parserInput = {};\n    var CHARCODE_SPACE = 32;\n    var CHARCODE_TAB = 9;\n    var CHARCODE_LF = 10;\n    var CHARCODE_CR = 13;\n    var CHARCODE_PLUS = 43;\n    var CHARCODE_COMMA = 44;\n    var CHARCODE_FORWARD_SLASH = 47;\n    var CHARCODE_9 = 57;\n\n    function skipWhitespace(length) {\n      var oldi = parserInput.i;\n      var oldj = j;\n      var curr = parserInput.i - currentPos;\n      var endIndex = parserInput.i + current.length - curr;\n      var mem = parserInput.i += length;\n      var inp = input;\n      var c;\n      var nextChar;\n      var comment;\n\n      for (; parserInput.i < endIndex; parserInput.i++) {\n        c = inp.charCodeAt(parserInput.i);\n\n        if (parserInput.autoCommentAbsorb && c === CHARCODE_FORWARD_SLASH) {\n          nextChar = inp.charAt(parserInput.i + 1);\n\n          if (nextChar === '/') {\n            comment = {\n              index: parserInput.i,\n              isLineComment: true\n            };\n            var nextNewLine = inp.indexOf('\\n', parserInput.i + 2);\n\n            if (nextNewLine < 0) {\n              nextNewLine = endIndex;\n            }\n\n            parserInput.i = nextNewLine;\n            comment.text = inp.substr(comment.index, parserInput.i - comment.index);\n            parserInput.commentStore.push(comment);\n            continue;\n          } else if (nextChar === '*') {\n            var nextStarSlash = inp.indexOf('*/', parserInput.i + 2);\n\n            if (nextStarSlash >= 0) {\n              comment = {\n                index: parserInput.i,\n                text: inp.substr(parserInput.i, nextStarSlash + 2 - parserInput.i),\n                isLineComment: false\n              };\n              parserInput.i += comment.text.length - 1;\n              parserInput.commentStore.push(comment);\n              continue;\n            }\n          }\n\n          break;\n        }\n\n        if (c !== CHARCODE_SPACE && c !== CHARCODE_LF && c !== CHARCODE_TAB && c !== CHARCODE_CR) {\n          break;\n        }\n      }\n\n      current = current.slice(length + parserInput.i - mem + curr);\n      currentPos = parserInput.i;\n\n      if (!current.length) {\n        if (j < chunks.length - 1) {\n          current = chunks[++j];\n          skipWhitespace(0); // skip space at the beginning of a chunk\n\n          return true; // things changed\n        }\n\n        parserInput.finished = true;\n      }\n\n      return oldi !== parserInput.i || oldj !== j;\n    }\n\n    parserInput.save = function () {\n      currentPos = parserInput.i;\n      saveStack.push({\n        current: current,\n        i: parserInput.i,\n        j: j\n      });\n    };\n\n    parserInput.restore = function (possibleErrorMessage) {\n      if (parserInput.i > furthest || parserInput.i === furthest && possibleErrorMessage && !furthestPossibleErrorMessage) {\n        furthest = parserInput.i;\n        furthestPossibleErrorMessage = possibleErrorMessage;\n      }\n\n      var state = saveStack.pop();\n      current = state.current;\n      currentPos = parserInput.i = state.i;\n      j = state.j;\n    };\n\n    parserInput.forget = function () {\n      saveStack.pop();\n    };\n\n    parserInput.isWhitespace = function (offset) {\n      var pos = parserInput.i + (offset || 0);\n      var code = input.charCodeAt(pos);\n      return code === CHARCODE_SPACE || code === CHARCODE_CR || code === CHARCODE_TAB || code === CHARCODE_LF;\n    }; // Specialization of $(tok)\n\n\n    parserInput.$re = function (tok) {\n      if (parserInput.i > currentPos) {\n        current = current.slice(parserInput.i - currentPos);\n        currentPos = parserInput.i;\n      }\n\n      var m = tok.exec(current);\n\n      if (!m) {\n        return null;\n      }\n\n      skipWhitespace(m[0].length);\n\n      if (typeof m === 'string') {\n        return m;\n      }\n\n      return m.length === 1 ? m[0] : m;\n    };\n\n    parserInput.$char = function (tok) {\n      if (input.charAt(parserInput.i) !== tok) {\n        return null;\n      }\n\n      skipWhitespace(1);\n      return tok;\n    };\n\n    parserInput.$str = function (tok) {\n      var tokLength = tok.length; // https://jsperf.com/string-startswith/21\n\n      for (var i = 0; i < tokLength; i++) {\n        if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {\n          return null;\n        }\n      }\n\n      skipWhitespace(tokLength);\n      return tok;\n    };\n\n    parserInput.$quoted = function (loc) {\n      var pos = loc || parserInput.i;\n      var startChar = input.charAt(pos);\n\n      if (startChar !== '\\'' && startChar !== '\"') {\n        return;\n      }\n\n      var length = input.length;\n      var currentPosition = pos;\n\n      for (var i = 1; i + currentPosition < length; i++) {\n        var nextChar = input.charAt(i + currentPosition);\n\n        switch (nextChar) {\n          case '\\\\':\n            i++;\n            continue;\n\n          case '\\r':\n          case '\\n':\n            break;\n\n          case startChar:\n            var str = input.substr(currentPosition, i + 1);\n\n            if (!loc && loc !== 0) {\n              skipWhitespace(i + 1);\n              return str;\n            }\n\n            return [startChar, str];\n\n          default:\n        }\n      }\n\n      return null;\n    };\n    /**\n     * Permissive parsing. Ignores everything except matching {} [] () and quotes\n     * until matching token (outside of blocks)\n     */\n\n\n    parserInput.$parseUntil = function (tok) {\n      var quote = '';\n      var returnVal = null;\n      var inComment = false;\n      var blockDepth = 0;\n      var blockStack = [];\n      var parseGroups = [];\n      var length = input.length;\n      var startPos = parserInput.i;\n      var lastPos = parserInput.i;\n      var i = parserInput.i;\n      var loop = true;\n      var testChar;\n\n      if (typeof tok === 'string') {\n        testChar = function testChar(char) {\n          return char === tok;\n        };\n      } else {\n        testChar = function testChar(char) {\n          return tok.test(char);\n        };\n      }\n\n      do {\n        var nextChar = input.charAt(i);\n\n        if (blockDepth === 0 && testChar(nextChar)) {\n          returnVal = input.substr(lastPos, i - lastPos);\n\n          if (returnVal) {\n            parseGroups.push(returnVal);\n          } else {\n            parseGroups.push(' ');\n          }\n\n          returnVal = parseGroups;\n          skipWhitespace(i - startPos);\n          loop = false;\n        } else {\n          if (inComment) {\n            if (nextChar === '*' && input.charAt(i + 1) === '/') {\n              i++;\n              blockDepth--;\n              inComment = false;\n            }\n\n            i++;\n            continue;\n          }\n\n          switch (nextChar) {\n            case '\\\\':\n              i++;\n              nextChar = input.charAt(i);\n              parseGroups.push(input.substr(lastPos, i - lastPos + 1));\n              lastPos = i + 1;\n              break;\n\n            case '/':\n              if (input.charAt(i + 1) === '*') {\n                i++;\n                inComment = true;\n                blockDepth++;\n              }\n\n              break;\n\n            case '\\'':\n            case '\"':\n              quote = parserInput.$quoted(i);\n\n              if (quote) {\n                parseGroups.push(input.substr(lastPos, i - lastPos), quote);\n                i += quote[1].length - 1;\n                lastPos = i + 1;\n              } else {\n                skipWhitespace(i - startPos);\n                returnVal = nextChar;\n                loop = false;\n              }\n\n              break;\n\n            case '{':\n              blockStack.push('}');\n              blockDepth++;\n              break;\n\n            case '(':\n              blockStack.push(')');\n              blockDepth++;\n              break;\n\n            case '[':\n              blockStack.push(']');\n              blockDepth++;\n              break;\n\n            case '}':\n            case ')':\n            case ']':\n              var expected = blockStack.pop();\n\n              if (nextChar === expected) {\n                blockDepth--;\n              } else {\n                // move the parser to the error and return expected\n                skipWhitespace(i - startPos);\n                returnVal = expected;\n                loop = false;\n              }\n\n          }\n\n          i++;\n\n          if (i > length) {\n            loop = false;\n          }\n        }\n      } while (loop);\n\n      return returnVal ? returnVal : null;\n    };\n\n    parserInput.autoCommentAbsorb = true;\n    parserInput.commentStore = [];\n    parserInput.finished = false; // Same as $(), but don't change the state of the parser,\n    // just return the match.\n\n    parserInput.peek = function (tok) {\n      if (typeof tok === 'string') {\n        // https://jsperf.com/string-startswith/21\n        for (var i = 0; i < tok.length; i++) {\n          if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {\n            return false;\n          }\n        }\n\n        return true;\n      } else {\n        return tok.test(current);\n      }\n    }; // Specialization of peek()\n    // TODO remove or change some currentChar calls to peekChar\n\n\n    parserInput.peekChar = function (tok) {\n      return input.charAt(parserInput.i) === tok;\n    };\n\n    parserInput.currentChar = function () {\n      return input.charAt(parserInput.i);\n    };\n\n    parserInput.prevChar = function () {\n      return input.charAt(parserInput.i - 1);\n    };\n\n    parserInput.getInput = function () {\n      return input;\n    };\n\n    parserInput.peekNotNumeric = function () {\n      var c = input.charCodeAt(parserInput.i); // Is the first char of the dimension 0-9, '.', '+' or '-'\n\n      return c > CHARCODE_9 || c < CHARCODE_PLUS || c === CHARCODE_FORWARD_SLASH || c === CHARCODE_COMMA;\n    };\n\n    parserInput.start = function (str, chunkInput, failFunction) {\n      input = str;\n      parserInput.i = j = currentPos = furthest = 0; // chunking apparently makes things quicker (but my tests indicate\n      // it might actually make things slower in node at least)\n      // and it is a non-perfect parse - it can't recognise\n      // unquoted urls, meaning it can't distinguish comments\n      // meaning comments with quotes or {}() in them get 'counted'\n      // and then lead to parse errors.\n      // In addition if the chunking chunks in the wrong place we might\n      // not be able to parse a parser statement in one go\n      // this is officially deprecated but can be switched on via an option\n      // in the case it causes too much performance issues.\n\n      if (chunkInput) {\n        chunks = chunker(str, failFunction);\n      } else {\n        chunks = [str];\n      }\n\n      current = chunks[0];\n      skipWhitespace(0);\n    };\n\n    parserInput.end = function () {\n      var message;\n      var isFinished = parserInput.i >= input.length;\n\n      if (parserInput.i < furthest) {\n        message = furthestPossibleErrorMessage;\n        parserInput.i = furthest;\n      }\n\n      return {\n        isFinished: isFinished,\n        furthest: parserInput.i,\n        furthestPossibleErrorMessage: message,\n        furthestReachedEnd: parserInput.i >= input.length - 1,\n        furthestChar: input[parserInput.i]\n      };\n    };\n\n    return parserInput;\n  });\n\n  // less.js - parser\n  //\n  //    A relatively straight-forward predictive parser.\n  //    There is no tokenization/lexing stage, the input is parsed\n  //    in one sweep.\n  //\n  //    To make the parser fast enough to run in the browser, several\n  //    optimization had to be made:\n  //\n  //    - Matching and slicing on a huge input is often cause of slowdowns.\n  //      The solution is to chunkify the input into smaller strings.\n  //      The chunks are stored in the `chunks` var,\n  //      `j` holds the current chunk index, and `currentPos` holds\n  //      the index of the current chunk in relation to `input`.\n  //      This gives us an almost 4x speed-up.\n  //\n  //    - In many cases, we don't need to match individual tokens;\n  //      for example, if a value doesn't hold any variables, operations\n  //      or dynamic references, the parser can effectively 'skip' it,\n  //      treating it as a literal.\n  //      An example would be '1px solid #000' - which evaluates to itself,\n  //      we don't need to know what the individual components are.\n  //      The drawback, of course is that you don't get the benefits of\n  //      syntax-checking on the CSS. This gives us a 50% speed-up in the parser,\n  //      and a smaller speed-up in the code-gen.\n  //\n  //\n  //    Token matching is done with the `$` function, which either takes\n  //    a terminal string or regexp, or a non-terminal function to call.\n  //    It also takes care of moving all the indices forwards.\n  //\n\n  var Parser = function Parser(context, imports, fileInfo) {\n    var parsers;\n    var parserInput = getParserInput();\n\n    function error(msg, type) {\n      throw new LessError({\n        index: parserInput.i,\n        filename: fileInfo.filename,\n        type: type || 'Syntax',\n        message: msg\n      }, imports);\n    }\n\n    function expect(arg, msg) {\n      // some older browsers return typeof 'function' for RegExp\n      var result = arg instanceof Function ? arg.call(parsers) : parserInput.$re(arg);\n\n      if (result) {\n        return result;\n      }\n\n      error(msg || (typeof arg === 'string' ? \"expected '\".concat(arg, \"' got '\").concat(parserInput.currentChar(), \"'\") : 'unexpected token'));\n    } // Specialization of expect()\n\n\n    function expectChar(arg, msg) {\n      if (parserInput.$char(arg)) {\n        return arg;\n      }\n\n      error(msg || \"expected '\".concat(arg, \"' got '\").concat(parserInput.currentChar(), \"'\"));\n    }\n\n    function getDebugInfo(index) {\n      var filename = fileInfo.filename;\n      return {\n        lineNumber: getLocation(index, parserInput.getInput()).line + 1,\n        fileName: filename\n      };\n    }\n    /**\n     *  Used after initial parsing to create nodes on the fly\n     * \n     *  @param {String} str          - string to parse \n     *  @param {Array}  parseList    - array of parsers to run input through e.g. [\"value\", \"important\"]\n     *  @param {Number} currentIndex - start number to begin indexing\n     *  @param {Object} fileInfo     - fileInfo to attach to created nodes\n     */\n\n\n    function parseNode(str, parseList, currentIndex, fileInfo, callback) {\n      var result;\n      var returnNodes = [];\n      var parser = parserInput;\n\n      try {\n        parser.start(str, false, function fail(msg, index) {\n          callback({\n            message: msg,\n            index: index + currentIndex\n          });\n        });\n\n        for (var x = 0, p, i; p = parseList[x]; x++) {\n          i = parser.i;\n          result = parsers[p]();\n\n          if (result) {\n            try {\n              result._index = i + currentIndex;\n              result._fileInfo = fileInfo;\n            } catch (e) {}\n\n            returnNodes.push(result);\n          } else {\n            returnNodes.push(null);\n          }\n        }\n\n        var endInfo = parser.end();\n\n        if (endInfo.isFinished) {\n          callback(null, returnNodes);\n        } else {\n          callback(true, null);\n        }\n      } catch (e) {\n        throw new LessError({\n          index: e.index + currentIndex,\n          message: e.message\n        }, imports, fileInfo.filename);\n      }\n    } //\n    // The Parser\n    //\n\n\n    return {\n      parserInput: parserInput,\n      imports: imports,\n      fileInfo: fileInfo,\n      parseNode: parseNode,\n      //\n      // Parse an input string into an abstract syntax tree,\n      // @param str A string containing 'less' markup\n      // @param callback call `callback` when done.\n      // @param [additionalData] An optional map which can contains vars - a map (key, value) of variables to apply\n      //\n      parse: function parse(str, callback, additionalData) {\n        var root;\n        var error = null;\n        var globalVars;\n        var modifyVars;\n        var ignored;\n        var preText = '';\n        globalVars = additionalData && additionalData.globalVars ? \"\".concat(Parser.serializeVars(additionalData.globalVars), \"\\n\") : '';\n        modifyVars = additionalData && additionalData.modifyVars ? \"\\n\".concat(Parser.serializeVars(additionalData.modifyVars)) : '';\n\n        if (context.pluginManager) {\n          var preProcessors = context.pluginManager.getPreProcessors();\n\n          for (var i = 0; i < preProcessors.length; i++) {\n            str = preProcessors[i].process(str, {\n              context: context,\n              imports: imports,\n              fileInfo: fileInfo\n            });\n          }\n        }\n\n        if (globalVars || additionalData && additionalData.banner) {\n          preText = (additionalData && additionalData.banner ? additionalData.banner : '') + globalVars;\n          ignored = imports.contentsIgnoredChars;\n          ignored[fileInfo.filename] = ignored[fileInfo.filename] || 0;\n          ignored[fileInfo.filename] += preText.length;\n        }\n\n        str = str.replace(/\\r\\n?/g, '\\n'); // Remove potential UTF Byte Order Mark\n\n        str = preText + str.replace(/^\\uFEFF/, '') + modifyVars;\n        imports.contents[fileInfo.filename] = str; // Start with the primary rule.\n        // The whole syntax tree is held under a Ruleset node,\n        // with the `root` property set to true, so no `{}` are\n        // output. The callback is called when the input is parsed.\n\n        try {\n          parserInput.start(str, context.chunkInput, function fail(msg, index) {\n            throw new LessError({\n              index: index,\n              type: 'Parse',\n              message: msg,\n              filename: fileInfo.filename\n            }, imports);\n          });\n          tree.Node.prototype.parse = this;\n          root = new tree.Ruleset(null, this.parsers.primary());\n          tree.Node.prototype.rootNode = root;\n          root.root = true;\n          root.firstRoot = true;\n          root.functionRegistry = functionRegistry.inherit();\n        } catch (e) {\n          return callback(new LessError(e, imports, fileInfo.filename));\n        } // If `i` is smaller than the `input.length - 1`,\n        // it means the parser wasn't able to parse the whole\n        // string, so we've got a parsing error.\n        //\n        // We try to extract a \\n delimited string,\n        // showing the line where the parse error occurred.\n        // We split it up into two parts (the part which parsed,\n        // and the part which didn't), so we can color them differently.\n\n\n        var endInfo = parserInput.end();\n\n        if (!endInfo.isFinished) {\n          var message = endInfo.furthestPossibleErrorMessage;\n\n          if (!message) {\n            message = 'Unrecognised input';\n\n            if (endInfo.furthestChar === '}') {\n              message += '. Possibly missing opening \\'{\\'';\n            } else if (endInfo.furthestChar === ')') {\n              message += '. Possibly missing opening \\'(\\'';\n            } else if (endInfo.furthestReachedEnd) {\n              message += '. Possibly missing something';\n            }\n          }\n\n          error = new LessError({\n            type: 'Parse',\n            message: message,\n            index: endInfo.furthest,\n            filename: fileInfo.filename\n          }, imports);\n        }\n\n        var finish = function finish(e) {\n          e = error || e || imports.error;\n\n          if (e) {\n            if (!(e instanceof LessError)) {\n              e = new LessError(e, imports, fileInfo.filename);\n            }\n\n            return callback(e);\n          } else {\n            return callback(null, root);\n          }\n        };\n\n        if (context.processImports !== false) {\n          new visitors.ImportVisitor(imports, finish).run(root);\n        } else {\n          return finish();\n        }\n      },\n      //\n      // Here in, the parsing rules/functions\n      //\n      // The basic structure of the syntax tree generated is as follows:\n      //\n      //   Ruleset ->  Declaration -> Value -> Expression -> Entity\n      //\n      // Here's some Less code:\n      //\n      //    .class {\n      //      color: #fff;\n      //      border: 1px solid #000;\n      //      width: @w + 4px;\n      //      > .child {...}\n      //    }\n      //\n      // And here's what the parse tree might look like:\n      //\n      //     Ruleset (Selector '.class', [\n      //         Declaration (\"color\",  Value ([Expression [Color #fff]]))\n      //         Declaration (\"border\", Value ([Expression [Dimension 1px][Keyword \"solid\"][Color #000]]))\n      //         Declaration (\"width\",  Value ([Expression [Operation \" + \" [Variable \"@w\"][Dimension 4px]]]))\n      //         Ruleset (Selector [Element '>', '.child'], [...])\n      //     ])\n      //\n      //  In general, most rules will try to parse a token with the `$re()` function, and if the return\n      //  value is truly, will return a new node, of the relevant type. Sometimes, we need to check\n      //  first, before parsing, that's when we use `peek()`.\n      //\n      parsers: parsers = {\n        //\n        // The `primary` rule is the *entry* and *exit* point of the parser.\n        // The rules here can appear at any level of the parse tree.\n        //\n        // The recursive nature of the grammar is an interplay between the `block`\n        // rule, which represents `{ ... }`, the `ruleset` rule, and this `primary` rule,\n        // as represented by this simplified grammar:\n        //\n        //     primary  →  (ruleset | declaration)+\n        //     ruleset  →  selector+ block\n        //     block    →  '{' primary '}'\n        //\n        // Only at one point is the primary rule not called from the\n        // block rule: at the root level.\n        //\n        primary: function primary() {\n          var mixin = this.mixin;\n          var root = [];\n          var node;\n\n          while (true) {\n            while (true) {\n              node = this.comment();\n\n              if (!node) {\n                break;\n              }\n\n              root.push(node);\n            } // always process comments before deciding if finished\n\n\n            if (parserInput.finished) {\n              break;\n            }\n\n            if (parserInput.peek('}')) {\n              break;\n            }\n\n            node = this.extendRule();\n\n            if (node) {\n              root = root.concat(node);\n              continue;\n            }\n\n            node = mixin.definition() || this.declaration() || this.ruleset() || mixin.call(false, false) || this.variableCall() || this.entities.call() || this.atrule();\n\n            if (node) {\n              root.push(node);\n            } else {\n              var foundSemiColon = false;\n\n              while (parserInput.$char(';')) {\n                foundSemiColon = true;\n              }\n\n              if (!foundSemiColon) {\n                break;\n              }\n            }\n          }\n\n          return root;\n        },\n        // comments are collected by the main parsing mechanism and then assigned to nodes\n        // where the current structure allows it\n        comment: function comment() {\n          if (parserInput.commentStore.length) {\n            var comment = parserInput.commentStore.shift();\n            return new tree.Comment(comment.text, comment.isLineComment, comment.index, fileInfo);\n          }\n        },\n        //\n        // Entities are tokens which can be found inside an Expression\n        //\n        entities: {\n          mixinLookup: function mixinLookup() {\n            return parsers.mixin.call(true, true);\n          },\n          //\n          // A string, which supports escaping \" and '\n          //\n          //     \"milky way\" 'he\\'s the one!'\n          //\n          quoted: function quoted(forceEscaped) {\n            var str;\n            var index = parserInput.i;\n            var isEscaped = false;\n            parserInput.save();\n\n            if (parserInput.$char('~')) {\n              isEscaped = true;\n            } else if (forceEscaped) {\n              parserInput.restore();\n              return;\n            }\n\n            str = parserInput.$quoted();\n\n            if (!str) {\n              parserInput.restore();\n              return;\n            }\n\n            parserInput.forget();\n            return new tree.Quoted(str.charAt(0), str.substr(1, str.length - 2), isEscaped, index, fileInfo);\n          },\n          //\n          // A catch-all word, such as:\n          //\n          //     black border-collapse\n          //\n          keyword: function keyword() {\n            var k = parserInput.$char('%') || parserInput.$re(/^\\[?(?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+\\]?/);\n\n            if (k) {\n              return tree.Color.fromKeyword(k) || new tree.Keyword(k);\n            }\n          },\n          //\n          // A function call\n          //\n          //     rgb(255, 0, 255)\n          //\n          // The arguments are parsed with the `entities.arguments` parser.\n          //\n          call: function call() {\n            var name;\n            var args;\n            var func;\n            var index = parserInput.i; // http://jsperf.com/case-insensitive-regex-vs-strtolower-then-regex/18\n\n            if (parserInput.peek(/^url\\(/i)) {\n              return;\n            }\n\n            parserInput.save();\n            name = parserInput.$re(/^([\\w-]+|%|progid:[\\w\\.]+)\\(/);\n\n            if (!name) {\n              parserInput.forget();\n              return;\n            }\n\n            name = name[1];\n            func = this.customFuncCall(name);\n\n            if (func) {\n              args = func.parse();\n\n              if (args && func.stop) {\n                parserInput.forget();\n                return args;\n              }\n            }\n\n            args = this.arguments(args);\n\n            if (!parserInput.$char(')')) {\n              parserInput.restore('Could not parse call arguments or missing \\')\\'');\n              return;\n            }\n\n            parserInput.forget();\n            return new tree.Call(name, args, index, fileInfo);\n          },\n          //\n          // Parsing rules for functions with non-standard args, e.g.:\n          //\n          //     boolean(not(2 > 1))\n          //\n          //     This is a quick prototype, to be modified/improved when\n          //     more custom-parsed funcs come (e.g. `selector(...)`)\n          //\n          customFuncCall: function customFuncCall(name) {\n            /* Ideally the table is to be moved out of here for faster perf.,\n               but it's quite tricky since it relies on all these `parsers`\n               and `expect` available only here */\n            return {\n              alpha: f(parsers.ieAlpha, true),\n              boolean: f(condition),\n              'if': f(condition)\n            }[name.toLowerCase()];\n\n            function f(parse, stop) {\n              return {\n                parse: parse,\n                // parsing function\n                stop: stop // when true - stop after parse() and return its result, \n                // otherwise continue for plain args\n\n              };\n            }\n\n            function condition() {\n              return [expect(parsers.condition, 'expected condition')];\n            }\n          },\n          arguments: function _arguments(prevArgs) {\n            var argsComma = prevArgs || [];\n            var argsSemiColon = [];\n            var isSemiColonSeparated;\n            var value;\n            parserInput.save();\n\n            while (true) {\n              if (prevArgs) {\n                prevArgs = false;\n              } else {\n                value = parsers.detachedRuleset() || this.assignment() || parsers.expression();\n\n                if (!value) {\n                  break;\n                }\n\n                if (value.value && value.value.length == 1) {\n                  value = value.value[0];\n                }\n\n                argsComma.push(value);\n              }\n\n              if (parserInput.$char(',')) {\n                continue;\n              }\n\n              if (parserInput.$char(';') || isSemiColonSeparated) {\n                isSemiColonSeparated = true;\n                value = argsComma.length < 1 ? argsComma[0] : new tree.Value(argsComma);\n                argsSemiColon.push(value);\n                argsComma = [];\n              }\n            }\n\n            parserInput.forget();\n            return isSemiColonSeparated ? argsSemiColon : argsComma;\n          },\n          literal: function literal() {\n            return this.dimension() || this.color() || this.quoted() || this.unicodeDescriptor();\n          },\n          // Assignments are argument entities for calls.\n          // They are present in ie filter properties as shown below.\n          //\n          //     filter: progid:DXImageTransform.Microsoft.Alpha( *opacity=50* )\n          //\n          assignment: function assignment() {\n            var key;\n            var value;\n            parserInput.save();\n            key = parserInput.$re(/^\\w+(?=\\s?=)/i);\n\n            if (!key) {\n              parserInput.restore();\n              return;\n            }\n\n            if (!parserInput.$char('=')) {\n              parserInput.restore();\n              return;\n            }\n\n            value = parsers.entity();\n\n            if (value) {\n              parserInput.forget();\n              return new tree.Assignment(key, value);\n            } else {\n              parserInput.restore();\n            }\n          },\n          //\n          // Parse url() tokens\n          //\n          // We use a specific rule for urls, because they don't really behave like\n          // standard function calls. The difference is that the argument doesn't have\n          // to be enclosed within a string, so it can't be parsed as an Expression.\n          //\n          url: function url() {\n            var value;\n            var index = parserInput.i;\n            parserInput.autoCommentAbsorb = false;\n\n            if (!parserInput.$str('url(')) {\n              parserInput.autoCommentAbsorb = true;\n              return;\n            }\n\n            value = this.quoted() || this.variable() || this.property() || parserInput.$re(/^(?:(?:\\\\[\\(\\)'\"])|[^\\(\\)'\"])+/) || '';\n            parserInput.autoCommentAbsorb = true;\n            expectChar(')');\n            return new tree.URL(value.value != null || value instanceof tree.Variable || value instanceof tree.Property ? value : new tree.Anonymous(value, index), index, fileInfo);\n          },\n          //\n          // A Variable entity, such as `@fink`, in\n          //\n          //     width: @fink + 2px\n          //\n          // We use a different parser for variable definitions,\n          // see `parsers.variable`.\n          //\n          variable: function variable() {\n            var ch;\n            var name;\n            var index = parserInput.i;\n            parserInput.save();\n\n            if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^@@?[\\w-]+/))) {\n              ch = parserInput.currentChar();\n\n              if (ch === '(' || ch === '[' && !parserInput.prevChar().match(/^\\s/)) {\n                // this may be a VariableCall lookup\n                var result = parsers.variableCall(name);\n\n                if (result) {\n                  parserInput.forget();\n                  return result;\n                }\n              }\n\n              parserInput.forget();\n              return new tree.Variable(name, index, fileInfo);\n            }\n\n            parserInput.restore();\n          },\n          // A variable entity using the protective {} e.g. @{var}\n          variableCurly: function variableCurly() {\n            var curly;\n            var index = parserInput.i;\n\n            if (parserInput.currentChar() === '@' && (curly = parserInput.$re(/^@\\{([\\w-]+)\\}/))) {\n              return new tree.Variable(\"@\".concat(curly[1]), index, fileInfo);\n            }\n          },\n          //\n          // A Property accessor, such as `$color`, in\n          //\n          //     background-color: $color\n          //\n          property: function property() {\n            var name;\n            var index = parserInput.i;\n\n            if (parserInput.currentChar() === '$' && (name = parserInput.$re(/^\\$[\\w-]+/))) {\n              return new tree.Property(name, index, fileInfo);\n            }\n          },\n          // A property entity useing the protective {} e.g. ${prop}\n          propertyCurly: function propertyCurly() {\n            var curly;\n            var index = parserInput.i;\n\n            if (parserInput.currentChar() === '$' && (curly = parserInput.$re(/^\\$\\{([\\w-]+)\\}/))) {\n              return new tree.Property(\"$\".concat(curly[1]), index, fileInfo);\n            }\n          },\n          //\n          // A Hexadecimal color\n          //\n          //     #4F3C2F\n          //\n          // `rgb` and `hsl` colors are parsed through the `entities.call` parser.\n          //\n          color: function color() {\n            var rgb;\n            parserInput.save();\n\n            if (parserInput.currentChar() === '#' && (rgb = parserInput.$re(/^#([A-Fa-f0-9]{8}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{3,4})([\\w.#\\[])?/))) {\n              if (!rgb[2]) {\n                parserInput.forget();\n                return new tree.Color(rgb[1], undefined, rgb[0]);\n              }\n            }\n\n            parserInput.restore();\n          },\n          colorKeyword: function colorKeyword() {\n            parserInput.save();\n            var autoCommentAbsorb = parserInput.autoCommentAbsorb;\n            parserInput.autoCommentAbsorb = false;\n            var k = parserInput.$re(/^[_A-Za-z-][_A-Za-z0-9-]+/);\n            parserInput.autoCommentAbsorb = autoCommentAbsorb;\n\n            if (!k) {\n              parserInput.forget();\n              return;\n            }\n\n            parserInput.restore();\n            var color = tree.Color.fromKeyword(k);\n\n            if (color) {\n              parserInput.$str(k);\n              return color;\n            }\n          },\n          //\n          // A Dimension, that is, a number and a unit\n          //\n          //     0.5em 95%\n          //\n          dimension: function dimension() {\n            if (parserInput.peekNotNumeric()) {\n              return;\n            }\n\n            var value = parserInput.$re(/^([+-]?\\d*\\.?\\d+)(%|[a-z_]+)?/i);\n\n            if (value) {\n              return new tree.Dimension(value[1], value[2]);\n            }\n          },\n          //\n          // A unicode descriptor, as is used in unicode-range\n          //\n          // U+0??  or U+00A1-00A9\n          //\n          unicodeDescriptor: function unicodeDescriptor() {\n            var ud;\n            ud = parserInput.$re(/^U\\+[0-9a-fA-F?]+(\\-[0-9a-fA-F?]+)?/);\n\n            if (ud) {\n              return new tree.UnicodeDescriptor(ud[0]);\n            }\n          },\n          //\n          // JavaScript code to be evaluated\n          //\n          //     `window.location.href`\n          //\n          javascript: function javascript() {\n            var js;\n            var index = parserInput.i;\n            parserInput.save();\n            var escape = parserInput.$char('~');\n            var jsQuote = parserInput.$char('`');\n\n            if (!jsQuote) {\n              parserInput.restore();\n              return;\n            }\n\n            js = parserInput.$re(/^[^`]*`/);\n\n            if (js) {\n              parserInput.forget();\n              return new tree.JavaScript(js.substr(0, js.length - 1), Boolean(escape), index, fileInfo);\n            }\n\n            parserInput.restore('invalid javascript definition');\n          }\n        },\n        //\n        // The variable part of a variable definition. Used in the `rule` parser\n        //\n        //     @fink:\n        //\n        variable: function variable() {\n          var name;\n\n          if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^(@[\\w-]+)\\s*:/))) {\n            return name[1];\n          }\n        },\n        //\n        // Call a variable value to retrieve a detached ruleset\n        // or a value from a detached ruleset's rules.\n        //\n        //     @fink();\n        //     @fink;\n        //     color: @fink[@color];\n        //\n        variableCall: function variableCall(parsedName) {\n          var lookups;\n          var important;\n          var i = parserInput.i;\n          var inValue = !!parsedName;\n          var name = parsedName;\n          parserInput.save();\n\n          if (name || parserInput.currentChar() === '@' && (name = parserInput.$re(/^(@[\\w-]+)(\\(\\s*\\))?/))) {\n            lookups = this.mixin.ruleLookups();\n\n            if (!lookups && (inValue && parserInput.$str('()') !== '()' || name[2] !== '()')) {\n              parserInput.restore('Missing \\'[...]\\' lookup in variable call');\n              return;\n            }\n\n            if (!inValue) {\n              name = name[1];\n            }\n\n            if (lookups && parsers.important()) {\n              important = true;\n            }\n\n            var call = new tree.VariableCall(name, i, fileInfo);\n\n            if (!inValue && parsers.end()) {\n              parserInput.forget();\n              return call;\n            } else {\n              parserInput.forget();\n              return new tree.NamespaceValue(call, lookups, important, i, fileInfo);\n            }\n          }\n\n          parserInput.restore();\n        },\n        //\n        // extend syntax - used to extend selectors\n        //\n        extend: function extend(isRule) {\n          var elements;\n          var e;\n          var index = parserInput.i;\n          var option;\n          var extendList;\n          var extend;\n\n          if (!parserInput.$str(isRule ? '&:extend(' : ':extend(')) {\n            return;\n          }\n\n          do {\n            option = null;\n            elements = null;\n\n            while (!(option = parserInput.$re(/^(all)(?=\\s*(\\)|,))/))) {\n              e = this.element();\n\n              if (!e) {\n                break;\n              }\n\n              if (elements) {\n                elements.push(e);\n              } else {\n                elements = [e];\n              }\n            }\n\n            option = option && option[1];\n\n            if (!elements) {\n              error('Missing target selector for :extend().');\n            }\n\n            extend = new tree.Extend(new tree.Selector(elements), option, index, fileInfo);\n\n            if (extendList) {\n              extendList.push(extend);\n            } else {\n              extendList = [extend];\n            }\n          } while (parserInput.$char(','));\n\n          expect(/^\\)/);\n\n          if (isRule) {\n            expect(/^;/);\n          }\n\n          return extendList;\n        },\n        //\n        // extendRule - used in a rule to extend all the parent selectors\n        //\n        extendRule: function extendRule() {\n          return this.extend(true);\n        },\n        //\n        // Mixins\n        //\n        mixin: {\n          //\n          // A Mixin call, with an optional argument list\n          //\n          //     #mixins > .square(#fff);\n          //     #mixins.square(#fff);\n          //     .rounded(4px, black);\n          //     .button;\n          //\n          // We can lookup / return a value using the lookup syntax:\n          //\n          //     color: #mixin.square(#fff)[@color];\n          //\n          // The `while` loop is there because mixins can be\n          // namespaced, but we only support the child and descendant\n          // selector for now.\n          //\n          call: function call(inValue, getLookup) {\n            var s = parserInput.currentChar();\n            var important = false;\n            var lookups;\n            var index = parserInput.i;\n            var elements;\n            var args;\n            var hasParens;\n\n            if (s !== '.' && s !== '#') {\n              return;\n            }\n\n            parserInput.save(); // stop us absorbing part of an invalid selector\n\n            elements = this.elements();\n\n            if (elements) {\n              if (parserInput.$char('(')) {\n                args = this.args(true).args;\n                expectChar(')');\n                hasParens = true;\n              }\n\n              if (getLookup !== false) {\n                lookups = this.ruleLookups();\n              }\n\n              if (getLookup === true && !lookups) {\n                parserInput.restore();\n                return;\n              }\n\n              if (inValue && !lookups && !hasParens) {\n                // This isn't a valid in-value mixin call\n                parserInput.restore();\n                return;\n              }\n\n              if (!inValue && parsers.important()) {\n                important = true;\n              }\n\n              if (inValue || parsers.end()) {\n                parserInput.forget();\n                var mixin = new tree.mixin.Call(elements, args, index, fileInfo, !lookups && important);\n\n                if (lookups) {\n                  return new tree.NamespaceValue(mixin, lookups, important);\n                } else {\n                  return mixin;\n                }\n              }\n            }\n\n            parserInput.restore();\n          },\n\n          /**\n           * Matching elements for mixins\n           * (Start with . or # and can have > )\n           */\n          elements: function elements() {\n            var elements;\n            var e;\n            var c;\n            var elem;\n            var elemIndex;\n            var re = /^[#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/;\n\n            while (true) {\n              elemIndex = parserInput.i;\n              e = parserInput.$re(re);\n\n              if (!e) {\n                break;\n              }\n\n              elem = new tree.Element(c, e, false, elemIndex, fileInfo);\n\n              if (elements) {\n                elements.push(elem);\n              } else {\n                elements = [elem];\n              }\n\n              c = parserInput.$char('>');\n            }\n\n            return elements;\n          },\n          args: function args(isCall) {\n            var entities = parsers.entities;\n            var returner = {\n              args: null,\n              variadic: false\n            };\n            var expressions = [];\n            var argsSemiColon = [];\n            var argsComma = [];\n            var isSemiColonSeparated;\n            var expressionContainsNamed;\n            var name;\n            var nameLoop;\n            var value;\n            var arg;\n            var expand;\n            var hasSep = true;\n            parserInput.save();\n\n            while (true) {\n              if (isCall) {\n                arg = parsers.detachedRuleset() || parsers.expression();\n              } else {\n                parserInput.commentStore.length = 0;\n\n                if (parserInput.$str('...')) {\n                  returner.variadic = true;\n\n                  if (parserInput.$char(';') && !isSemiColonSeparated) {\n                    isSemiColonSeparated = true;\n                  }\n\n                  (isSemiColonSeparated ? argsSemiColon : argsComma).push({\n                    variadic: true\n                  });\n                  break;\n                }\n\n                arg = entities.variable() || entities.property() || entities.literal() || entities.keyword() || this.call(true);\n              }\n\n              if (!arg || !hasSep) {\n                break;\n              }\n\n              nameLoop = null;\n\n              if (arg.throwAwayComments) {\n                arg.throwAwayComments();\n              }\n\n              value = arg;\n              var val = null;\n\n              if (isCall) {\n                // Variable\n                if (arg.value && arg.value.length == 1) {\n                  val = arg.value[0];\n                }\n              } else {\n                val = arg;\n              }\n\n              if (val && (val instanceof tree.Variable || val instanceof tree.Property)) {\n                if (parserInput.$char(':')) {\n                  if (expressions.length > 0) {\n                    if (isSemiColonSeparated) {\n                      error('Cannot mix ; and , as delimiter types');\n                    }\n\n                    expressionContainsNamed = true;\n                  }\n\n                  value = parsers.detachedRuleset() || parsers.expression();\n\n                  if (!value) {\n                    if (isCall) {\n                      error('could not understand value for named argument');\n                    } else {\n                      parserInput.restore();\n                      returner.args = [];\n                      return returner;\n                    }\n                  }\n\n                  nameLoop = name = val.name;\n                } else if (parserInput.$str('...')) {\n                  if (!isCall) {\n                    returner.variadic = true;\n\n                    if (parserInput.$char(';') && !isSemiColonSeparated) {\n                      isSemiColonSeparated = true;\n                    }\n\n                    (isSemiColonSeparated ? argsSemiColon : argsComma).push({\n                      name: arg.name,\n                      variadic: true\n                    });\n                    break;\n                  } else {\n                    expand = true;\n                  }\n                } else if (!isCall) {\n                  name = nameLoop = val.name;\n                  value = null;\n                }\n              }\n\n              if (value) {\n                expressions.push(value);\n              }\n\n              argsComma.push({\n                name: nameLoop,\n                value: value,\n                expand: expand\n              });\n\n              if (parserInput.$char(',')) {\n                hasSep = true;\n                continue;\n              }\n\n              hasSep = parserInput.$char(';') === ';';\n\n              if (hasSep || isSemiColonSeparated) {\n                if (expressionContainsNamed) {\n                  error('Cannot mix ; and , as delimiter types');\n                }\n\n                isSemiColonSeparated = true;\n\n                if (expressions.length > 1) {\n                  value = new tree.Value(expressions);\n                }\n\n                argsSemiColon.push({\n                  name: name,\n                  value: value,\n                  expand: expand\n                });\n                name = null;\n                expressions = [];\n                expressionContainsNamed = false;\n              }\n            }\n\n            parserInput.forget();\n            returner.args = isSemiColonSeparated ? argsSemiColon : argsComma;\n            return returner;\n          },\n          //\n          // A Mixin definition, with a list of parameters\n          //\n          //     .rounded (@radius: 2px, @color) {\n          //        ...\n          //     }\n          //\n          // Until we have a finer grained state-machine, we have to\n          // do a look-ahead, to make sure we don't have a mixin call.\n          // See the `rule` function for more information.\n          //\n          // We start by matching `.rounded (`, and then proceed on to\n          // the argument list, which has optional default values.\n          // We store the parameters in `params`, with a `value` key,\n          // if there is a value, such as in the case of `@radius`.\n          //\n          // Once we've got our params list, and a closing `)`, we parse\n          // the `{...}` block.\n          //\n          definition: function definition() {\n            var name;\n            var params = [];\n            var match;\n            var ruleset;\n            var cond;\n            var variadic = false;\n\n            if (parserInput.currentChar() !== '.' && parserInput.currentChar() !== '#' || parserInput.peek(/^[^{]*\\}/)) {\n              return;\n            }\n\n            parserInput.save();\n            match = parserInput.$re(/^([#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+)\\s*\\(/);\n\n            if (match) {\n              name = match[1];\n              var argInfo = this.args(false);\n              params = argInfo.args;\n              variadic = argInfo.variadic; // .mixincall(\"@{a}\");\n              // looks a bit like a mixin definition..\n              // also\n              // .mixincall(@a: {rule: set;});\n              // so we have to be nice and restore\n\n              if (!parserInput.$char(')')) {\n                parserInput.restore('Missing closing \\')\\'');\n                return;\n              }\n\n              parserInput.commentStore.length = 0;\n\n              if (parserInput.$str('when')) {\n                // Guard\n                cond = expect(parsers.conditions, 'expected condition');\n              }\n\n              ruleset = parsers.block();\n\n              if (ruleset) {\n                parserInput.forget();\n                return new tree.mixin.Definition(name, params, ruleset, cond, variadic);\n              } else {\n                parserInput.restore();\n              }\n            } else {\n              parserInput.forget();\n            }\n          },\n          ruleLookups: function ruleLookups() {\n            var rule;\n            var lookups = [];\n\n            if (parserInput.currentChar() !== '[') {\n              return;\n            }\n\n            while (true) {\n              parserInput.save();\n              rule = this.lookupValue();\n\n              if (!rule && rule !== '') {\n                parserInput.restore();\n                break;\n              }\n\n              lookups.push(rule);\n              parserInput.forget();\n            }\n\n            if (lookups.length > 0) {\n              return lookups;\n            }\n          },\n          lookupValue: function lookupValue() {\n            parserInput.save();\n\n            if (!parserInput.$char('[')) {\n              parserInput.restore();\n              return;\n            }\n\n            var name = parserInput.$re(/^(?:[@$]{0,2})[_a-zA-Z0-9-]*/);\n\n            if (!parserInput.$char(']')) {\n              parserInput.restore();\n              return;\n            }\n\n            if (name || name === '') {\n              parserInput.forget();\n              return name;\n            }\n\n            parserInput.restore();\n          }\n        },\n        //\n        // Entities are the smallest recognized token,\n        // and can be found inside a rule's value.\n        //\n        entity: function entity() {\n          var entities = this.entities;\n          return this.comment() || entities.literal() || entities.variable() || entities.url() || entities.property() || entities.call() || entities.keyword() || this.mixin.call(true) || entities.javascript();\n        },\n        //\n        // A Declaration terminator. Note that we use `peek()` to check for '}',\n        // because the `block` rule will be expecting it, but we still need to make sure\n        // it's there, if ';' was omitted.\n        //\n        end: function end() {\n          return parserInput.$char(';') || parserInput.peek('}');\n        },\n        //\n        // IE's alpha function\n        //\n        //     alpha(opacity=88)\n        //\n        ieAlpha: function ieAlpha() {\n          var value; // http://jsperf.com/case-insensitive-regex-vs-strtolower-then-regex/18\n\n          if (!parserInput.$re(/^opacity=/i)) {\n            return;\n          }\n\n          value = parserInput.$re(/^\\d+/);\n\n          if (!value) {\n            value = expect(parsers.entities.variable, 'Could not parse alpha');\n            value = \"@{\".concat(value.name.slice(1), \"}\");\n          }\n\n          expectChar(')');\n          return new tree.Quoted('', \"alpha(opacity=\".concat(value, \")\"));\n        },\n        //\n        // A Selector Element\n        //\n        //     div\n        //     + h1\n        //     #socks\n        //     input[type=\"text\"]\n        //\n        // Elements are the building blocks for Selectors,\n        // they are made out of a `Combinator` (see combinator rule),\n        // and an element name, such as a tag a class, or `*`.\n        //\n        element: function element() {\n          var e;\n          var c;\n          var v;\n          var index = parserInput.i;\n          c = this.combinator();\n          e = parserInput.$re(/^(?:\\d+\\.\\d+|\\d+)%/) || parserInput.$re(/^(?:[.#]?|:*)(?:[\\w-]|[^\\x00-\\x9f]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/) || parserInput.$char('*') || parserInput.$char('&') || this.attribute() || parserInput.$re(/^\\([^&()@]+\\)/) || parserInput.$re(/^[\\.#:](?=@)/) || this.entities.variableCurly();\n\n          if (!e) {\n            parserInput.save();\n\n            if (parserInput.$char('(')) {\n              if ((v = this.selector(false)) && parserInput.$char(')')) {\n                e = new tree.Paren(v);\n                parserInput.forget();\n              } else {\n                parserInput.restore('Missing closing \\')\\'');\n              }\n            } else {\n              parserInput.forget();\n            }\n          }\n\n          if (e) {\n            return new tree.Element(c, e, e instanceof tree.Variable, index, fileInfo);\n          }\n        },\n        //\n        // Combinators combine elements together, in a Selector.\n        //\n        // Because our parser isn't white-space sensitive, special care\n        // has to be taken, when parsing the descendant combinator, ` `,\n        // as it's an empty space. We have to check the previous character\n        // in the input, to see if it's a ` ` character. More info on how\n        // we deal with this in *combinator.js*.\n        //\n        combinator: function combinator() {\n          var c = parserInput.currentChar();\n\n          if (c === '/') {\n            parserInput.save();\n            var slashedCombinator = parserInput.$re(/^\\/[a-z]+\\//i);\n\n            if (slashedCombinator) {\n              parserInput.forget();\n              return new tree.Combinator(slashedCombinator);\n            }\n\n            parserInput.restore();\n          }\n\n          if (c === '>' || c === '+' || c === '~' || c === '|' || c === '^') {\n            parserInput.i++;\n\n            if (c === '^' && parserInput.currentChar() === '^') {\n              c = '^^';\n              parserInput.i++;\n            }\n\n            while (parserInput.isWhitespace()) {\n              parserInput.i++;\n            }\n\n            return new tree.Combinator(c);\n          } else if (parserInput.isWhitespace(-1)) {\n            return new tree.Combinator(' ');\n          } else {\n            return new tree.Combinator(null);\n          }\n        },\n        //\n        // A CSS Selector\n        // with less extensions e.g. the ability to extend and guard\n        //\n        //     .class > div + h1\n        //     li a:hover\n        //\n        // Selectors are made out of one or more Elements, see above.\n        //\n        selector: function selector(isLess) {\n          var index = parserInput.i;\n          var elements;\n          var extendList;\n          var c;\n          var e;\n          var allExtends;\n          var when;\n          var condition;\n          isLess = isLess !== false;\n\n          while (isLess && (extendList = this.extend()) || isLess && (when = parserInput.$str('when')) || (e = this.element())) {\n            if (when) {\n              condition = expect(this.conditions, 'expected condition');\n            } else if (condition) {\n              error('CSS guard can only be used at the end of selector');\n            } else if (extendList) {\n              if (allExtends) {\n                allExtends = allExtends.concat(extendList);\n              } else {\n                allExtends = extendList;\n              }\n            } else {\n              if (allExtends) {\n                error('Extend can only be used at the end of selector');\n              }\n\n              c = parserInput.currentChar();\n\n              if (elements) {\n                elements.push(e);\n              } else {\n                elements = [e];\n              }\n\n              e = null;\n            }\n\n            if (c === '{' || c === '}' || c === ';' || c === ',' || c === ')') {\n              break;\n            }\n          }\n\n          if (elements) {\n            return new tree.Selector(elements, allExtends, condition, index, fileInfo);\n          }\n\n          if (allExtends) {\n            error('Extend must be used to extend a selector, it cannot be used on its own');\n          }\n        },\n        selectors: function selectors() {\n          var s;\n          var selectors;\n\n          while (true) {\n            s = this.selector();\n\n            if (!s) {\n              break;\n            }\n\n            if (selectors) {\n              selectors.push(s);\n            } else {\n              selectors = [s];\n            }\n\n            parserInput.commentStore.length = 0;\n\n            if (s.condition && selectors.length > 1) {\n              error(\"Guards are only currently allowed on a single selector.\");\n            }\n\n            if (!parserInput.$char(',')) {\n              break;\n            }\n\n            if (s.condition) {\n              error(\"Guards are only currently allowed on a single selector.\");\n            }\n\n            parserInput.commentStore.length = 0;\n          }\n\n          return selectors;\n        },\n        attribute: function attribute() {\n          if (!parserInput.$char('[')) {\n            return;\n          }\n\n          var entities = this.entities;\n          var key;\n          var val;\n          var op;\n\n          if (!(key = entities.variableCurly())) {\n            key = expect(/^(?:[_A-Za-z0-9-\\*]*\\|)?(?:[_A-Za-z0-9-]|\\\\.)+/);\n          }\n\n          op = parserInput.$re(/^[|~*$^]?=/);\n\n          if (op) {\n            val = entities.quoted() || parserInput.$re(/^[0-9]+%/) || parserInput.$re(/^[\\w-]+/) || entities.variableCurly();\n          }\n\n          expectChar(']');\n          return new tree.Attribute(key, op, val);\n        },\n        //\n        // The `block` rule is used by `ruleset` and `mixin.definition`.\n        // It's a wrapper around the `primary` rule, with added `{}`.\n        //\n        block: function block() {\n          var content;\n\n          if (parserInput.$char('{') && (content = this.primary()) && parserInput.$char('}')) {\n            return content;\n          }\n        },\n        blockRuleset: function blockRuleset() {\n          var block = this.block();\n\n          if (block) {\n            block = new tree.Ruleset(null, block);\n          }\n\n          return block;\n        },\n        detachedRuleset: function detachedRuleset() {\n          var argInfo;\n          var params;\n          var variadic;\n          parserInput.save();\n\n          if (parserInput.$re(/^[.#]\\(/)) {\n            /**\n             * DR args currently only implemented for each() function, and not \n             * yet settable as `@dr: #(@arg) {}`\n             * This should be done when DRs are merged with mixins.\n             * See: https://github.com/less/less-meta/issues/16\n             */\n            argInfo = this.mixin.args(false);\n            params = argInfo.args;\n            variadic = argInfo.variadic;\n\n            if (!parserInput.$char(')')) {\n              parserInput.restore();\n              return;\n            }\n          }\n\n          var blockRuleset = this.blockRuleset();\n\n          if (blockRuleset) {\n            parserInput.forget();\n\n            if (params) {\n              return new tree.mixin.Definition(null, params, blockRuleset, null, variadic);\n            }\n\n            return new tree.DetachedRuleset(blockRuleset);\n          }\n\n          parserInput.restore();\n        },\n        //\n        // div, .class, body > p {...}\n        //\n        ruleset: function ruleset() {\n          var selectors;\n          var rules;\n          var debugInfo;\n          parserInput.save();\n\n          if (context.dumpLineNumbers) {\n            debugInfo = getDebugInfo(parserInput.i);\n          }\n\n          selectors = this.selectors();\n\n          if (selectors && (rules = this.block())) {\n            parserInput.forget();\n            var ruleset = new tree.Ruleset(selectors, rules, context.strictImports);\n\n            if (context.dumpLineNumbers) {\n              ruleset.debugInfo = debugInfo;\n            }\n\n            return ruleset;\n          } else {\n            parserInput.restore();\n          }\n        },\n        declaration: function declaration() {\n          var name;\n          var value;\n          var index = parserInput.i;\n          var hasDR;\n          var c = parserInput.currentChar();\n          var important;\n          var merge;\n          var isVariable;\n\n          if (c === '.' || c === '#' || c === '&' || c === ':') {\n            return;\n          }\n\n          parserInput.save();\n          name = this.variable() || this.ruleProperty();\n\n          if (name) {\n            isVariable = typeof name === 'string';\n\n            if (isVariable) {\n              value = this.detachedRuleset();\n\n              if (value) {\n                hasDR = true;\n              }\n            }\n\n            parserInput.commentStore.length = 0;\n\n            if (!value) {\n              // a name returned by this.ruleProperty() is always an array of the form:\n              // [string-1, ..., string-n, \"\"] or [string-1, ..., string-n, \"+\"]\n              // where each item is a tree.Keyword or tree.Variable\n              merge = !isVariable && name.length > 1 && name.pop().value; // Custom property values get permissive parsing\n\n              if (name[0].value && name[0].value.slice(0, 2) === '--') {\n                value = this.permissiveValue();\n              } // Try to store values as anonymous\n              // If we need the value later we'll re-parse it in ruleset.parseValue\n              else {\n                  value = this.anonymousValue();\n                }\n\n              if (value) {\n                parserInput.forget(); // anonymous values absorb the end ';' which is required for them to work\n\n                return new tree.Declaration(name, value, false, merge, index, fileInfo);\n              }\n\n              if (!value) {\n                value = this.value();\n              }\n\n              if (value) {\n                important = this.important();\n              } else if (isVariable) {\n                // As a last resort, try permissiveValue\n                value = this.permissiveValue();\n              }\n            }\n\n            if (value && (this.end() || hasDR)) {\n              parserInput.forget();\n              return new tree.Declaration(name, value, important, merge, index, fileInfo);\n            } else {\n              parserInput.restore();\n            }\n          } else {\n            parserInput.restore();\n          }\n        },\n        anonymousValue: function anonymousValue() {\n          var index = parserInput.i;\n          var match = parserInput.$re(/^([^.#@\\$+\\/'\"*`(;{}-]*);/);\n\n          if (match) {\n            return new tree.Anonymous(match[1], index);\n          }\n        },\n\n        /**\n         * Used for custom properties, at-rules, and variables (as fallback)\n         * Parses almost anything inside of {} [] () \"\" blocks\n         * until it reaches outer-most tokens.\n         * \n         * First, it will try to parse comments and entities to reach\n         * the end. This is mostly like the Expression parser except no\n         * math is allowed.\n         */\n        permissiveValue: function permissiveValue(untilTokens) {\n          var i;\n          var e;\n          var done;\n          var value;\n          var tok = untilTokens || ';';\n          var index = parserInput.i;\n          var result = [];\n\n          function testCurrentChar() {\n            var char = parserInput.currentChar();\n\n            if (typeof tok === 'string') {\n              return char === tok;\n            } else {\n              return tok.test(char);\n            }\n          }\n\n          if (testCurrentChar()) {\n            return;\n          }\n\n          value = [];\n\n          do {\n            e = this.comment();\n\n            if (e) {\n              value.push(e);\n              continue;\n            }\n\n            e = this.entity();\n\n            if (e) {\n              value.push(e);\n            }\n          } while (e);\n\n          done = testCurrentChar();\n\n          if (value.length > 0) {\n            value = new tree.Expression(value);\n\n            if (done) {\n              return value;\n            } else {\n              result.push(value);\n            } // Preserve space before $parseUntil as it will not\n\n\n            if (parserInput.prevChar() === ' ') {\n              result.push(new tree.Anonymous(' ', index));\n            }\n          }\n\n          parserInput.save();\n          value = parserInput.$parseUntil(tok);\n\n          if (value) {\n            if (typeof value === 'string') {\n              error(\"Expected '\".concat(value, \"'\"), 'Parse');\n            }\n\n            if (value.length === 1 && value[0] === ' ') {\n              parserInput.forget();\n              return new tree.Anonymous('', index);\n            }\n\n            var item;\n\n            for (i = 0; i < value.length; i++) {\n              item = value[i];\n\n              if (Array.isArray(item)) {\n                // Treat actual quotes as normal quoted values\n                result.push(new tree.Quoted(item[0], item[1], true, index, fileInfo));\n              } else {\n                if (i === value.length - 1) {\n                  item = item.trim();\n                } // Treat like quoted values, but replace vars like unquoted expressions\n\n\n                var quote = new tree.Quoted('\\'', item, true, index, fileInfo);\n                quote.variableRegex = /@([\\w-]+)/g;\n                quote.propRegex = /\\$([\\w-]+)/g;\n                result.push(quote);\n              }\n            }\n\n            parserInput.forget();\n            return new tree.Expression(result, true);\n          }\n\n          parserInput.restore();\n        },\n        //\n        // An @import atrule\n        //\n        //     @import \"lib\";\n        //\n        // Depending on our environment, importing is done differently:\n        // In the browser, it's an XHR request, in Node, it would be a\n        // file-system operation. The function used for importing is\n        // stored in `import`, which we pass to the Import constructor.\n        //\n        'import': function _import() {\n          var path;\n          var features;\n          var index = parserInput.i;\n          var dir = parserInput.$re(/^@import?\\s+/);\n\n          if (dir) {\n            var options = (dir ? this.importOptions() : null) || {};\n\n            if (path = this.entities.quoted() || this.entities.url()) {\n              features = this.mediaFeatures();\n\n              if (!parserInput.$char(';')) {\n                parserInput.i = index;\n                error('missing semi-colon or unrecognised media features on import');\n              }\n\n              features = features && new tree.Value(features);\n              return new tree.Import(path, features, options, index, fileInfo);\n            } else {\n              parserInput.i = index;\n              error('malformed import statement');\n            }\n          }\n        },\n        importOptions: function importOptions() {\n          var o;\n          var options = {};\n          var optionName;\n          var value; // list of options, surrounded by parens\n\n          if (!parserInput.$char('(')) {\n            return null;\n          }\n\n          do {\n            o = this.importOption();\n\n            if (o) {\n              optionName = o;\n              value = true;\n\n              switch (optionName) {\n                case 'css':\n                  optionName = 'less';\n                  value = false;\n                  break;\n\n                case 'once':\n                  optionName = 'multiple';\n                  value = false;\n                  break;\n              }\n\n              options[optionName] = value;\n\n              if (!parserInput.$char(',')) {\n                break;\n              }\n            }\n          } while (o);\n\n          expectChar(')');\n          return options;\n        },\n        importOption: function importOption() {\n          var opt = parserInput.$re(/^(less|css|multiple|once|inline|reference|optional)/);\n\n          if (opt) {\n            return opt[1];\n          }\n        },\n        mediaFeature: function mediaFeature() {\n          var entities = this.entities;\n          var nodes = [];\n          var e;\n          var p;\n          parserInput.save();\n\n          do {\n            e = entities.keyword() || entities.variable() || entities.mixinLookup();\n\n            if (e) {\n              nodes.push(e);\n            } else if (parserInput.$char('(')) {\n              p = this.property();\n              e = this.value();\n\n              if (parserInput.$char(')')) {\n                if (p && e) {\n                  nodes.push(new tree.Paren(new tree.Declaration(p, e, null, null, parserInput.i, fileInfo, true)));\n                } else if (e) {\n                  nodes.push(new tree.Paren(e));\n                } else {\n                  error('badly formed media feature definition');\n                }\n              } else {\n                error('Missing closing \\')\\'', 'Parse');\n              }\n            }\n          } while (e);\n\n          parserInput.forget();\n\n          if (nodes.length > 0) {\n            return new tree.Expression(nodes);\n          }\n        },\n        mediaFeatures: function mediaFeatures() {\n          var entities = this.entities;\n          var features = [];\n          var e;\n\n          do {\n            e = this.mediaFeature();\n\n            if (e) {\n              features.push(e);\n\n              if (!parserInput.$char(',')) {\n                break;\n              }\n            } else {\n              e = entities.variable() || entities.mixinLookup();\n\n              if (e) {\n                features.push(e);\n\n                if (!parserInput.$char(',')) {\n                  break;\n                }\n              }\n            }\n          } while (e);\n\n          return features.length > 0 ? features : null;\n        },\n        media: function media() {\n          var features;\n          var rules;\n          var media;\n          var debugInfo;\n          var index = parserInput.i;\n\n          if (context.dumpLineNumbers) {\n            debugInfo = getDebugInfo(index);\n          }\n\n          parserInput.save();\n\n          if (parserInput.$str('@media')) {\n            features = this.mediaFeatures();\n            rules = this.block();\n\n            if (!rules) {\n              error('media definitions require block statements after any features');\n            }\n\n            parserInput.forget();\n            media = new tree.Media(rules, features, index, fileInfo);\n\n            if (context.dumpLineNumbers) {\n              media.debugInfo = debugInfo;\n            }\n\n            return media;\n          }\n\n          parserInput.restore();\n        },\n        //\n        // A @plugin directive, used to import plugins dynamically.\n        //\n        //     @plugin (args) \"lib\";\n        //\n        plugin: function plugin() {\n          var path;\n          var args;\n          var options;\n          var index = parserInput.i;\n          var dir = parserInput.$re(/^@plugin?\\s+/);\n\n          if (dir) {\n            args = this.pluginArgs();\n\n            if (args) {\n              options = {\n                pluginArgs: args,\n                isPlugin: true\n              };\n            } else {\n              options = {\n                isPlugin: true\n              };\n            }\n\n            if (path = this.entities.quoted() || this.entities.url()) {\n              if (!parserInput.$char(';')) {\n                parserInput.i = index;\n                error('missing semi-colon on @plugin');\n              }\n\n              return new tree.Import(path, null, options, index, fileInfo);\n            } else {\n              parserInput.i = index;\n              error('malformed @plugin statement');\n            }\n          }\n        },\n        pluginArgs: function pluginArgs() {\n          // list of options, surrounded by parens\n          parserInput.save();\n\n          if (!parserInput.$char('(')) {\n            parserInput.restore();\n            return null;\n          }\n\n          var args = parserInput.$re(/^\\s*([^\\);]+)\\)\\s*/);\n\n          if (args[1]) {\n            parserInput.forget();\n            return args[1].trim();\n          } else {\n            parserInput.restore();\n            return null;\n          }\n        },\n        //\n        // A CSS AtRule\n        //\n        //     @charset \"utf-8\";\n        //\n        atrule: function atrule() {\n          var index = parserInput.i;\n          var name;\n          var value;\n          var rules;\n          var nonVendorSpecificName;\n          var hasIdentifier;\n          var hasExpression;\n          var hasUnknown;\n          var hasBlock = true;\n          var isRooted = true;\n\n          if (parserInput.currentChar() !== '@') {\n            return;\n          }\n\n          value = this['import']() || this.plugin() || this.media();\n\n          if (value) {\n            return value;\n          }\n\n          parserInput.save();\n          name = parserInput.$re(/^@[a-z-]+/);\n\n          if (!name) {\n            return;\n          }\n\n          nonVendorSpecificName = name;\n\n          if (name.charAt(1) == '-' && name.indexOf('-', 2) > 0) {\n            nonVendorSpecificName = \"@\".concat(name.slice(name.indexOf('-', 2) + 1));\n          }\n\n          switch (nonVendorSpecificName) {\n            case '@charset':\n              hasIdentifier = true;\n              hasBlock = false;\n              break;\n\n            case '@namespace':\n              hasExpression = true;\n              hasBlock = false;\n              break;\n\n            case '@keyframes':\n            case '@counter-style':\n              hasIdentifier = true;\n              break;\n\n            case '@document':\n            case '@supports':\n              hasUnknown = true;\n              isRooted = false;\n              break;\n\n            default:\n              hasUnknown = true;\n              break;\n          }\n\n          parserInput.commentStore.length = 0;\n\n          if (hasIdentifier) {\n            value = this.entity();\n\n            if (!value) {\n              error(\"expected \".concat(name, \" identifier\"));\n            }\n          } else if (hasExpression) {\n            value = this.expression();\n\n            if (!value) {\n              error(\"expected \".concat(name, \" expression\"));\n            }\n          } else if (hasUnknown) {\n            value = this.permissiveValue(/^[{;]/);\n            hasBlock = parserInput.currentChar() === '{';\n\n            if (!value) {\n              if (!hasBlock && parserInput.currentChar() !== ';') {\n                error(\"\".concat(name, \" rule is missing block or ending semi-colon\"));\n              }\n            } else if (!value.value) {\n              value = null;\n            }\n          }\n\n          if (hasBlock) {\n            rules = this.blockRuleset();\n          }\n\n          if (rules || !hasBlock && value && parserInput.$char(';')) {\n            parserInput.forget();\n            return new tree.AtRule(name, value, rules, index, fileInfo, context.dumpLineNumbers ? getDebugInfo(index) : null, isRooted);\n          }\n\n          parserInput.restore('at-rule options not recognised');\n        },\n        //\n        // A Value is a comma-delimited list of Expressions\n        //\n        //     font-family: Baskerville, Georgia, serif;\n        //\n        // In a Rule, a Value represents everything after the `:`,\n        // and before the `;`.\n        //\n        value: function value() {\n          var e;\n          var expressions = [];\n          var index = parserInput.i;\n\n          do {\n            e = this.expression();\n\n            if (e) {\n              expressions.push(e);\n\n              if (!parserInput.$char(',')) {\n                break;\n              }\n            }\n          } while (e);\n\n          if (expressions.length > 0) {\n            return new tree.Value(expressions, index);\n          }\n        },\n        important: function important() {\n          if (parserInput.currentChar() === '!') {\n            return parserInput.$re(/^! *important/);\n          }\n        },\n        sub: function sub() {\n          var a;\n          var e;\n          parserInput.save();\n\n          if (parserInput.$char('(')) {\n            a = this.addition();\n\n            if (a && parserInput.$char(')')) {\n              parserInput.forget();\n              e = new tree.Expression([a]);\n              e.parens = true;\n              return e;\n            }\n\n            parserInput.restore('Expected \\')\\'');\n            return;\n          }\n\n          parserInput.restore();\n        },\n        multiplication: function multiplication() {\n          var m;\n          var a;\n          var op;\n          var operation;\n          var isSpaced;\n          m = this.operand();\n\n          if (m) {\n            isSpaced = parserInput.isWhitespace(-1);\n\n            while (true) {\n              if (parserInput.peek(/^\\/[*\\/]/)) {\n                break;\n              }\n\n              parserInput.save();\n              op = parserInput.$char('/') || parserInput.$char('*') || parserInput.$str('./');\n\n              if (!op) {\n                parserInput.forget();\n                break;\n              }\n\n              a = this.operand();\n\n              if (!a) {\n                parserInput.restore();\n                break;\n              }\n\n              parserInput.forget();\n              m.parensInOp = true;\n              a.parensInOp = true;\n              operation = new tree.Operation(op, [operation || m, a], isSpaced);\n              isSpaced = parserInput.isWhitespace(-1);\n            }\n\n            return operation || m;\n          }\n        },\n        addition: function addition() {\n          var m;\n          var a;\n          var op;\n          var operation;\n          var isSpaced;\n          m = this.multiplication();\n\n          if (m) {\n            isSpaced = parserInput.isWhitespace(-1);\n\n            while (true) {\n              op = parserInput.$re(/^[-+]\\s+/) || !isSpaced && (parserInput.$char('+') || parserInput.$char('-'));\n\n              if (!op) {\n                break;\n              }\n\n              a = this.multiplication();\n\n              if (!a) {\n                break;\n              }\n\n              m.parensInOp = true;\n              a.parensInOp = true;\n              operation = new tree.Operation(op, [operation || m, a], isSpaced);\n              isSpaced = parserInput.isWhitespace(-1);\n            }\n\n            return operation || m;\n          }\n        },\n        conditions: function conditions() {\n          var a;\n          var b;\n          var index = parserInput.i;\n          var condition;\n          a = this.condition(true);\n\n          if (a) {\n            while (true) {\n              if (!parserInput.peek(/^,\\s*(not\\s*)?\\(/) || !parserInput.$char(',')) {\n                break;\n              }\n\n              b = this.condition(true);\n\n              if (!b) {\n                break;\n              }\n\n              condition = new tree.Condition('or', condition || a, b, index);\n            }\n\n            return condition || a;\n          }\n        },\n        condition: function condition(needsParens) {\n          var result;\n          var logical;\n          var next;\n\n          function or() {\n            return parserInput.$str('or');\n          }\n\n          result = this.conditionAnd(needsParens);\n\n          if (!result) {\n            return;\n          }\n\n          logical = or();\n\n          if (logical) {\n            next = this.condition(needsParens);\n\n            if (next) {\n              result = new tree.Condition(logical, result, next);\n            } else {\n              return;\n            }\n          }\n\n          return result;\n        },\n        conditionAnd: function conditionAnd(needsParens) {\n          var result;\n          var logical;\n          var next;\n          var self = this;\n\n          function insideCondition() {\n            var cond = self.negatedCondition(needsParens) || self.parenthesisCondition(needsParens);\n\n            if (!cond && !needsParens) {\n              return self.atomicCondition(needsParens);\n            }\n\n            return cond;\n          }\n\n          function and() {\n            return parserInput.$str('and');\n          }\n\n          result = insideCondition();\n\n          if (!result) {\n            return;\n          }\n\n          logical = and();\n\n          if (logical) {\n            next = this.conditionAnd(needsParens);\n\n            if (next) {\n              result = new tree.Condition(logical, result, next);\n            } else {\n              return;\n            }\n          }\n\n          return result;\n        },\n        negatedCondition: function negatedCondition(needsParens) {\n          if (parserInput.$str('not')) {\n            var result = this.parenthesisCondition(needsParens);\n\n            if (result) {\n              result.negate = !result.negate;\n            }\n\n            return result;\n          }\n        },\n        parenthesisCondition: function parenthesisCondition(needsParens) {\n          function tryConditionFollowedByParenthesis(me) {\n            var body;\n            parserInput.save();\n            body = me.condition(needsParens);\n\n            if (!body) {\n              parserInput.restore();\n              return;\n            }\n\n            if (!parserInput.$char(')')) {\n              parserInput.restore();\n              return;\n            }\n\n            parserInput.forget();\n            return body;\n          }\n\n          var body;\n          parserInput.save();\n\n          if (!parserInput.$str('(')) {\n            parserInput.restore();\n            return;\n          }\n\n          body = tryConditionFollowedByParenthesis(this);\n\n          if (body) {\n            parserInput.forget();\n            return body;\n          }\n\n          body = this.atomicCondition(needsParens);\n\n          if (!body) {\n            parserInput.restore();\n            return;\n          }\n\n          if (!parserInput.$char(')')) {\n            parserInput.restore(\"expected ')' got '\".concat(parserInput.currentChar(), \"'\"));\n            return;\n          }\n\n          parserInput.forget();\n          return body;\n        },\n        atomicCondition: function atomicCondition(needsParens) {\n          var entities = this.entities;\n          var index = parserInput.i;\n          var a;\n          var b;\n          var c;\n          var op;\n\n          function cond() {\n            return this.addition() || entities.keyword() || entities.quoted() || entities.mixinLookup();\n          }\n\n          cond = cond.bind(this);\n          a = cond();\n\n          if (a) {\n            if (parserInput.$char('>')) {\n              if (parserInput.$char('=')) {\n                op = '>=';\n              } else {\n                op = '>';\n              }\n            } else if (parserInput.$char('<')) {\n              if (parserInput.$char('=')) {\n                op = '<=';\n              } else {\n                op = '<';\n              }\n            } else if (parserInput.$char('=')) {\n              if (parserInput.$char('>')) {\n                op = '=>';\n              } else if (parserInput.$char('<')) {\n                op = '=<';\n              } else {\n                op = '=';\n              }\n            }\n\n            if (op) {\n              b = cond();\n\n              if (b) {\n                c = new tree.Condition(op, a, b, index, false);\n              } else {\n                error('expected expression');\n              }\n            } else {\n              c = new tree.Condition('=', a, new tree.Keyword('true'), index, false);\n            }\n\n            return c;\n          }\n        },\n        //\n        // An operand is anything that can be part of an operation,\n        // such as a Color, or a Variable\n        //\n        operand: function operand() {\n          var entities = this.entities;\n          var negate;\n\n          if (parserInput.peek(/^-[@\\$\\(]/)) {\n            negate = parserInput.$char('-');\n          }\n\n          var o = this.sub() || entities.dimension() || entities.color() || entities.variable() || entities.property() || entities.call() || entities.quoted(true) || entities.colorKeyword() || entities.mixinLookup();\n\n          if (negate) {\n            o.parensInOp = true;\n            o = new tree.Negative(o);\n          }\n\n          return o;\n        },\n        //\n        // Expressions either represent mathematical operations,\n        // or white-space delimited Entities.\n        //\n        //     1px solid black\n        //     @var * 2\n        //\n        expression: function expression() {\n          var entities = [];\n          var e;\n          var delim;\n          var index = parserInput.i;\n\n          do {\n            e = this.comment();\n\n            if (e) {\n              entities.push(e);\n              continue;\n            }\n\n            e = this.addition() || this.entity();\n\n            if (e) {\n              entities.push(e); // operations do not allow keyword \"/\" dimension (e.g. small/20px) so we support that here\n\n              if (!parserInput.peek(/^\\/[\\/*]/)) {\n                delim = parserInput.$char('/');\n\n                if (delim) {\n                  entities.push(new tree.Anonymous(delim, index));\n                }\n              }\n            }\n          } while (e);\n\n          if (entities.length > 0) {\n            return new tree.Expression(entities);\n          }\n        },\n        property: function property() {\n          var name = parserInput.$re(/^(\\*?-?[_a-zA-Z0-9-]+)\\s*:/);\n\n          if (name) {\n            return name[1];\n          }\n        },\n        ruleProperty: function ruleProperty() {\n          var name = [];\n          var index = [];\n          var s;\n          var k;\n          parserInput.save();\n          var simpleProperty = parserInput.$re(/^([_a-zA-Z0-9-]+)\\s*:/);\n\n          if (simpleProperty) {\n            name = [new tree.Keyword(simpleProperty[1])];\n            parserInput.forget();\n            return name;\n          }\n\n          function match(re) {\n            var i = parserInput.i;\n            var chunk = parserInput.$re(re);\n\n            if (chunk) {\n              index.push(i);\n              return name.push(chunk[1]);\n            }\n          }\n\n          match(/^(\\*?)/);\n\n          while (true) {\n            if (!match(/^((?:[\\w-]+)|(?:[@\\$]\\{[\\w-]+\\}))/)) {\n              break;\n            }\n          }\n\n          if (name.length > 1 && match(/^((?:\\+_|\\+)?)\\s*:/)) {\n            parserInput.forget(); // at last, we have the complete match now. move forward,\n            // convert name particles to tree objects and return:\n\n            if (name[0] === '') {\n              name.shift();\n              index.shift();\n            }\n\n            for (k = 0; k < name.length; k++) {\n              s = name[k];\n              name[k] = s.charAt(0) !== '@' && s.charAt(0) !== '$' ? new tree.Keyword(s) : s.charAt(0) === '@' ? new tree.Variable(\"@\".concat(s.slice(2, -1)), index[k], fileInfo) : new tree.Property(\"$\".concat(s.slice(2, -1)), index[k], fileInfo);\n            }\n\n            return name;\n          }\n\n          parserInput.restore();\n        }\n      }\n    };\n  };\n\n  Parser.serializeVars = function (vars) {\n    var s = '';\n\n    for (var name in vars) {\n      if (Object.hasOwnProperty.call(vars, name)) {\n        var value = vars[name];\n        s += \"\".concat((name[0] === '@' ? '' : '@') + name, \": \").concat(value).concat(String(value).slice(-1) === ';' ? '' : ';');\n      }\n    }\n\n    return s;\n  };\n\n  function boolean(condition) {\n    return condition ? Keyword.True : Keyword.False;\n  }\n\n  function If(condition, trueValue, falseValue) {\n    return condition ? trueValue : falseValue || new Anonymous();\n  }\n\n  var boolean$1 = {\n    boolean: boolean,\n    'if': If\n  };\n\n  var colorFunctions;\n\n  function clamp$1(val) {\n    return Math.min(1, Math.max(0, val));\n  }\n\n  function hsla(origColor, hsl) {\n    var color = colorFunctions.hsla(hsl.h, hsl.s, hsl.l, hsl.a);\n\n    if (color) {\n      if (origColor.value && /^(rgb|hsl)/.test(origColor.value)) {\n        color.value = origColor.value;\n      } else {\n        color.value = 'rgb';\n      }\n\n      return color;\n    }\n  }\n\n  function toHSL(color) {\n    if (color.toHSL) {\n      return color.toHSL();\n    } else {\n      throw new Error('Argument cannot be evaluated to a color');\n    }\n  }\n\n  function toHSV(color) {\n    if (color.toHSV) {\n      return color.toHSV();\n    } else {\n      throw new Error('Argument cannot be evaluated to a color');\n    }\n  }\n\n  function number(n) {\n    if (n instanceof Dimension) {\n      return parseFloat(n.unit.is('%') ? n.value / 100 : n.value);\n    } else if (typeof n === 'number') {\n      return n;\n    } else {\n      throw {\n        type: 'Argument',\n        message: 'color functions take numbers as parameters'\n      };\n    }\n  }\n\n  function scaled(n, size) {\n    if (n instanceof Dimension && n.unit.is('%')) {\n      return parseFloat(n.value * size / 100);\n    } else {\n      return number(n);\n    }\n  }\n\n  colorFunctions = {\n    rgb: function rgb(r, g, b) {\n      var color = colorFunctions.rgba(r, g, b, 1.0);\n\n      if (color) {\n        color.value = 'rgb';\n        return color;\n      }\n    },\n    rgba: function rgba(r, g, b, a) {\n      try {\n        if (r instanceof Color) {\n          if (g) {\n            a = number(g);\n          } else {\n            a = r.alpha;\n          }\n\n          return new Color(r.rgb, a, 'rgba');\n        }\n\n        var rgb = [r, g, b].map(function (c) {\n          return scaled(c, 255);\n        });\n        a = number(a);\n        return new Color(rgb, a, 'rgba');\n      } catch (e) {}\n    },\n    hsl: function hsl(h, s, l) {\n      var color = colorFunctions.hsla(h, s, l, 1.0);\n\n      if (color) {\n        color.value = 'hsl';\n        return color;\n      }\n    },\n    hsla: function hsla(h, s, l, a) {\n      try {\n        var hue = function hue(h) {\n          h = h < 0 ? h + 1 : h > 1 ? h - 1 : h;\n\n          if (h * 6 < 1) {\n            return m1 + (m2 - m1) * h * 6;\n          } else if (h * 2 < 1) {\n            return m2;\n          } else if (h * 3 < 2) {\n            return m1 + (m2 - m1) * (2 / 3 - h) * 6;\n          } else {\n            return m1;\n          }\n        };\n\n        if (h instanceof Color) {\n          if (s) {\n            a = number(s);\n          } else {\n            a = h.alpha;\n          }\n\n          return new Color(h.rgb, a, 'hsla');\n        }\n\n        var m1;\n        var m2;\n        h = number(h) % 360 / 360;\n        s = clamp$1(number(s));\n        l = clamp$1(number(l));\n        a = clamp$1(number(a));\n        m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n        m1 = l * 2 - m2;\n        var rgb = [hue(h + 1 / 3) * 255, hue(h) * 255, hue(h - 1 / 3) * 255];\n        a = number(a);\n        return new Color(rgb, a, 'hsla');\n      } catch (e) {}\n    },\n    hsv: function hsv(h, s, v) {\n      return colorFunctions.hsva(h, s, v, 1.0);\n    },\n    hsva: function hsva(h, s, v, a) {\n      h = number(h) % 360 / 360 * 360;\n      s = number(s);\n      v = number(v);\n      a = number(a);\n      var i;\n      var f;\n      i = Math.floor(h / 60 % 6);\n      f = h / 60 - i;\n      var vs = [v, v * (1 - s), v * (1 - f * s), v * (1 - (1 - f) * s)];\n      var perm = [[0, 3, 1], [2, 0, 1], [1, 0, 3], [1, 2, 0], [3, 1, 0], [0, 1, 2]];\n      return colorFunctions.rgba(vs[perm[i][0]] * 255, vs[perm[i][1]] * 255, vs[perm[i][2]] * 255, a);\n    },\n    hue: function hue(color) {\n      return new Dimension(toHSL(color).h);\n    },\n    saturation: function saturation(color) {\n      return new Dimension(toHSL(color).s * 100, '%');\n    },\n    lightness: function lightness(color) {\n      return new Dimension(toHSL(color).l * 100, '%');\n    },\n    hsvhue: function hsvhue(color) {\n      return new Dimension(toHSV(color).h);\n    },\n    hsvsaturation: function hsvsaturation(color) {\n      return new Dimension(toHSV(color).s * 100, '%');\n    },\n    hsvvalue: function hsvvalue(color) {\n      return new Dimension(toHSV(color).v * 100, '%');\n    },\n    red: function red(color) {\n      return new Dimension(color.rgb[0]);\n    },\n    green: function green(color) {\n      return new Dimension(color.rgb[1]);\n    },\n    blue: function blue(color) {\n      return new Dimension(color.rgb[2]);\n    },\n    alpha: function alpha(color) {\n      return new Dimension(toHSL(color).a);\n    },\n    luma: function luma(color) {\n      return new Dimension(color.luma() * color.alpha * 100, '%');\n    },\n    luminance: function luminance(color) {\n      var luminance = 0.2126 * color.rgb[0] / 255 + 0.7152 * color.rgb[1] / 255 + 0.0722 * color.rgb[2] / 255;\n      return new Dimension(luminance * color.alpha * 100, '%');\n    },\n    saturate: function saturate(color, amount, method) {\n      // filter: saturate(3.2);\n      // should be kept as is, so check for color\n      if (!color.rgb) {\n        return null;\n      }\n\n      var hsl = toHSL(color);\n\n      if (typeof method !== 'undefined' && method.value === 'relative') {\n        hsl.s += hsl.s * amount.value / 100;\n      } else {\n        hsl.s += amount.value / 100;\n      }\n\n      hsl.s = clamp$1(hsl.s);\n      return hsla(color, hsl);\n    },\n    desaturate: function desaturate(color, amount, method) {\n      var hsl = toHSL(color);\n\n      if (typeof method !== 'undefined' && method.value === 'relative') {\n        hsl.s -= hsl.s * amount.value / 100;\n      } else {\n        hsl.s -= amount.value / 100;\n      }\n\n      hsl.s = clamp$1(hsl.s);\n      return hsla(color, hsl);\n    },\n    lighten: function lighten(color, amount, method) {\n      var hsl = toHSL(color);\n\n      if (typeof method !== 'undefined' && method.value === 'relative') {\n        hsl.l += hsl.l * amount.value / 100;\n      } else {\n        hsl.l += amount.value / 100;\n      }\n\n      hsl.l = clamp$1(hsl.l);\n      return hsla(color, hsl);\n    },\n    darken: function darken(color, amount, method) {\n      var hsl = toHSL(color);\n\n      if (typeof method !== 'undefined' && method.value === 'relative') {\n        hsl.l -= hsl.l * amount.value / 100;\n      } else {\n        hsl.l -= amount.value / 100;\n      }\n\n      hsl.l = clamp$1(hsl.l);\n      return hsla(color, hsl);\n    },\n    fadein: function fadein(color, amount, method) {\n      var hsl = toHSL(color);\n\n      if (typeof method !== 'undefined' && method.value === 'relative') {\n        hsl.a += hsl.a * amount.value / 100;\n      } else {\n        hsl.a += amount.value / 100;\n      }\n\n      hsl.a = clamp$1(hsl.a);\n      return hsla(color, hsl);\n    },\n    fadeout: function fadeout(color, amount, method) {\n      var hsl = toHSL(color);\n\n      if (typeof method !== 'undefined' && method.value === 'relative') {\n        hsl.a -= hsl.a * amount.value / 100;\n      } else {\n        hsl.a -= amount.value / 100;\n      }\n\n      hsl.a = clamp$1(hsl.a);\n      return hsla(color, hsl);\n    },\n    fade: function fade(color, amount) {\n      var hsl = toHSL(color);\n      hsl.a = amount.value / 100;\n      hsl.a = clamp$1(hsl.a);\n      return hsla(color, hsl);\n    },\n    spin: function spin(color, amount) {\n      var hsl = toHSL(color);\n      var hue = (hsl.h + amount.value) % 360;\n      hsl.h = hue < 0 ? 360 + hue : hue;\n      return hsla(color, hsl);\n    },\n    //\n    // Copyright (c) 2006-2009 Hampton Catlin, Natalie Weizenbaum, and Chris Eppstein\n    // http://sass-lang.com\n    //\n    mix: function mix(color1, color2, weight) {\n      if (!weight) {\n        weight = new Dimension(50);\n      }\n\n      var p = weight.value / 100.0;\n      var w = p * 2 - 1;\n      var a = toHSL(color1).a - toHSL(color2).a;\n      var w1 = ((w * a == -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      var w2 = 1 - w1;\n      var rgb = [color1.rgb[0] * w1 + color2.rgb[0] * w2, color1.rgb[1] * w1 + color2.rgb[1] * w2, color1.rgb[2] * w1 + color2.rgb[2] * w2];\n      var alpha = color1.alpha * p + color2.alpha * (1 - p);\n      return new Color(rgb, alpha);\n    },\n    greyscale: function greyscale(color) {\n      return colorFunctions.desaturate(color, new Dimension(100));\n    },\n    contrast: function contrast(color, dark, light, threshold) {\n      // filter: contrast(3.2);\n      // should be kept as is, so check for color\n      if (!color.rgb) {\n        return null;\n      }\n\n      if (typeof light === 'undefined') {\n        light = colorFunctions.rgba(255, 255, 255, 1.0);\n      }\n\n      if (typeof dark === 'undefined') {\n        dark = colorFunctions.rgba(0, 0, 0, 1.0);\n      } // Figure out which is actually light and dark:\n\n\n      if (dark.luma() > light.luma()) {\n        var t = light;\n        light = dark;\n        dark = t;\n      }\n\n      if (typeof threshold === 'undefined') {\n        threshold = 0.43;\n      } else {\n        threshold = number(threshold);\n      }\n\n      if (color.luma() < threshold) {\n        return light;\n      } else {\n        return dark;\n      }\n    },\n    // Changes made in 2.7.0 - Reverted in 3.0.0\n    // contrast: function (color, color1, color2, threshold) {\n    //     // Return which of `color1` and `color2` has the greatest contrast with `color`\n    //     // according to the standard WCAG contrast ratio calculation.\n    //     // http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n    //     // The threshold param is no longer used, in line with SASS.\n    //     // filter: contrast(3.2);\n    //     // should be kept as is, so check for color\n    //     if (!color.rgb) {\n    //         return null;\n    //     }\n    //     if (typeof color1 === 'undefined') {\n    //         color1 = colorFunctions.rgba(0, 0, 0, 1.0);\n    //     }\n    //     if (typeof color2 === 'undefined') {\n    //         color2 = colorFunctions.rgba(255, 255, 255, 1.0);\n    //     }\n    //     var contrast1, contrast2;\n    //     var luma = color.luma();\n    //     var luma1 = color1.luma();\n    //     var luma2 = color2.luma();\n    //     // Calculate contrast ratios for each color\n    //     if (luma > luma1) {\n    //         contrast1 = (luma + 0.05) / (luma1 + 0.05);\n    //     } else {\n    //         contrast1 = (luma1 + 0.05) / (luma + 0.05);\n    //     }\n    //     if (luma > luma2) {\n    //         contrast2 = (luma + 0.05) / (luma2 + 0.05);\n    //     } else {\n    //         contrast2 = (luma2 + 0.05) / (luma + 0.05);\n    //     }\n    //     if (contrast1 > contrast2) {\n    //         return color1;\n    //     } else {\n    //         return color2;\n    //     }\n    // },\n    argb: function argb(color) {\n      return new Anonymous(color.toARGB());\n    },\n    color: function color(c) {\n      if (c instanceof Quoted && /^#([A-Fa-f0-9]{8}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{3,4})$/i.test(c.value)) {\n        var val = c.value.slice(1);\n        return new Color(val, undefined, \"#\".concat(val));\n      }\n\n      if (c instanceof Color || (c = Color.fromKeyword(c.value))) {\n        c.value = undefined;\n        return c;\n      }\n\n      throw {\n        type: 'Argument',\n        message: 'argument must be a color keyword or 3|4|6|8 digit hex e.g. #FFF'\n      };\n    },\n    tint: function tint(color, amount) {\n      return colorFunctions.mix(colorFunctions.rgb(255, 255, 255), color, amount);\n    },\n    shade: function shade(color, amount) {\n      return colorFunctions.mix(colorFunctions.rgb(0, 0, 0), color, amount);\n    }\n  };\n  var color = colorFunctions;\n\n  // ref: http://www.w3.org/TR/compositing-1\n\n  function colorBlend(mode, color1, color2) {\n    var ab = color1.alpha; // result\n\n    var // backdrop\n    cb;\n    var as = color2.alpha;\n    var // source\n    cs;\n    var ar;\n    var cr;\n    var r = [];\n    ar = as + ab * (1 - as);\n\n    for (var i = 0; i < 3; i++) {\n      cb = color1.rgb[i] / 255;\n      cs = color2.rgb[i] / 255;\n      cr = mode(cb, cs);\n\n      if (ar) {\n        cr = (as * cs + ab * (cb - as * (cb + cs - cr))) / ar;\n      }\n\n      r[i] = cr * 255;\n    }\n\n    return new Color(r, ar);\n  }\n\n  var colorBlendModeFunctions = {\n    multiply: function multiply(cb, cs) {\n      return cb * cs;\n    },\n    screen: function screen(cb, cs) {\n      return cb + cs - cb * cs;\n    },\n    overlay: function overlay(cb, cs) {\n      cb *= 2;\n      return cb <= 1 ? colorBlendModeFunctions.multiply(cb, cs) : colorBlendModeFunctions.screen(cb - 1, cs);\n    },\n    softlight: function softlight(cb, cs) {\n      var d = 1;\n      var e = cb;\n\n      if (cs > 0.5) {\n        e = 1;\n        d = cb > 0.25 ? Math.sqrt(cb) : ((16 * cb - 12) * cb + 4) * cb;\n      }\n\n      return cb - (1 - 2 * cs) * e * (d - cb);\n    },\n    hardlight: function hardlight(cb, cs) {\n      return colorBlendModeFunctions.overlay(cs, cb);\n    },\n    difference: function difference(cb, cs) {\n      return Math.abs(cb - cs);\n    },\n    exclusion: function exclusion(cb, cs) {\n      return cb + cs - 2 * cb * cs;\n    },\n    // non-w3c functions:\n    average: function average(cb, cs) {\n      return (cb + cs) / 2;\n    },\n    negation: function negation(cb, cs) {\n      return 1 - Math.abs(cb + cs - 1);\n    }\n  };\n\n  for (var f in colorBlendModeFunctions) {\n    if (colorBlendModeFunctions.hasOwnProperty(f)) {\n      colorBlend[f] = colorBlend.bind(null, colorBlendModeFunctions[f]);\n    }\n  }\n\n  var dataUri = (function (environment) {\n    var fallback = function fallback(functionThis, node) {\n      return new URL(node, functionThis.index, functionThis.currentFileInfo).eval(functionThis.context);\n    };\n\n    return {\n      'data-uri': function dataUri(mimetypeNode, filePathNode) {\n        if (!filePathNode) {\n          filePathNode = mimetypeNode;\n          mimetypeNode = null;\n        }\n\n        var mimetype = mimetypeNode && mimetypeNode.value;\n        var filePath = filePathNode.value;\n        var currentFileInfo = this.currentFileInfo;\n        var currentDirectory = currentFileInfo.rewriteUrls ? currentFileInfo.currentDirectory : currentFileInfo.entryPath;\n        var fragmentStart = filePath.indexOf('#');\n        var fragment = '';\n\n        if (fragmentStart !== -1) {\n          fragment = filePath.slice(fragmentStart);\n          filePath = filePath.slice(0, fragmentStart);\n        }\n\n        var context = clone(this.context);\n        context.rawBuffer = true;\n        var fileManager = environment.getFileManager(filePath, currentDirectory, context, environment, true);\n\n        if (!fileManager) {\n          return fallback(this, filePathNode);\n        }\n\n        var useBase64 = false; // detect the mimetype if not given\n\n        if (!mimetypeNode) {\n          mimetype = environment.mimeLookup(filePath);\n\n          if (mimetype === 'image/svg+xml') {\n            useBase64 = false;\n          } else {\n            // use base 64 unless it's an ASCII or UTF-8 format\n            var charset = environment.charsetLookup(mimetype);\n            useBase64 = ['US-ASCII', 'UTF-8'].indexOf(charset) < 0;\n          }\n\n          if (useBase64) {\n            mimetype += ';base64';\n          }\n        } else {\n          useBase64 = /;base64$/.test(mimetype);\n        }\n\n        var fileSync = fileManager.loadFileSync(filePath, currentDirectory, context, environment);\n\n        if (!fileSync.contents) {\n          logger.warn(\"Skipped data-uri embedding of \".concat(filePath, \" because file not found\"));\n          return fallback(this, filePathNode || mimetypeNode);\n        }\n\n        var buf = fileSync.contents;\n\n        if (useBase64 && !environment.encodeBase64) {\n          return fallback(this, filePathNode);\n        }\n\n        buf = useBase64 ? environment.encodeBase64(buf) : encodeURIComponent(buf);\n        var uri = \"data:\".concat(mimetype, \",\").concat(buf).concat(fragment);\n        return new URL(new Quoted(\"\\\"\".concat(uri, \"\\\"\"), uri, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);\n      }\n    };\n  });\n\n  var getItemsFromNode = function getItemsFromNode(node) {\n    // handle non-array values as an array of length 1\n    // return 'undefined' if index is invalid\n    var items = Array.isArray(node.value) ? node.value : Array(node);\n    return items;\n  };\n\n  var list = {\n    _SELF: function _SELF(n) {\n      return n;\n    },\n    extract: function extract(values, index) {\n      // (1-based index)\n      index = index.value - 1;\n      return getItemsFromNode(values)[index];\n    },\n    length: function length(values) {\n      return new Dimension(getItemsFromNode(values).length);\n    },\n\n    /**\n     * Creates a Less list of incremental values.\n     * Modeled after Lodash's range function, also exists natively in PHP\n     * \n     * @param {Dimension} [start=1]\n     * @param {Dimension} end  - e.g. 10 or 10px - unit is added to output\n     * @param {Dimension} [step=1] \n     */\n    range: function range(start, end, step) {\n      var from;\n      var to;\n      var stepValue = 1;\n      var list = [];\n\n      if (end) {\n        to = end;\n        from = start.value;\n\n        if (step) {\n          stepValue = step.value;\n        }\n      } else {\n        from = 1;\n        to = start;\n      }\n\n      for (var i = from; i <= to.value; i += stepValue) {\n        list.push(new Dimension(i, to.unit));\n      }\n\n      return new Expression(list);\n    },\n    each: function each(list, rs) {\n      var rules = [];\n      var newRules;\n      var iterator;\n\n      if (list.value && !(list instanceof Quoted)) {\n        if (Array.isArray(list.value)) {\n          iterator = list.value;\n        } else {\n          iterator = [list.value];\n        }\n      } else if (list.ruleset) {\n        iterator = list.ruleset.rules;\n      } else if (list.rules) {\n        iterator = list.rules;\n      } else if (Array.isArray(list)) {\n        iterator = list;\n      } else {\n        iterator = [list];\n      }\n\n      var valueName = '@value';\n      var keyName = '@key';\n      var indexName = '@index';\n\n      if (rs.params) {\n        valueName = rs.params[0] && rs.params[0].name;\n        keyName = rs.params[1] && rs.params[1].name;\n        indexName = rs.params[2] && rs.params[2].name;\n        rs = rs.rules;\n      } else {\n        rs = rs.ruleset;\n      }\n\n      for (var i = 0; i < iterator.length; i++) {\n        var key = void 0;\n        var value = void 0;\n        var item = iterator[i];\n\n        if (item instanceof Declaration) {\n          key = typeof item.name === 'string' ? item.name : item.name[0].value;\n          value = item.value;\n        } else {\n          key = new Dimension(i + 1);\n          value = item;\n        }\n\n        if (item instanceof Comment) {\n          continue;\n        }\n\n        newRules = rs.rules.slice(0);\n\n        if (valueName) {\n          newRules.push(new Declaration(valueName, value, false, false, this.index, this.currentFileInfo));\n        }\n\n        if (indexName) {\n          newRules.push(new Declaration(indexName, new Dimension(i + 1), false, false, this.index, this.currentFileInfo));\n        }\n\n        if (keyName) {\n          newRules.push(new Declaration(keyName, key, false, false, this.index, this.currentFileInfo));\n        }\n\n        rules.push(new Ruleset([new Selector([new Element(\"\", '&')])], newRules, rs.strictImports, rs.visibilityInfo()));\n      }\n\n      return new Ruleset([new Selector([new Element(\"\", '&')])], rules, rs.strictImports, rs.visibilityInfo()).eval(this.context);\n    }\n  };\n\n  var MathHelper = function MathHelper(fn, unit, n) {\n    if (!(n instanceof Dimension)) {\n      throw {\n        type: 'Argument',\n        message: 'argument must be a number'\n      };\n    }\n\n    if (unit == null) {\n      unit = n.unit;\n    } else {\n      n = n.unify();\n    }\n\n    return new Dimension(fn(parseFloat(n.value)), unit);\n  };\n\n  var mathFunctions = {\n    // name,  unit\n    ceil: null,\n    floor: null,\n    sqrt: null,\n    abs: null,\n    tan: '',\n    sin: '',\n    cos: '',\n    atan: 'rad',\n    asin: 'rad',\n    acos: 'rad'\n  };\n\n  for (var f$1 in mathFunctions) {\n    if (mathFunctions.hasOwnProperty(f$1)) {\n      mathFunctions[f$1] = MathHelper.bind(null, Math[f$1], mathFunctions[f$1]);\n    }\n  }\n\n  mathFunctions.round = function (n, f) {\n    var fraction = typeof f === 'undefined' ? 0 : f.value;\n    return MathHelper(function (num) {\n      return num.toFixed(fraction);\n    }, null, n);\n  };\n\n  var minMax = function minMax(isMin, args) {\n    args = Array.prototype.slice.call(args);\n\n    switch (args.length) {\n      case 0:\n        throw {\n          type: 'Argument',\n          message: 'one or more arguments required'\n        };\n    }\n\n    var i; // key is the unit.toString() for unified Dimension values,\n\n    var j;\n    var current;\n    var currentUnified;\n    var referenceUnified;\n    var unit;\n    var unitStatic;\n    var unitClone;\n    var // elems only contains original argument values.\n    order = [];\n    var values = {}; // value is the index into the order array.\n\n    for (i = 0; i < args.length; i++) {\n      current = args[i];\n\n      if (!(current instanceof Dimension)) {\n        if (Array.isArray(args[i].value)) {\n          Array.prototype.push.apply(args, Array.prototype.slice.call(args[i].value));\n        }\n\n        continue;\n      }\n\n      currentUnified = current.unit.toString() === '' && unitClone !== undefined ? new Dimension(current.value, unitClone).unify() : current.unify();\n      unit = currentUnified.unit.toString() === '' && unitStatic !== undefined ? unitStatic : currentUnified.unit.toString();\n      unitStatic = unit !== '' && unitStatic === undefined || unit !== '' && order[0].unify().unit.toString() === '' ? unit : unitStatic;\n      unitClone = unit !== '' && unitClone === undefined ? current.unit.toString() : unitClone;\n      j = values[''] !== undefined && unit !== '' && unit === unitStatic ? values[''] : values[unit];\n\n      if (j === undefined) {\n        if (unitStatic !== undefined && unit !== unitStatic) {\n          throw {\n            type: 'Argument',\n            message: 'incompatible types'\n          };\n        }\n\n        values[unit] = order.length;\n        order.push(current);\n        continue;\n      }\n\n      referenceUnified = order[j].unit.toString() === '' && unitClone !== undefined ? new Dimension(order[j].value, unitClone).unify() : order[j].unify();\n\n      if (isMin && currentUnified.value < referenceUnified.value || !isMin && currentUnified.value > referenceUnified.value) {\n        order[j] = current;\n      }\n    }\n\n    if (order.length == 1) {\n      return order[0];\n    }\n\n    args = order.map(function (a) {\n      return a.toCSS(this.context);\n    }).join(this.context.compress ? ',' : ', ');\n    return new Anonymous(\"\".concat(isMin ? 'min' : 'max', \"(\").concat(args, \")\"));\n  };\n\n  var number$1 = {\n    min: function min() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return minMax(true, args);\n    },\n    max: function max() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return minMax(false, args);\n    },\n    convert: function convert(val, unit) {\n      return val.convertTo(unit.value);\n    },\n    pi: function pi() {\n      return new Dimension(Math.PI);\n    },\n    mod: function mod(a, b) {\n      return new Dimension(a.value % b.value, a.unit);\n    },\n    pow: function pow(x, y) {\n      if (typeof x === 'number' && typeof y === 'number') {\n        x = new Dimension(x);\n        y = new Dimension(y);\n      } else if (!(x instanceof Dimension) || !(y instanceof Dimension)) {\n        throw {\n          type: 'Argument',\n          message: 'arguments must be numbers'\n        };\n      }\n\n      return new Dimension(Math.pow(x.value, y.value), x.unit);\n    },\n    percentage: function percentage(n) {\n      var result = MathHelper(function (num) {\n        return num * 100;\n      }, '%', n);\n      return result;\n    }\n  };\n\n  var string = {\n    e: function e(str) {\n      return new Quoted('\"', str instanceof JavaScript ? str.evaluated : str.value, true);\n    },\n    escape: function escape(str) {\n      return new Anonymous(encodeURI(str.value).replace(/=/g, '%3D').replace(/:/g, '%3A').replace(/#/g, '%23').replace(/;/g, '%3B').replace(/\\(/g, '%28').replace(/\\)/g, '%29'));\n    },\n    replace: function replace(string, pattern, replacement, flags) {\n      var result = string.value;\n      replacement = replacement.type === 'Quoted' ? replacement.value : replacement.toCSS();\n      result = result.replace(new RegExp(pattern.value, flags ? flags.value : ''), replacement);\n      return new Quoted(string.quote || '', result, string.escaped);\n    },\n    '%': function _(string\n    /* arg, arg, ... */\n    ) {\n      var args = Array.prototype.slice.call(arguments, 1);\n      var result = string.value;\n\n      var _loop = function _loop(i) {\n        /* jshint loopfunc:true */\n        result = result.replace(/%[sda]/i, function (token) {\n          var value = args[i].type === 'Quoted' && token.match(/s/i) ? args[i].value : args[i].toCSS();\n          return token.match(/[A-Z]$/) ? encodeURIComponent(value) : value;\n        });\n      };\n\n      for (var i = 0; i < args.length; i++) {\n        _loop(i);\n      }\n\n      result = result.replace(/%%/g, '%');\n      return new Quoted(string.quote || '', result, string.escaped);\n    }\n  };\n\n  var svg = (function (environment) {\n    return {\n      'svg-gradient': function svgGradient(direction) {\n        var stops;\n        var gradientDirectionSvg;\n        var gradientType = 'linear';\n        var rectangleDimension = 'x=\"0\" y=\"0\" width=\"1\" height=\"1\"';\n        var renderEnv = {\n          compress: false\n        };\n        var returner;\n        var directionValue = direction.toCSS(renderEnv);\n        var i;\n        var color;\n        var position;\n        var positionValue;\n        var alpha;\n\n        function throwArgumentDescriptor() {\n          throw {\n            type: 'Argument',\n            message: 'svg-gradient expects direction, start_color [start_position], [color position,]...,' + ' end_color [end_position] or direction, color list'\n          };\n        }\n\n        if (arguments.length == 2) {\n          if (arguments[1].value.length < 2) {\n            throwArgumentDescriptor();\n          }\n\n          stops = arguments[1].value;\n        } else if (arguments.length < 3) {\n          throwArgumentDescriptor();\n        } else {\n          stops = Array.prototype.slice.call(arguments, 1);\n        }\n\n        switch (directionValue) {\n          case 'to bottom':\n            gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\"';\n            break;\n\n          case 'to right':\n            gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\"';\n            break;\n\n          case 'to bottom right':\n            gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\"';\n            break;\n\n          case 'to top right':\n            gradientDirectionSvg = 'x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\"';\n            break;\n\n          case 'ellipse':\n          case 'ellipse at center':\n            gradientType = 'radial';\n            gradientDirectionSvg = 'cx=\"50%\" cy=\"50%\" r=\"75%\"';\n            rectangleDimension = 'x=\"-50\" y=\"-50\" width=\"101\" height=\"101\"';\n            break;\n\n          default:\n            throw {\n              type: 'Argument',\n              message: 'svg-gradient direction must be \\'to bottom\\', \\'to right\\',' + ' \\'to bottom right\\', \\'to top right\\' or \\'ellipse at center\\''\n            };\n        }\n\n        returner = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 1 1\\\"><\".concat(gradientType, \"Gradient id=\\\"g\\\" \").concat(gradientDirectionSvg, \">\");\n\n        for (i = 0; i < stops.length; i += 1) {\n          if (stops[i] instanceof Expression) {\n            color = stops[i].value[0];\n            position = stops[i].value[1];\n          } else {\n            color = stops[i];\n            position = undefined;\n          }\n\n          if (!(color instanceof Color) || !((i === 0 || i + 1 === stops.length) && position === undefined) && !(position instanceof Dimension)) {\n            throwArgumentDescriptor();\n          }\n\n          positionValue = position ? position.toCSS(renderEnv) : i === 0 ? '0%' : '100%';\n          alpha = color.alpha;\n          returner += \"<stop offset=\\\"\".concat(positionValue, \"\\\" stop-color=\\\"\").concat(color.toRGB(), \"\\\"\").concat(alpha < 1 ? \" stop-opacity=\\\"\".concat(alpha, \"\\\"\") : '', \"/>\");\n        }\n\n        returner += \"</\".concat(gradientType, \"Gradient><rect \").concat(rectangleDimension, \" fill=\\\"url(#g)\\\" /></svg>\");\n        returner = encodeURIComponent(returner);\n        returner = \"data:image/svg+xml,\".concat(returner);\n        return new URL(new Quoted(\"'\".concat(returner, \"'\"), returner, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);\n      }\n    };\n  });\n\n  var isa = function isa(n, Type) {\n    return n instanceof Type ? Keyword.True : Keyword.False;\n  };\n\n  var isunit = function isunit(n, unit) {\n    if (unit === undefined) {\n      throw {\n        type: 'Argument',\n        message: 'missing the required second argument to isunit.'\n      };\n    }\n\n    unit = typeof unit.value === 'string' ? unit.value : unit;\n\n    if (typeof unit !== 'string') {\n      throw {\n        type: 'Argument',\n        message: 'Second argument to isunit should be a unit or a string.'\n      };\n    }\n\n    return n instanceof Dimension && n.unit.is(unit) ? Keyword.True : Keyword.False;\n  };\n\n  var types = {\n    isruleset: function isruleset(n) {\n      return isa(n, DetachedRuleset);\n    },\n    iscolor: function iscolor(n) {\n      return isa(n, Color);\n    },\n    isnumber: function isnumber(n) {\n      return isa(n, Dimension);\n    },\n    isstring: function isstring(n) {\n      return isa(n, Quoted);\n    },\n    iskeyword: function iskeyword(n) {\n      return isa(n, Keyword);\n    },\n    isurl: function isurl(n) {\n      return isa(n, URL);\n    },\n    ispixel: function ispixel(n) {\n      return isunit(n, 'px');\n    },\n    ispercentage: function ispercentage(n) {\n      return isunit(n, '%');\n    },\n    isem: function isem(n) {\n      return isunit(n, 'em');\n    },\n    isunit: isunit,\n    unit: function unit(val, _unit) {\n      if (!(val instanceof Dimension)) {\n        throw {\n          type: 'Argument',\n          message: \"the first argument to unit must be a number\".concat(val instanceof Operation ? '. Have you forgotten parenthesis?' : '')\n        };\n      }\n\n      if (_unit) {\n        if (_unit instanceof Keyword) {\n          _unit = _unit.value;\n        } else {\n          _unit = _unit.toCSS();\n        }\n      } else {\n        _unit = '';\n      }\n\n      return new Dimension(val.value, _unit);\n    },\n    'get-unit': function getUnit(n) {\n      return new Anonymous(n.unit);\n    }\n  };\n\n  var Functions = (function (environment) {\n    var functions = {\n      functionRegistry: functionRegistry,\n      functionCaller: functionCaller\n    }; // register functions\n\n    functionRegistry.addMultiple(boolean$1);\n    functionRegistry.add('default', defaultFunc.eval.bind(defaultFunc));\n    functionRegistry.addMultiple(color);\n    functionRegistry.addMultiple(colorBlend);\n    functionRegistry.addMultiple(dataUri(environment));\n    functionRegistry.addMultiple(list);\n    functionRegistry.addMultiple(mathFunctions);\n    functionRegistry.addMultiple(number$1);\n    functionRegistry.addMultiple(string);\n    functionRegistry.addMultiple(svg());\n    functionRegistry.addMultiple(types);\n    return functions;\n  });\n\n  var sourceMapOutput = (function (environment) {\n    var SourceMapOutput =\n    /*#__PURE__*/\n    function () {\n      function SourceMapOutput(options) {\n        _classCallCheck(this, SourceMapOutput);\n\n        this._css = [];\n        this._rootNode = options.rootNode;\n        this._contentsMap = options.contentsMap;\n        this._contentsIgnoredCharsMap = options.contentsIgnoredCharsMap;\n\n        if (options.sourceMapFilename) {\n          this._sourceMapFilename = options.sourceMapFilename.replace(/\\\\/g, '/');\n        }\n\n        this._outputFilename = options.outputFilename;\n        this.sourceMapURL = options.sourceMapURL;\n\n        if (options.sourceMapBasepath) {\n          this._sourceMapBasepath = options.sourceMapBasepath.replace(/\\\\/g, '/');\n        }\n\n        if (options.sourceMapRootpath) {\n          this._sourceMapRootpath = options.sourceMapRootpath.replace(/\\\\/g, '/');\n\n          if (this._sourceMapRootpath.charAt(this._sourceMapRootpath.length - 1) !== '/') {\n            this._sourceMapRootpath += '/';\n          }\n        } else {\n          this._sourceMapRootpath = '';\n        }\n\n        this._outputSourceFiles = options.outputSourceFiles;\n        this._sourceMapGeneratorConstructor = environment.getSourceMapGenerator();\n        this._lineNumber = 0;\n        this._column = 0;\n      }\n\n      _createClass(SourceMapOutput, [{\n        key: \"removeBasepath\",\n        value: function removeBasepath(path) {\n          if (this._sourceMapBasepath && path.indexOf(this._sourceMapBasepath) === 0) {\n            path = path.substring(this._sourceMapBasepath.length);\n\n            if (path.charAt(0) === '\\\\' || path.charAt(0) === '/') {\n              path = path.substring(1);\n            }\n          }\n\n          return path;\n        }\n      }, {\n        key: \"normalizeFilename\",\n        value: function normalizeFilename(filename) {\n          filename = filename.replace(/\\\\/g, '/');\n          filename = this.removeBasepath(filename);\n          return (this._sourceMapRootpath || '') + filename;\n        }\n      }, {\n        key: \"add\",\n        value: function add(chunk, fileInfo, index, mapLines) {\n          // ignore adding empty strings\n          if (!chunk) {\n            return;\n          }\n\n          var lines;\n          var sourceLines;\n          var columns;\n          var sourceColumns;\n          var i;\n\n          if (fileInfo && fileInfo.filename) {\n            var inputSource = this._contentsMap[fileInfo.filename]; // remove vars/banner added to the top of the file\n\n            if (this._contentsIgnoredCharsMap[fileInfo.filename]) {\n              // adjust the index\n              index -= this._contentsIgnoredCharsMap[fileInfo.filename];\n\n              if (index < 0) {\n                index = 0;\n              } // adjust the source\n\n\n              inputSource = inputSource.slice(this._contentsIgnoredCharsMap[fileInfo.filename]);\n            } // ignore empty content\n\n\n            if (inputSource === undefined) {\n              return;\n            }\n\n            inputSource = inputSource.substring(0, index);\n            sourceLines = inputSource.split('\\n');\n            sourceColumns = sourceLines[sourceLines.length - 1];\n          }\n\n          lines = chunk.split('\\n');\n          columns = lines[lines.length - 1];\n\n          if (fileInfo && fileInfo.filename) {\n            if (!mapLines) {\n              this._sourceMapGenerator.addMapping({\n                generated: {\n                  line: this._lineNumber + 1,\n                  column: this._column\n                },\n                original: {\n                  line: sourceLines.length,\n                  column: sourceColumns.length\n                },\n                source: this.normalizeFilename(fileInfo.filename)\n              });\n            } else {\n              for (i = 0; i < lines.length; i++) {\n                this._sourceMapGenerator.addMapping({\n                  generated: {\n                    line: this._lineNumber + i + 1,\n                    column: i === 0 ? this._column : 0\n                  },\n                  original: {\n                    line: sourceLines.length + i,\n                    column: i === 0 ? sourceColumns.length : 0\n                  },\n                  source: this.normalizeFilename(fileInfo.filename)\n                });\n              }\n            }\n          }\n\n          if (lines.length === 1) {\n            this._column += columns.length;\n          } else {\n            this._lineNumber += lines.length - 1;\n            this._column = columns.length;\n          }\n\n          this._css.push(chunk);\n        }\n      }, {\n        key: \"isEmpty\",\n        value: function isEmpty() {\n          return this._css.length === 0;\n        }\n      }, {\n        key: \"toCSS\",\n        value: function toCSS(context) {\n          this._sourceMapGenerator = new this._sourceMapGeneratorConstructor({\n            file: this._outputFilename,\n            sourceRoot: null\n          });\n\n          if (this._outputSourceFiles) {\n            for (var filename in this._contentsMap) {\n              if (this._contentsMap.hasOwnProperty(filename)) {\n                var source = this._contentsMap[filename];\n\n                if (this._contentsIgnoredCharsMap[filename]) {\n                  source = source.slice(this._contentsIgnoredCharsMap[filename]);\n                }\n\n                this._sourceMapGenerator.setSourceContent(this.normalizeFilename(filename), source);\n              }\n            }\n          }\n\n          this._rootNode.genCSS(context, this);\n\n          if (this._css.length > 0) {\n            var sourceMapURL;\n            var sourceMapContent = JSON.stringify(this._sourceMapGenerator.toJSON());\n\n            if (this.sourceMapURL) {\n              sourceMapURL = this.sourceMapURL;\n            } else if (this._sourceMapFilename) {\n              sourceMapURL = this._sourceMapFilename;\n            }\n\n            this.sourceMapURL = sourceMapURL;\n            this.sourceMap = sourceMapContent;\n          }\n\n          return this._css.join('');\n        }\n      }]);\n\n      return SourceMapOutput;\n    }();\n\n    return SourceMapOutput;\n  });\n\n  var sourceMapBuilder = (function (SourceMapOutput, environment) {\n    var SourceMapBuilder =\n    /*#__PURE__*/\n    function () {\n      function SourceMapBuilder(options) {\n        _classCallCheck(this, SourceMapBuilder);\n\n        this.options = options;\n      }\n\n      _createClass(SourceMapBuilder, [{\n        key: \"toCSS\",\n        value: function toCSS(rootNode, options, imports) {\n          var sourceMapOutput = new SourceMapOutput({\n            contentsIgnoredCharsMap: imports.contentsIgnoredChars,\n            rootNode: rootNode,\n            contentsMap: imports.contents,\n            sourceMapFilename: this.options.sourceMapFilename,\n            sourceMapURL: this.options.sourceMapURL,\n            outputFilename: this.options.sourceMapOutputFilename,\n            sourceMapBasepath: this.options.sourceMapBasepath,\n            sourceMapRootpath: this.options.sourceMapRootpath,\n            outputSourceFiles: this.options.outputSourceFiles,\n            sourceMapGenerator: this.options.sourceMapGenerator,\n            sourceMapFileInline: this.options.sourceMapFileInline\n          });\n          var css = sourceMapOutput.toCSS(options);\n          this.sourceMap = sourceMapOutput.sourceMap;\n          this.sourceMapURL = sourceMapOutput.sourceMapURL;\n\n          if (this.options.sourceMapInputFilename) {\n            this.sourceMapInputFilename = sourceMapOutput.normalizeFilename(this.options.sourceMapInputFilename);\n          }\n\n          if (this.options.sourceMapBasepath !== undefined && this.sourceMapURL !== undefined) {\n            this.sourceMapURL = sourceMapOutput.removeBasepath(this.sourceMapURL);\n          }\n\n          return css + this.getCSSAppendage();\n        }\n      }, {\n        key: \"getCSSAppendage\",\n        value: function getCSSAppendage() {\n          var sourceMapURL = this.sourceMapURL;\n\n          if (this.options.sourceMapFileInline) {\n            if (this.sourceMap === undefined) {\n              return '';\n            }\n\n            sourceMapURL = \"data:application/json;base64,\".concat(environment.encodeBase64(this.sourceMap));\n          }\n\n          if (sourceMapURL) {\n            return \"/*# sourceMappingURL=\".concat(sourceMapURL, \" */\");\n          }\n\n          return '';\n        }\n      }, {\n        key: \"getExternalSourceMap\",\n        value: function getExternalSourceMap() {\n          return this.sourceMap;\n        }\n      }, {\n        key: \"setExternalSourceMap\",\n        value: function setExternalSourceMap(sourceMap) {\n          this.sourceMap = sourceMap;\n        }\n      }, {\n        key: \"isInline\",\n        value: function isInline() {\n          return this.options.sourceMapFileInline;\n        }\n      }, {\n        key: \"getSourceMapURL\",\n        value: function getSourceMapURL() {\n          return this.sourceMapURL;\n        }\n      }, {\n        key: \"getOutputFilename\",\n        value: function getOutputFilename() {\n          return this.options.sourceMapOutputFilename;\n        }\n      }, {\n        key: \"getInputFilename\",\n        value: function getInputFilename() {\n          return this.sourceMapInputFilename;\n        }\n      }]);\n\n      return SourceMapBuilder;\n    }();\n\n    return SourceMapBuilder;\n  });\n\n  var transformTree = (function (root) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var evaldRoot;\n    var variables = options.variables;\n    var evalEnv = new contexts.Eval(options); //\n    // Allows setting variables with a hash, so:\n    //\n    //   `{ color: new tree.Color('#f01') }` will become:\n    //\n    //   new tree.Declaration('@color',\n    //     new tree.Value([\n    //       new tree.Expression([\n    //         new tree.Color('#f01')\n    //       ])\n    //     ])\n    //   )\n    //\n\n    if (_typeof(variables) === 'object' && !Array.isArray(variables)) {\n      variables = Object.keys(variables).map(function (k) {\n        var value = variables[k];\n\n        if (!(value instanceof tree.Value)) {\n          if (!(value instanceof tree.Expression)) {\n            value = new tree.Expression([value]);\n          }\n\n          value = new tree.Value([value]);\n        }\n\n        return new tree.Declaration(\"@\".concat(k), value, false, null, 0);\n      });\n      evalEnv.frames = [new tree.Ruleset(null, variables)];\n    }\n\n    var visitors$1 = [new visitors.JoinSelectorVisitor(), new visitors.MarkVisibleSelectorsVisitor(true), new visitors.ExtendVisitor(), new visitors.ToCSSVisitor({\n      compress: Boolean(options.compress)\n    })];\n    var preEvalVisitors = [];\n    var v;\n    var visitorIterator;\n    /**\n     * first() / get() allows visitors to be added while visiting\n     * \n     * @todo Add scoping for visitors just like functions for @plugin; right now they're global\n     */\n\n    if (options.pluginManager) {\n      visitorIterator = options.pluginManager.visitor();\n\n      for (var i = 0; i < 2; i++) {\n        visitorIterator.first();\n\n        while (v = visitorIterator.get()) {\n          if (v.isPreEvalVisitor) {\n            if (i === 0 || preEvalVisitors.indexOf(v) === -1) {\n              preEvalVisitors.push(v);\n              v.run(root);\n            }\n          } else {\n            if (i === 0 || visitors$1.indexOf(v) === -1) {\n              if (v.isPreVisitor) {\n                visitors$1.unshift(v);\n              } else {\n                visitors$1.push(v);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    evaldRoot = root.eval(evalEnv);\n\n    for (var i = 0; i < visitors$1.length; i++) {\n      visitors$1[i].run(evaldRoot);\n    } // Run any remaining visitors added after eval pass\n\n\n    if (options.pluginManager) {\n      visitorIterator.first();\n\n      while (v = visitorIterator.get()) {\n        if (visitors$1.indexOf(v) === -1 && preEvalVisitors.indexOf(v) === -1) {\n          v.run(evaldRoot);\n        }\n      }\n    }\n\n    return evaldRoot;\n  });\n\n  var parseTree = (function (SourceMapBuilder) {\n    var ParseTree =\n    /*#__PURE__*/\n    function () {\n      function ParseTree(root, imports) {\n        _classCallCheck(this, ParseTree);\n\n        this.root = root;\n        this.imports = imports;\n      }\n\n      _createClass(ParseTree, [{\n        key: \"toCSS\",\n        value: function toCSS(options) {\n          var evaldRoot;\n          var result = {};\n          var sourceMapBuilder;\n\n          try {\n            evaldRoot = transformTree(this.root, options);\n          } catch (e) {\n            throw new LessError(e, this.imports);\n          }\n\n          try {\n            var compress = Boolean(options.compress);\n\n            if (compress) {\n              logger.warn('The compress option has been deprecated. ' + 'We recommend you use a dedicated css minifier, for instance see less-plugin-clean-css.');\n            }\n\n            var toCSSOptions = {\n              compress: compress,\n              dumpLineNumbers: options.dumpLineNumbers,\n              strictUnits: Boolean(options.strictUnits),\n              numPrecision: 8\n            };\n\n            if (options.sourceMap) {\n              sourceMapBuilder = new SourceMapBuilder(options.sourceMap);\n              result.css = sourceMapBuilder.toCSS(evaldRoot, toCSSOptions, this.imports);\n            } else {\n              result.css = evaldRoot.toCSS(toCSSOptions);\n            }\n          } catch (e) {\n            throw new LessError(e, this.imports);\n          }\n\n          if (options.pluginManager) {\n            var postProcessors = options.pluginManager.getPostProcessors();\n\n            for (var i = 0; i < postProcessors.length; i++) {\n              result.css = postProcessors[i].process(result.css, {\n                sourceMap: sourceMapBuilder,\n                options: options,\n                imports: this.imports\n              });\n            }\n          }\n\n          if (options.sourceMap) {\n            result.map = sourceMapBuilder.getExternalSourceMap();\n          }\n\n          result.imports = [];\n\n          for (var file in this.imports.files) {\n            if (this.imports.files.hasOwnProperty(file) && file !== this.imports.rootFilename) {\n              result.imports.push(file);\n            }\n          }\n\n          return result;\n        }\n      }]);\n\n      return ParseTree;\n    }();\n\n    return ParseTree;\n  });\n\n  var importManager = (function (environment) {\n    // FileInfo = {\n    //  'rewriteUrls' - option - whether to adjust URL's to be relative\n    //  'filename' - full resolved filename of current file\n    //  'rootpath' - path to append to normal URLs for this node\n    //  'currentDirectory' - path to the current file, absolute\n    //  'rootFilename' - filename of the base file\n    //  'entryPath' - absolute path to the entry file\n    //  'reference' - whether the file should not be output and only output parts that are referenced\n    var ImportManager =\n    /*#__PURE__*/\n    function () {\n      function ImportManager(less, context, rootFileInfo) {\n        _classCallCheck(this, ImportManager);\n\n        this.less = less;\n        this.rootFilename = rootFileInfo.filename;\n        this.paths = context.paths || []; // Search paths, when importing\n\n        this.contents = {}; // map - filename to contents of all the files\n\n        this.contentsIgnoredChars = {}; // map - filename to lines at the beginning of each file to ignore\n\n        this.mime = context.mime;\n        this.error = null;\n        this.context = context; // Deprecated? Unused outside of here, could be useful.\n\n        this.queue = []; // Files which haven't been imported yet\n\n        this.files = {}; // Holds the imported parse trees.\n      }\n      /**\n       * Add an import to be imported\n       * @param path - the raw path\n       * @param tryAppendExtension - whether to try appending a file extension (.less or .js if the path has no extension)\n       * @param currentFileInfo - the current file info (used for instance to work out relative paths)\n       * @param importOptions - import options\n       * @param callback - callback for when it is imported\n       */\n\n\n      _createClass(ImportManager, [{\n        key: \"push\",\n        value: function push(path, tryAppendExtension, currentFileInfo, importOptions, callback) {\n          var importManager = this;\n          var pluginLoader = this.context.pluginManager.Loader;\n          this.queue.push(path);\n\n          var fileParsedFunc = function fileParsedFunc(e, root, fullPath) {\n            importManager.queue.splice(importManager.queue.indexOf(path), 1); // Remove the path from the queue\n\n            var importedEqualsRoot = fullPath === importManager.rootFilename;\n\n            if (importOptions.optional && e) {\n              callback(null, {\n                rules: []\n              }, false, null);\n              logger.info(\"The file \".concat(fullPath, \" was skipped because it was not found and the import was marked optional.\"));\n            } else {\n              // Inline imports aren't cached here.\n              // If we start to cache them, please make sure they won't conflict with non-inline imports of the\n              // same name as they used to do before this comment and the condition below have been added.\n              if (!importManager.files[fullPath] && !importOptions.inline) {\n                importManager.files[fullPath] = {\n                  root: root,\n                  options: importOptions\n                };\n              }\n\n              if (e && !importManager.error) {\n                importManager.error = e;\n              }\n\n              callback(e, root, importedEqualsRoot, fullPath);\n            }\n          };\n\n          var newFileInfo = {\n            rewriteUrls: this.context.rewriteUrls,\n            entryPath: currentFileInfo.entryPath,\n            rootpath: currentFileInfo.rootpath,\n            rootFilename: currentFileInfo.rootFilename\n          };\n          var fileManager = environment.getFileManager(path, currentFileInfo.currentDirectory, this.context, environment);\n\n          if (!fileManager) {\n            fileParsedFunc({\n              message: \"Could not find a file-manager for \".concat(path)\n            });\n            return;\n          }\n\n          var loadFileCallback = function loadFileCallback(loadedFile) {\n            var plugin;\n            var resolvedFilename = loadedFile.filename;\n            var contents = loadedFile.contents.replace(/^\\uFEFF/, ''); // Pass on an updated rootpath if path of imported file is relative and file\n            // is in a (sub|sup) directory\n            //\n            // Examples:\n            // - If path of imported file is 'module/nav/nav.less' and rootpath is 'less/',\n            //   then rootpath should become 'less/module/nav/'\n            // - If path of imported file is '../mixins.less' and rootpath is 'less/',\n            //   then rootpath should become 'less/../'\n\n            newFileInfo.currentDirectory = fileManager.getPath(resolvedFilename);\n\n            if (newFileInfo.rewriteUrls) {\n              newFileInfo.rootpath = fileManager.join(importManager.context.rootpath || '', fileManager.pathDiff(newFileInfo.currentDirectory, newFileInfo.entryPath));\n\n              if (!fileManager.isPathAbsolute(newFileInfo.rootpath) && fileManager.alwaysMakePathsAbsolute()) {\n                newFileInfo.rootpath = fileManager.join(newFileInfo.entryPath, newFileInfo.rootpath);\n              }\n            }\n\n            newFileInfo.filename = resolvedFilename;\n            var newEnv = new contexts.Parse(importManager.context);\n            newEnv.processImports = false;\n            importManager.contents[resolvedFilename] = contents;\n\n            if (currentFileInfo.reference || importOptions.reference) {\n              newFileInfo.reference = true;\n            }\n\n            if (importOptions.isPlugin) {\n              plugin = pluginLoader.evalPlugin(contents, newEnv, importManager, importOptions.pluginArgs, newFileInfo);\n\n              if (plugin instanceof LessError) {\n                fileParsedFunc(plugin, null, resolvedFilename);\n              } else {\n                fileParsedFunc(null, plugin, resolvedFilename);\n              }\n            } else if (importOptions.inline) {\n              fileParsedFunc(null, contents, resolvedFilename);\n            } else {\n              // import (multiple) parse trees apparently get altered and can't be cached.\n              // TODO: investigate why this is\n              if (importManager.files[resolvedFilename] && !importManager.files[resolvedFilename].options.multiple && !importOptions.multiple) {\n                fileParsedFunc(null, importManager.files[resolvedFilename].root, resolvedFilename);\n              } else {\n                new Parser(newEnv, importManager, newFileInfo).parse(contents, function (e, root) {\n                  fileParsedFunc(e, root, resolvedFilename);\n                });\n              }\n            }\n          };\n\n          var promise;\n          var context = clone(this.context);\n\n          if (tryAppendExtension) {\n            context.ext = importOptions.isPlugin ? '.js' : '.less';\n          }\n\n          if (importOptions.isPlugin) {\n            context.mime = 'application/javascript';\n            promise = pluginLoader.loadPlugin(path, currentFileInfo.currentDirectory, context, environment, fileManager);\n          } else {\n            promise = fileManager.loadFile(path, currentFileInfo.currentDirectory, context, environment, function (err, loadedFile) {\n              if (err) {\n                fileParsedFunc(err);\n              } else {\n                loadFileCallback(loadedFile);\n              }\n            });\n          }\n\n          if (promise) {\n            promise.then(loadFileCallback, fileParsedFunc);\n          }\n        }\n      }]);\n\n      return ImportManager;\n    }();\n\n    return ImportManager;\n  });\n\n  var Render = (function (environment, ParseTree, ImportManager) {\n    var render = function render(input, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = copyOptions(this.options, {});\n      } else {\n        options = copyOptions(this.options, options || {});\n      }\n\n      if (!callback) {\n        var self = this;\n        return new Promise(function (resolve, reject) {\n          render.call(self, input, options, function (err, output) {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(output);\n            }\n          });\n        });\n      } else {\n        this.parse(input, options, function (err, root, imports, options) {\n          if (err) {\n            return callback(err);\n          }\n\n          var result;\n\n          try {\n            var parseTree = new ParseTree(root, imports);\n            result = parseTree.toCSS(options);\n          } catch (err) {\n            return callback(err);\n          }\n\n          callback(null, result);\n        });\n      }\n    };\n\n    return render;\n  });\n\n  /**\n   * Plugin Manager\n   */\n  var PluginManager =\n  /*#__PURE__*/\n  function () {\n    function PluginManager(less) {\n      _classCallCheck(this, PluginManager);\n\n      this.less = less;\n      this.visitors = [];\n      this.preProcessors = [];\n      this.postProcessors = [];\n      this.installedPlugins = [];\n      this.fileManagers = [];\n      this.iterator = -1;\n      this.pluginCache = {};\n      this.Loader = new less.PluginLoader(less);\n    }\n    /**\n     * Adds all the plugins in the array\n     * @param {Array} plugins\n     */\n\n\n    _createClass(PluginManager, [{\n      key: \"addPlugins\",\n      value: function addPlugins(plugins) {\n        if (plugins) {\n          for (var i = 0; i < plugins.length; i++) {\n            this.addPlugin(plugins[i]);\n          }\n        }\n      }\n      /**\n       *\n       * @param plugin\n       * @param {String} filename\n       */\n\n    }, {\n      key: \"addPlugin\",\n      value: function addPlugin(plugin, filename, functionRegistry) {\n        this.installedPlugins.push(plugin);\n\n        if (filename) {\n          this.pluginCache[filename] = plugin;\n        }\n\n        if (plugin.install) {\n          plugin.install(this.less, this, functionRegistry || this.less.functions.functionRegistry);\n        }\n      }\n      /**\n       *\n       * @param filename\n       */\n\n    }, {\n      key: \"get\",\n      value: function get(filename) {\n        return this.pluginCache[filename];\n      }\n      /**\n       * Adds a visitor. The visitor object has options on itself to determine\n       * when it should run.\n       * @param visitor\n       */\n\n    }, {\n      key: \"addVisitor\",\n      value: function addVisitor(visitor) {\n        this.visitors.push(visitor);\n      }\n      /**\n       * Adds a pre processor object\n       * @param {object} preProcessor\n       * @param {number} priority - guidelines 1 = before import, 1000 = import, 2000 = after import\n       */\n\n    }, {\n      key: \"addPreProcessor\",\n      value: function addPreProcessor(preProcessor, priority) {\n        var indexToInsertAt;\n\n        for (indexToInsertAt = 0; indexToInsertAt < this.preProcessors.length; indexToInsertAt++) {\n          if (this.preProcessors[indexToInsertAt].priority >= priority) {\n            break;\n          }\n        }\n\n        this.preProcessors.splice(indexToInsertAt, 0, {\n          preProcessor: preProcessor,\n          priority: priority\n        });\n      }\n      /**\n       * Adds a post processor object\n       * @param {object} postProcessor\n       * @param {number} priority - guidelines 1 = before compression, 1000 = compression, 2000 = after compression\n       */\n\n    }, {\n      key: \"addPostProcessor\",\n      value: function addPostProcessor(postProcessor, priority) {\n        var indexToInsertAt;\n\n        for (indexToInsertAt = 0; indexToInsertAt < this.postProcessors.length; indexToInsertAt++) {\n          if (this.postProcessors[indexToInsertAt].priority >= priority) {\n            break;\n          }\n        }\n\n        this.postProcessors.splice(indexToInsertAt, 0, {\n          postProcessor: postProcessor,\n          priority: priority\n        });\n      }\n      /**\n       *\n       * @param manager\n       */\n\n    }, {\n      key: \"addFileManager\",\n      value: function addFileManager(manager) {\n        this.fileManagers.push(manager);\n      }\n      /**\n       *\n       * @returns {Array}\n       * @private\n       */\n\n    }, {\n      key: \"getPreProcessors\",\n      value: function getPreProcessors() {\n        var preProcessors = [];\n\n        for (var i = 0; i < this.preProcessors.length; i++) {\n          preProcessors.push(this.preProcessors[i].preProcessor);\n        }\n\n        return preProcessors;\n      }\n      /**\n       *\n       * @returns {Array}\n       * @private\n       */\n\n    }, {\n      key: \"getPostProcessors\",\n      value: function getPostProcessors() {\n        var postProcessors = [];\n\n        for (var i = 0; i < this.postProcessors.length; i++) {\n          postProcessors.push(this.postProcessors[i].postProcessor);\n        }\n\n        return postProcessors;\n      }\n      /**\n       *\n       * @returns {Array}\n       * @private\n       */\n\n    }, {\n      key: \"getVisitors\",\n      value: function getVisitors() {\n        return this.visitors;\n      }\n    }, {\n      key: \"visitor\",\n      value: function visitor() {\n        var self = this;\n        return {\n          first: function first() {\n            self.iterator = -1;\n            return self.visitors[self.iterator];\n          },\n          get: function get() {\n            self.iterator += 1;\n            return self.visitors[self.iterator];\n          }\n        };\n      }\n      /**\n       *\n       * @returns {Array}\n       * @private\n       */\n\n    }, {\n      key: \"getFileManagers\",\n      value: function getFileManagers() {\n        return this.fileManagers;\n      }\n    }]);\n\n    return PluginManager;\n  }();\n\n  var pm;\n\n  function PluginManagerFactory(less, newFactory) {\n    if (newFactory || !pm) {\n      pm = new PluginManager(less);\n    }\n\n    return pm;\n  }\n\n  var Parse = (function (environment, ParseTree, ImportManager) {\n    var parse = function parse(input, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = copyOptions(this.options, {});\n      } else {\n        options = copyOptions(this.options, options || {});\n      }\n\n      if (!callback) {\n        var self = this;\n        return new Promise(function (resolve, reject) {\n          parse.call(self, input, options, function (err, output) {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(output);\n            }\n          });\n        });\n      } else {\n        var context;\n        var rootFileInfo;\n        var pluginManager = new PluginManagerFactory(this, !options.reUsePluginManager);\n        options.pluginManager = pluginManager;\n        context = new contexts.Parse(options);\n\n        if (options.rootFileInfo) {\n          rootFileInfo = options.rootFileInfo;\n        } else {\n          var filename = options.filename || 'input';\n          var entryPath = filename.replace(/[^\\/\\\\]*$/, '');\n          rootFileInfo = {\n            filename: filename,\n            rewriteUrls: context.rewriteUrls,\n            rootpath: context.rootpath || '',\n            currentDirectory: entryPath,\n            entryPath: entryPath,\n            rootFilename: filename\n          }; // add in a missing trailing slash\n\n          if (rootFileInfo.rootpath && rootFileInfo.rootpath.slice(-1) !== '/') {\n            rootFileInfo.rootpath += '/';\n          }\n        }\n\n        var imports = new ImportManager(this, context, rootFileInfo);\n        this.importManager = imports; // TODO: allow the plugins to be just a list of paths or names\n        // Do an async plugin queue like lessc\n\n        if (options.plugins) {\n          options.plugins.forEach(function (plugin) {\n            var evalResult;\n            var contents;\n\n            if (plugin.fileContent) {\n              contents = plugin.fileContent.replace(/^\\uFEFF/, '');\n              evalResult = pluginManager.Loader.evalPlugin(contents, context, imports, plugin.options, plugin.filename);\n\n              if (evalResult instanceof LessError) {\n                return callback(evalResult);\n              }\n            } else {\n              pluginManager.addPlugin(plugin);\n            }\n          });\n        }\n\n        new Parser(context, imports, rootFileInfo).parse(input, function (e, root) {\n          if (e) {\n            return callback(e);\n          }\n\n          callback(null, root, imports, options);\n        }, options);\n      }\n    };\n\n    return parse;\n  });\n\n  var lessRoot = (function (environment$1, fileManagers) {\n    /**\n     * @todo\n     * This original code could be improved quite a bit.\n     * Many classes / modules currently add side-effects / mutations to passed in objects,\n     * which makes it hard to refactor and reason about. \n     */\n    environment$1 = new environment(environment$1, fileManagers);\n    var SourceMapOutput = sourceMapOutput(environment$1);\n    var SourceMapBuilder = sourceMapBuilder(SourceMapOutput, environment$1);\n    var ParseTree = parseTree(SourceMapBuilder);\n    var ImportManager = importManager(environment$1);\n    var render = Render(environment$1, ParseTree);\n    var parse = Parse(environment$1, ParseTree, ImportManager);\n    var functions = Functions(environment$1);\n    /**\n     * @todo\n     * This root properties / methods need to be organized.\n     * It's not clear what should / must be public and why.\n     */\n\n    var initial = {\n      version: [3, 10, 3],\n      data: data,\n      tree: tree,\n      Environment: environment,\n      AbstractFileManager: AbstractFileManager,\n      AbstractPluginLoader: AbstractPluginLoader,\n      environment: environment$1,\n      visitors: visitors,\n      Parser: Parser,\n      functions: functions,\n      contexts: contexts,\n      SourceMapOutput: SourceMapOutput,\n      SourceMapBuilder: SourceMapBuilder,\n      ParseTree: ParseTree,\n      ImportManager: ImportManager,\n      render: render,\n      parse: parse,\n      LessError: LessError,\n      transformTree: transformTree,\n      utils: utils,\n      PluginManager: PluginManagerFactory,\n      logger: logger\n    }; // Create a public API\n\n    var ctor = function ctor(t) {\n      return function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return _construct(t, args);\n      };\n    };\n\n    var t;\n    var api = Object.create(initial);\n\n    for (var n in initial.tree) {\n      /* eslint guard-for-in: 0 */\n      t = initial.tree[n];\n\n      if (typeof t === 'function') {\n        api[n.toLowerCase()] = ctor(t);\n      } else {\n        api[n] = Object.create(null);\n\n        for (var o in t) {\n          /* eslint guard-for-in: 0 */\n          api[n][o.toLowerCase()] = ctor(t[o]);\n        }\n      }\n    }\n\n    return api;\n  });\n\n  var options;\n  var logger$1;\n  var fileCache = {}; // TODOS - move log somewhere. pathDiff and doing something similar in node. use pathDiff in the other browser file for the initial load\n\n  var FileManager =\n  /*#__PURE__*/\n  function (_AbstractFileManager) {\n    _inherits(FileManager, _AbstractFileManager);\n\n    function FileManager() {\n      _classCallCheck(this, FileManager);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(FileManager).apply(this, arguments));\n    }\n\n    _createClass(FileManager, [{\n      key: \"alwaysMakePathsAbsolute\",\n      value: function alwaysMakePathsAbsolute() {\n        return true;\n      }\n    }, {\n      key: \"join\",\n      value: function join(basePath, laterPath) {\n        if (!basePath) {\n          return laterPath;\n        }\n\n        return this.extractUrlParts(laterPath, basePath).path;\n      }\n    }, {\n      key: \"doXHR\",\n      value: function doXHR(url, type, callback, errback) {\n        var xhr = new XMLHttpRequest();\n        var async = options.isFileProtocol ? options.fileAsync : true;\n\n        if (typeof xhr.overrideMimeType === 'function') {\n          xhr.overrideMimeType('text/css');\n        }\n\n        logger$1.debug(\"XHR: Getting '\".concat(url, \"'\"));\n        xhr.open('GET', url, async);\n        xhr.setRequestHeader('Accept', type || 'text/x-less, text/css; q=0.9, */*; q=0.5');\n        xhr.send(null);\n\n        function handleResponse(xhr, callback, errback) {\n          if (xhr.status >= 200 && xhr.status < 300) {\n            callback(xhr.responseText, xhr.getResponseHeader('Last-Modified'));\n          } else if (typeof errback === 'function') {\n            errback(xhr.status, url);\n          }\n        }\n\n        if (options.isFileProtocol && !options.fileAsync) {\n          if (xhr.status === 0 || xhr.status >= 200 && xhr.status < 300) {\n            callback(xhr.responseText);\n          } else {\n            errback(xhr.status, url);\n          }\n        } else if (async) {\n          xhr.onreadystatechange = function () {\n            if (xhr.readyState == 4) {\n              handleResponse(xhr, callback, errback);\n            }\n          };\n        } else {\n          handleResponse(xhr, callback, errback);\n        }\n      }\n    }, {\n      key: \"supports\",\n      value: function supports() {\n        return true;\n      }\n    }, {\n      key: \"clearFileCache\",\n      value: function clearFileCache() {\n        fileCache = {};\n      }\n    }, {\n      key: \"loadFile\",\n      value: function loadFile(filename, currentDirectory, options, environment) {\n        // TODO: Add prefix support like less-node?\n        // What about multiple paths?\n        if (currentDirectory && !this.isPathAbsolute(filename)) {\n          filename = currentDirectory + filename;\n        }\n\n        filename = options.ext ? this.tryAppendExtension(filename, options.ext) : filename;\n        options = options || {}; // sheet may be set to the stylesheet for the initial load or a collection of properties including\n        // some context variables for imports\n\n        var hrefParts = this.extractUrlParts(filename, window.location.href);\n        var href = hrefParts.url;\n        var self = this;\n        return new Promise(function (resolve, reject) {\n          if (options.useFileCache && fileCache[href]) {\n            try {\n              var lessText = fileCache[href];\n              return resolve({\n                contents: lessText,\n                filename: href,\n                webInfo: {\n                  lastModified: new Date()\n                }\n              });\n            } catch (e) {\n              return reject({\n                filename: href,\n                message: \"Error loading file \".concat(href, \" error was \").concat(e.message)\n              });\n            }\n          }\n\n          self.doXHR(href, options.mime, function doXHRCallback(data, lastModified) {\n            // per file cache\n            fileCache[href] = data; // Use remote copy (re-parse)\n\n            resolve({\n              contents: data,\n              filename: href,\n              webInfo: {\n                lastModified: lastModified\n              }\n            });\n          }, function doXHRError(status, url) {\n            reject({\n              type: 'File',\n              message: \"'\".concat(url, \"' wasn't found (\").concat(status, \")\"),\n              href: href\n            });\n          });\n        });\n      }\n    }]);\n\n    return FileManager;\n  }(AbstractFileManager);\n\n  var FM = (function (opts, log) {\n    options = opts;\n    logger$1 = log;\n    return FileManager;\n  });\n\n  /**\n   * Browser Plugin Loader\n   */\n\n  var PluginLoader =\n  /*#__PURE__*/\n  function (_AbstractPluginLoader) {\n    _inherits(PluginLoader, _AbstractPluginLoader);\n\n    function PluginLoader(less) {\n      var _this;\n\n      _classCallCheck(this, PluginLoader);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(PluginLoader).call(this));\n      _this.less = less; // Should we shim this.require for browser? Probably not?\n\n      return _this;\n    }\n\n    _createClass(PluginLoader, [{\n      key: \"loadPlugin\",\n      value: function loadPlugin(filename, basePath, context, environment, fileManager) {\n        return new Promise(function (fulfill, reject) {\n          fileManager.loadFile(filename, basePath, context, environment).then(fulfill).catch(reject);\n        });\n      }\n    }]);\n\n    return PluginLoader;\n  }(AbstractPluginLoader);\n\n  var LogListener = (function (less, options) {\n    var logLevel_debug = 4;\n    var logLevel_info = 3;\n    var logLevel_warn = 2;\n    var logLevel_error = 1; // The amount of logging in the javascript console.\n    // 3 - Debug, information and errors\n    // 2 - Information and errors\n    // 1 - Errors\n    // 0 - None\n    // Defaults to 2\n\n    options.logLevel = typeof options.logLevel !== 'undefined' ? options.logLevel : options.env === 'development' ? logLevel_info : logLevel_error;\n\n    if (!options.loggers) {\n      options.loggers = [{\n        debug: function debug(msg) {\n          if (options.logLevel >= logLevel_debug) {\n            console.log(msg);\n          }\n        },\n        info: function info(msg) {\n          if (options.logLevel >= logLevel_info) {\n            console.log(msg);\n          }\n        },\n        warn: function warn(msg) {\n          if (options.logLevel >= logLevel_warn) {\n            console.warn(msg);\n          }\n        },\n        error: function error(msg) {\n          if (options.logLevel >= logLevel_error) {\n            console.error(msg);\n          }\n        }\n      }];\n    }\n\n    for (var i = 0; i < options.loggers.length; i++) {\n      less.logger.addListener(options.loggers[i]);\n    }\n  });\n\n  var ErrorReporting = (function (window, less, options) {\n    function errorHTML(e, rootHref) {\n      var id = \"less-error-message:\".concat(extractId(rootHref || ''));\n      var template = '<li><label>{line}</label><pre class=\"{class}\">{content}</pre></li>';\n      var elem = window.document.createElement('div');\n      var timer;\n      var content;\n      var errors = [];\n      var filename = e.filename || rootHref;\n      var filenameNoPath = filename.match(/([^\\/]+(\\?.*)?)$/)[1];\n      elem.id = id;\n      elem.className = 'less-error-message';\n      content = \"<h3>\".concat(e.type || 'Syntax', \"Error: \").concat(e.message || 'There is an error in your .less file') + \"</h3><p>in <a href=\\\"\".concat(filename, \"\\\">\").concat(filenameNoPath, \"</a> \");\n\n      var errorline = function errorline(e, i, classname) {\n        if (e.extract[i] !== undefined) {\n          errors.push(template.replace(/\\{line\\}/, (parseInt(e.line, 10) || 0) + (i - 1)).replace(/\\{class\\}/, classname).replace(/\\{content\\}/, e.extract[i]));\n        }\n      };\n\n      if (e.line) {\n        errorline(e, 0, '');\n        errorline(e, 1, 'line');\n        errorline(e, 2, '');\n        content += \"on line \".concat(e.line, \", column \").concat(e.column + 1, \":</p><ul>\").concat(errors.join(''), \"</ul>\");\n      }\n\n      if (e.stack && (e.extract || options.logLevel >= 4)) {\n        content += \"<br/>Stack Trace</br />\".concat(e.stack.split('\\n').slice(1).join('<br/>'));\n      }\n\n      elem.innerHTML = content; // CSS for error messages\n\n      browser.createCSS(window.document, ['.less-error-message ul, .less-error-message li {', 'list-style-type: none;', 'margin-right: 15px;', 'padding: 4px 0;', 'margin: 0;', '}', '.less-error-message label {', 'font-size: 12px;', 'margin-right: 15px;', 'padding: 4px 0;', 'color: #cc7777;', '}', '.less-error-message pre {', 'color: #dd6666;', 'padding: 4px 0;', 'margin: 0;', 'display: inline-block;', '}', '.less-error-message pre.line {', 'color: #ff0000;', '}', '.less-error-message h3 {', 'font-size: 20px;', 'font-weight: bold;', 'padding: 15px 0 5px 0;', 'margin: 0;', '}', '.less-error-message a {', 'color: #10a', '}', '.less-error-message .error {', 'color: red;', 'font-weight: bold;', 'padding-bottom: 2px;', 'border-bottom: 1px dashed red;', '}'].join('\\n'), {\n        title: 'error-message'\n      });\n      elem.style.cssText = ['font-family: Arial, sans-serif', 'border: 1px solid #e00', 'background-color: #eee', 'border-radius: 5px', '-webkit-border-radius: 5px', '-moz-border-radius: 5px', 'color: #e00', 'padding: 15px', 'margin-bottom: 15px'].join(';');\n\n      if (options.env === 'development') {\n        timer = setInterval(function () {\n          var document = window.document;\n          var body = document.body;\n\n          if (body) {\n            if (document.getElementById(id)) {\n              body.replaceChild(elem, document.getElementById(id));\n            } else {\n              body.insertBefore(elem, body.firstChild);\n            }\n\n            clearInterval(timer);\n          }\n        }, 10);\n      }\n    }\n\n    function removeErrorHTML(path) {\n      var node = window.document.getElementById(\"less-error-message:\".concat(extractId(path)));\n\n      if (node) {\n        node.parentNode.removeChild(node);\n      }\n    }\n\n    function removeError(path) {\n      if (!options.errorReporting || options.errorReporting === 'html') {\n        removeErrorHTML(path);\n      } else if (options.errorReporting === 'console') ; else if (typeof options.errorReporting === 'function') {\n        options.errorReporting('remove', path);\n      }\n    }\n\n    function errorConsole(e, rootHref) {\n      var template = '{line} {content}';\n      var filename = e.filename || rootHref;\n      var errors = [];\n      var content = \"\".concat(e.type || 'Syntax', \"Error: \").concat(e.message || 'There is an error in your .less file', \" in \").concat(filename);\n\n      var errorline = function errorline(e, i, classname) {\n        if (e.extract[i] !== undefined) {\n          errors.push(template.replace(/\\{line\\}/, (parseInt(e.line, 10) || 0) + (i - 1)).replace(/\\{class\\}/, classname).replace(/\\{content\\}/, e.extract[i]));\n        }\n      };\n\n      if (e.line) {\n        errorline(e, 0, '');\n        errorline(e, 1, 'line');\n        errorline(e, 2, '');\n        content += \" on line \".concat(e.line, \", column \").concat(e.column + 1, \":\\n\").concat(errors.join('\\n'));\n      }\n\n      if (e.stack && (e.extract || options.logLevel >= 4)) {\n        content += \"\\nStack Trace\\n\".concat(e.stack);\n      }\n\n      less.logger.error(content);\n    }\n\n    function error(e, rootHref) {\n      if (!options.errorReporting || options.errorReporting === 'html') {\n        errorHTML(e, rootHref);\n      } else if (options.errorReporting === 'console') {\n        errorConsole(e, rootHref);\n      } else if (typeof options.errorReporting === 'function') {\n        options.errorReporting('add', e, rootHref);\n      }\n    }\n\n    return {\n      add: error,\n      remove: removeError\n    };\n  });\n\n  // Cache system is a bit outdated and could do with work\n  var Cache = (function (window, options, logger) {\n    var cache = null;\n\n    if (options.env !== 'development') {\n      try {\n        cache = typeof window.localStorage === 'undefined' ? null : window.localStorage;\n      } catch (_) {}\n    }\n\n    return {\n      setCSS: function setCSS(path, lastModified, modifyVars, styles) {\n        if (cache) {\n          logger.info(\"saving \".concat(path, \" to cache.\"));\n\n          try {\n            cache.setItem(path, styles);\n            cache.setItem(\"\".concat(path, \":timestamp\"), lastModified);\n\n            if (modifyVars) {\n              cache.setItem(\"\".concat(path, \":vars\"), JSON.stringify(modifyVars));\n            }\n          } catch (e) {\n            // TODO - could do with adding more robust error handling\n            logger.error(\"failed to save \\\"\".concat(path, \"\\\" to local storage for caching.\"));\n          }\n        }\n      },\n      getCSS: function getCSS(path, webInfo, modifyVars) {\n        var css = cache && cache.getItem(path);\n        var timestamp = cache && cache.getItem(\"\".concat(path, \":timestamp\"));\n        var vars = cache && cache.getItem(\"\".concat(path, \":vars\"));\n        modifyVars = modifyVars || {};\n        vars = vars || \"{}\"; // if not set, treat as the JSON representation of an empty object\n\n        if (timestamp && webInfo.lastModified && new Date(webInfo.lastModified).valueOf() === new Date(timestamp).valueOf() && JSON.stringify(modifyVars) === vars) {\n          // Use local copy\n          return css;\n        }\n      }\n    };\n  });\n\n  var ImageSize = (function () {\n    function _imageSize() {\n      throw {\n        type: 'Runtime',\n        message: 'Image size functions are not supported in browser version of less'\n      };\n    }\n\n    var imageFunctions = {\n      'image-size': function imageSize(filePathNode) {\n        _imageSize();\n\n        return -1;\n      },\n      'image-width': function imageWidth(filePathNode) {\n        _imageSize();\n\n        return -1;\n      },\n      'image-height': function imageHeight(filePathNode) {\n        _imageSize();\n\n        return -1;\n      }\n    };\n    functionRegistry.addMultiple(imageFunctions);\n  });\n\n  //\n  var root = (function (window, options) {\n    var document = window.document;\n    var less = lessRoot();\n    less.options = options;\n    var environment = less.environment;\n    var FileManager = FM(options, less.logger);\n    var fileManager = new FileManager();\n    environment.addFileManager(fileManager);\n    less.FileManager = FileManager;\n    less.PluginLoader = PluginLoader;\n    LogListener(less, options);\n    var errors = ErrorReporting(window, less, options);\n    var cache = less.cache = options.cache || Cache(window, options, less.logger);\n    ImageSize(less.environment); // Setup user functions - Deprecate?\n\n    if (options.functions) {\n      less.functions.functionRegistry.addMultiple(options.functions);\n    }\n\n    var typePattern = /^text\\/(x-)?less$/;\n\n    function clone(obj) {\n      var cloned = {};\n\n      for (var prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n          cloned[prop] = obj[prop];\n        }\n      }\n\n      return cloned;\n    } // only really needed for phantom\n\n\n    function bind(func, thisArg) {\n      var curryArgs = Array.prototype.slice.call(arguments, 2);\n      return function () {\n        var args = curryArgs.concat(Array.prototype.slice.call(arguments, 0));\n        return func.apply(thisArg, args);\n      };\n    }\n\n    function loadStyles(modifyVars) {\n      var styles = document.getElementsByTagName('style');\n      var style;\n\n      for (var i = 0; i < styles.length; i++) {\n        style = styles[i];\n\n        if (style.type.match(typePattern)) {\n          var instanceOptions = clone(options);\n          instanceOptions.modifyVars = modifyVars;\n          var lessText = style.innerHTML || '';\n          instanceOptions.filename = document.location.href.replace(/#.*$/, '');\n          /* jshint loopfunc:true */\n          // use closure to store current style\n\n          less.render(lessText, instanceOptions, bind(function (style, e, result) {\n            if (e) {\n              errors.add(e, 'inline');\n            } else {\n              style.type = 'text/css';\n\n              if (style.styleSheet) {\n                style.styleSheet.cssText = result.css;\n              } else {\n                style.innerHTML = result.css;\n              }\n            }\n          }, null, style));\n        }\n      }\n    }\n\n    function loadStyleSheet(sheet, callback, reload, remaining, modifyVars) {\n      var instanceOptions = clone(options);\n      addDataAttr(instanceOptions, sheet);\n      instanceOptions.mime = sheet.type;\n\n      if (modifyVars) {\n        instanceOptions.modifyVars = modifyVars;\n      }\n\n      function loadInitialFileCallback(loadedFile) {\n        var data = loadedFile.contents;\n        var path = loadedFile.filename;\n        var webInfo = loadedFile.webInfo;\n        var newFileInfo = {\n          currentDirectory: fileManager.getPath(path),\n          filename: path,\n          rootFilename: path,\n          rewriteUrls: instanceOptions.rewriteUrls\n        };\n        newFileInfo.entryPath = newFileInfo.currentDirectory;\n        newFileInfo.rootpath = instanceOptions.rootpath || newFileInfo.currentDirectory;\n\n        if (webInfo) {\n          webInfo.remaining = remaining;\n          var css = cache.getCSS(path, webInfo, instanceOptions.modifyVars);\n\n          if (!reload && css) {\n            webInfo.local = true;\n            callback(null, css, data, sheet, webInfo, path);\n            return;\n          }\n        } // TODO add tests around how this behaves when reloading\n\n\n        errors.remove(path);\n        instanceOptions.rootFileInfo = newFileInfo;\n        less.render(data, instanceOptions, function (e, result) {\n          if (e) {\n            e.href = path;\n            callback(e);\n          } else {\n            cache.setCSS(sheet.href, webInfo.lastModified, instanceOptions.modifyVars, result.css);\n            callback(null, result.css, data, sheet, webInfo, path);\n          }\n        });\n      }\n\n      fileManager.loadFile(sheet.href, null, instanceOptions, environment).then(function (loadedFile) {\n        loadInitialFileCallback(loadedFile);\n      }).catch(function (err) {\n        console.log(err);\n        callback(err);\n      });\n    }\n\n    function loadStyleSheets(callback, reload, modifyVars) {\n      for (var i = 0; i < less.sheets.length; i++) {\n        loadStyleSheet(less.sheets[i], callback, reload, less.sheets.length - (i + 1), modifyVars);\n      }\n    }\n\n    function initRunningMode() {\n      if (less.env === 'development') {\n        less.watchTimer = setInterval(function () {\n          if (less.watchMode) {\n            fileManager.clearFileCache();\n            loadStyleSheets(function (e, css, _, sheet, webInfo) {\n              if (e) {\n                errors.add(e, e.href || sheet.href);\n              } else if (css) {\n                browser.createCSS(window.document, css, sheet);\n              }\n            });\n          }\n        }, options.poll);\n      }\n    } //\n    // Watch mode\n    //\n\n\n    less.watch = function () {\n      if (!less.watchMode) {\n        less.env = 'development';\n        initRunningMode();\n      }\n\n      this.watchMode = true;\n      return true;\n    };\n\n    less.unwatch = function () {\n      clearInterval(less.watchTimer);\n      this.watchMode = false;\n      return false;\n    }; //\n    // Synchronously get all <link> tags with the 'rel' attribute set to\n    // \"stylesheet/less\".\n    //\n\n\n    less.registerStylesheetsImmediately = function () {\n      var links = document.getElementsByTagName('link');\n      less.sheets = [];\n\n      for (var i = 0; i < links.length; i++) {\n        if (links[i].rel === 'stylesheet/less' || links[i].rel.match(/stylesheet/) && links[i].type.match(typePattern)) {\n          less.sheets.push(links[i]);\n        }\n      }\n    }; //\n    // Asynchronously get all <link> tags with the 'rel' attribute set to\n    // \"stylesheet/less\", returning a Promise.\n    //\n\n\n    less.registerStylesheets = function () {\n      return new Promise(function (resolve, reject) {\n        less.registerStylesheetsImmediately();\n        resolve();\n      });\n    }; //\n    // With this function, it's possible to alter variables and re-render\n    // CSS without reloading less-files\n    //\n\n\n    less.modifyVars = function (record) {\n      return less.refresh(true, record, false);\n    };\n\n    less.refresh = function (reload, modifyVars, clearFileCache) {\n      if ((reload || clearFileCache) && clearFileCache !== false) {\n        fileManager.clearFileCache();\n      }\n\n      return new Promise(function (resolve, reject) {\n        var startTime;\n        var endTime;\n        var totalMilliseconds;\n        var remainingSheets;\n        startTime = endTime = new Date(); // Set counter for remaining unprocessed sheets\n\n        remainingSheets = less.sheets.length;\n\n        if (remainingSheets === 0) {\n          endTime = new Date();\n          totalMilliseconds = endTime - startTime;\n          less.logger.info('Less has finished and no sheets were loaded.');\n          resolve({\n            startTime: startTime,\n            endTime: endTime,\n            totalMilliseconds: totalMilliseconds,\n            sheets: less.sheets.length\n          });\n        } else {\n          // Relies on less.sheets array, callback seems to be guaranteed to be called for every element of the array\n          loadStyleSheets(function (e, css, _, sheet, webInfo) {\n            if (e) {\n              errors.add(e, e.href || sheet.href);\n              reject(e);\n              return;\n            }\n\n            if (webInfo.local) {\n              less.logger.info(\"Loading \".concat(sheet.href, \" from cache.\"));\n            } else {\n              less.logger.info(\"Rendered \".concat(sheet.href, \" successfully.\"));\n            }\n\n            browser.createCSS(window.document, css, sheet);\n            less.logger.info(\"CSS for \".concat(sheet.href, \" generated in \").concat(new Date() - endTime, \"ms\")); // Count completed sheet\n\n            remainingSheets--; // Check if the last remaining sheet was processed and then call the promise\n\n            if (remainingSheets === 0) {\n              totalMilliseconds = new Date() - startTime;\n              less.logger.info(\"Less has finished. CSS generated in \".concat(totalMilliseconds, \"ms\"));\n              resolve({\n                startTime: startTime,\n                endTime: endTime,\n                totalMilliseconds: totalMilliseconds,\n                sheets: less.sheets.length\n              });\n            }\n\n            endTime = new Date();\n          }, reload, modifyVars);\n        }\n\n        loadStyles(modifyVars);\n      });\n    };\n\n    less.refreshStyles = loadStyles;\n    return less;\n  });\n\n  /**\n   * Kicks off less and compiles any stylesheets\n   * used in the browser distributed version of less\n   * to kick-start less using the browser api\n   */\n  var options$1 = defaultOptions();\n\n  if (window.less) {\n    for (var key in window.less) {\n      if (window.less.hasOwnProperty(key)) {\n        options$1[key] = window.less[key];\n      }\n    }\n  }\n\n  addDefaultOptions(window, options$1);\n  options$1.plugins = options$1.plugins || [];\n\n  if (window.LESS_PLUGINS) {\n    options$1.plugins = options$1.plugins.concat(window.LESS_PLUGINS);\n  }\n\n  var less = root(window, options$1);\n  window.less = less;\n  var css;\n  var head;\n  var style; // Always restore page visibility\n\n  function resolveOrReject(data) {\n    if (data.filename) {\n      console.warn(data);\n    }\n\n    if (!options$1.async) {\n      head.removeChild(style);\n    }\n  }\n\n  if (options$1.onReady) {\n    if (/!watch/.test(window.location.hash)) {\n      less.watch();\n    } // Simulate synchronous stylesheet loading by hiding page rendering\n\n\n    if (!options$1.async) {\n      css = 'body { display: none !important }';\n      head = document.head || document.getElementsByTagName('head')[0];\n      style = document.createElement('style');\n      style.type = 'text/css';\n\n      if (style.styleSheet) {\n        style.styleSheet.cssText = css;\n      } else {\n        style.appendChild(document.createTextNode(css));\n      }\n\n      head.appendChild(style);\n    }\n\n    less.registerStylesheetsImmediately();\n    less.pageLoadFinished = less.refresh(less.env === 'development').then(resolveOrReject, resolveOrReject);\n  }\n\n  return less;\n\n}));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack://JsCodeRunner/./node_modules/less/dist/less.js?")}}]);